/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type CreateClientBatchItemRequest = {
    bulkClientItemCreate?: shared.BulkClientItemCreate | undefined;
    /**
     * Unique identifier for a batch
     */
    batchId: string;
};

export type CreateClientBatchItemResponse = {
    /**
     * An item that will be converted into a client
     */
    bulkClientItem?: shared.BulkClientItem | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateClientBatchItemRequest$ {
    export type Inbound = {
        BulkClientItemCreate?: shared.BulkClientItemCreate$.Inbound | undefined;
        batchId: string;
    };

    export const inboundSchema: z.ZodType<CreateClientBatchItemRequest, z.ZodTypeDef, Inbound> = z
        .object({
            BulkClientItemCreate: shared.BulkClientItemCreate$.inboundSchema.optional(),
            batchId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.BulkClientItemCreate === undefined
                    ? null
                    : { bulkClientItemCreate: v.BulkClientItemCreate }),
                batchId: v.batchId,
            };
        });

    export type Outbound = {
        BulkClientItemCreate?: shared.BulkClientItemCreate$.Outbound | undefined;
        batchId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateClientBatchItemRequest> = z
        .object({
            bulkClientItemCreate: shared.BulkClientItemCreate$.outboundSchema.optional(),
            batchId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.bulkClientItemCreate === undefined
                    ? null
                    : { BulkClientItemCreate: v.bulkClientItemCreate }),
                batchId: v.batchId,
            };
        });
}

/** @internal */
export namespace CreateClientBatchItemResponse$ {
    export type Inbound = {
        BulkClientItem?: shared.BulkClientItem$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateClientBatchItemResponse, z.ZodTypeDef, Inbound> = z
        .object({
            BulkClientItem: shared.BulkClientItem$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.BulkClientItem === undefined ? null : { bulkClientItem: v.BulkClientItem }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        BulkClientItem?: shared.BulkClientItem$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateClientBatchItemResponse> =
        z
            .object({
                bulkClientItem: shared.BulkClientItem$.outboundSchema.optional(),
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ...(v.bulkClientItem === undefined
                        ? null
                        : { BulkClientItem: v.bulkClientItem }),
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}

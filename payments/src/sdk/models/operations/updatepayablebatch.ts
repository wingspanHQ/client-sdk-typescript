/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdatePayableBatchRequest = {
  bulkPayableBatchUpdate?: shared.BulkPayableBatchUpdate | undefined;
  /**
   * Unique identifier for a batch
   */
  batchId: string;
};

export type UpdatePayableBatchResponse = {
  /**
   * A batch of items for importing as payables
   */
  bulkPayableBatch?: shared.BulkPayableBatch | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdatePayableBatchRequest$inboundSchema: z.ZodType<
  UpdatePayableBatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkPayableBatchUpdate: shared.BulkPayableBatchUpdate$inboundSchema
    .optional(),
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "BulkPayableBatchUpdate": "bulkPayableBatchUpdate",
  });
});

/** @internal */
export type UpdatePayableBatchRequest$Outbound = {
  BulkPayableBatchUpdate?: shared.BulkPayableBatchUpdate$Outbound | undefined;
  batchId: string;
};

/** @internal */
export const UpdatePayableBatchRequest$outboundSchema: z.ZodType<
  UpdatePayableBatchRequest$Outbound,
  z.ZodTypeDef,
  UpdatePayableBatchRequest
> = z.object({
  bulkPayableBatchUpdate: shared.BulkPayableBatchUpdate$outboundSchema
    .optional(),
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    bulkPayableBatchUpdate: "BulkPayableBatchUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePayableBatchRequest$ {
  /** @deprecated use `UpdatePayableBatchRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePayableBatchRequest$inboundSchema;
  /** @deprecated use `UpdatePayableBatchRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePayableBatchRequest$outboundSchema;
  /** @deprecated use `UpdatePayableBatchRequest$Outbound` instead. */
  export type Outbound = UpdatePayableBatchRequest$Outbound;
}

export function updatePayableBatchRequestToJSON(
  updatePayableBatchRequest: UpdatePayableBatchRequest,
): string {
  return JSON.stringify(
    UpdatePayableBatchRequest$outboundSchema.parse(updatePayableBatchRequest),
  );
}

export function updatePayableBatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePayableBatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePayableBatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePayableBatchRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePayableBatchResponse$inboundSchema: z.ZodType<
  UpdatePayableBatchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkPayableBatch: shared.BulkPayableBatch$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkPayableBatch": "bulkPayableBatch",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdatePayableBatchResponse$Outbound = {
  BulkPayableBatch?: shared.BulkPayableBatch$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdatePayableBatchResponse$outboundSchema: z.ZodType<
  UpdatePayableBatchResponse$Outbound,
  z.ZodTypeDef,
  UpdatePayableBatchResponse
> = z.object({
  bulkPayableBatch: shared.BulkPayableBatch$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkPayableBatch: "BulkPayableBatch",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePayableBatchResponse$ {
  /** @deprecated use `UpdatePayableBatchResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePayableBatchResponse$inboundSchema;
  /** @deprecated use `UpdatePayableBatchResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePayableBatchResponse$outboundSchema;
  /** @deprecated use `UpdatePayableBatchResponse$Outbound` instead. */
  export type Outbound = UpdatePayableBatchResponse$Outbound;
}

export function updatePayableBatchResponseToJSON(
  updatePayableBatchResponse: UpdatePayableBatchResponse,
): string {
  return JSON.stringify(
    UpdatePayableBatchResponse$outboundSchema.parse(updatePayableBatchResponse),
  );
}

export function updatePayableBatchResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePayableBatchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePayableBatchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePayableBatchResponse' from JSON`,
  );
}

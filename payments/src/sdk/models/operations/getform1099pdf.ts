/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetForm1099PDFRequest = {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Index
   */
  index: string;
  /**
   * Year
   */
  year: string;
};

export type GetForm1099PDFResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Download1099Response
   */
  download1099Response?: shared.Download1099Response | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetForm1099PDFRequest$inboundSchema: z.ZodType<
  GetForm1099PDFRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  index: z.string(),
  year: z.string(),
});

/** @internal */
export type GetForm1099PDFRequest$Outbound = {
  id: string;
  index: string;
  year: string;
};

/** @internal */
export const GetForm1099PDFRequest$outboundSchema: z.ZodType<
  GetForm1099PDFRequest$Outbound,
  z.ZodTypeDef,
  GetForm1099PDFRequest
> = z.object({
  id: z.string(),
  index: z.string(),
  year: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetForm1099PDFRequest$ {
  /** @deprecated use `GetForm1099PDFRequest$inboundSchema` instead. */
  export const inboundSchema = GetForm1099PDFRequest$inboundSchema;
  /** @deprecated use `GetForm1099PDFRequest$outboundSchema` instead. */
  export const outboundSchema = GetForm1099PDFRequest$outboundSchema;
  /** @deprecated use `GetForm1099PDFRequest$Outbound` instead. */
  export type Outbound = GetForm1099PDFRequest$Outbound;
}

export function getForm1099PDFRequestToJSON(
  getForm1099PDFRequest: GetForm1099PDFRequest,
): string {
  return JSON.stringify(
    GetForm1099PDFRequest$outboundSchema.parse(getForm1099PDFRequest),
  );
}

export function getForm1099PDFRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetForm1099PDFRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetForm1099PDFRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetForm1099PDFRequest' from JSON`,
  );
}

/** @internal */
export const GetForm1099PDFResponse$inboundSchema: z.ZodType<
  GetForm1099PDFResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Download1099Response: shared.Download1099Response$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Download1099Response": "download1099Response",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetForm1099PDFResponse$Outbound = {
  ContentType: string;
  Download1099Response?: shared.Download1099Response$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetForm1099PDFResponse$outboundSchema: z.ZodType<
  GetForm1099PDFResponse$Outbound,
  z.ZodTypeDef,
  GetForm1099PDFResponse
> = z.object({
  contentType: z.string(),
  download1099Response: shared.Download1099Response$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    download1099Response: "Download1099Response",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetForm1099PDFResponse$ {
  /** @deprecated use `GetForm1099PDFResponse$inboundSchema` instead. */
  export const inboundSchema = GetForm1099PDFResponse$inboundSchema;
  /** @deprecated use `GetForm1099PDFResponse$outboundSchema` instead. */
  export const outboundSchema = GetForm1099PDFResponse$outboundSchema;
  /** @deprecated use `GetForm1099PDFResponse$Outbound` instead. */
  export type Outbound = GetForm1099PDFResponse$Outbound;
}

export function getForm1099PDFResponseToJSON(
  getForm1099PDFResponse: GetForm1099PDFResponse,
): string {
  return JSON.stringify(
    GetForm1099PDFResponse$outboundSchema.parse(getForm1099PDFResponse),
  );
}

export function getForm1099PDFResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetForm1099PDFResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetForm1099PDFResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetForm1099PDFResponse' from JSON`,
  );
}

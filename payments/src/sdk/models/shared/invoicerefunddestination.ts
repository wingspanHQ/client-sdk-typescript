/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { InvoiceRefundEvents, InvoiceRefundEvents$ } from "./invoicerefundevents";
import { z } from "zod";

export enum InvoiceRefundDestinationDestinationType {
    Account = "Account",
    Card = "Card",
    InternalAccount = "InternalAccount",
    PaperCheck = "PaperCheck",
    WeGift = "WeGift",
}

export enum RefundType {
    Account = "Account",
    TaxWithholding = "TaxWithholding",
    Wallet = "Wallet",
    Card = "Card",
}

export type InvoiceRefundDestination = {
    amount: number;
    createdAt: string;
    destinationId?: string | null | undefined;
    destinationType: InvoiceRefundDestinationDestinationType;
    events: InvoiceRefundEvents;
    labels: Record<string, string>;
    refundType: RefundType;
    stripeTransferId?: string | null | undefined;
    transactionId?: string | null | undefined;
    transferId?: string | null | undefined;
    updatedAt: string;
};

/** @internal */
export const InvoiceRefundDestinationDestinationType$ = z.nativeEnum(
    InvoiceRefundDestinationDestinationType
);

/** @internal */
export const RefundType$ = z.nativeEnum(RefundType);

/** @internal */
export namespace InvoiceRefundDestination$ {
    export type Inbound = {
        amount: number;
        createdAt: string;
        destinationId?: string | null | undefined;
        destinationType: InvoiceRefundDestinationDestinationType;
        events: InvoiceRefundEvents$.Inbound;
        labels: Record<string, string>;
        refundType: RefundType;
        stripeTransferId?: string | null | undefined;
        transactionId?: string | null | undefined;
        transferId?: string | null | undefined;
        updatedAt: string;
    };

    export const inboundSchema: z.ZodType<InvoiceRefundDestination, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            createdAt: z.string(),
            destinationId: z.nullable(z.string()).optional(),
            destinationType: InvoiceRefundDestinationDestinationType$,
            events: InvoiceRefundEvents$.inboundSchema,
            labels: z.record(z.string()),
            refundType: RefundType$,
            stripeTransferId: z.nullable(z.string()).optional(),
            transactionId: z.nullable(z.string()).optional(),
            transferId: z.nullable(z.string()).optional(),
            updatedAt: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                createdAt: v.createdAt,
                ...(v.destinationId === undefined ? null : { destinationId: v.destinationId }),
                destinationType: v.destinationType,
                events: v.events,
                labels: v.labels,
                refundType: v.refundType,
                ...(v.stripeTransferId === undefined
                    ? null
                    : { stripeTransferId: v.stripeTransferId }),
                ...(v.transactionId === undefined ? null : { transactionId: v.transactionId }),
                ...(v.transferId === undefined ? null : { transferId: v.transferId }),
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        amount: number;
        createdAt: string;
        destinationId?: string | null | undefined;
        destinationType: InvoiceRefundDestinationDestinationType;
        events: InvoiceRefundEvents$.Outbound;
        labels: Record<string, string>;
        refundType: RefundType;
        stripeTransferId?: string | null | undefined;
        transactionId?: string | null | undefined;
        transferId?: string | null | undefined;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceRefundDestination> = z
        .object({
            amount: z.number(),
            createdAt: z.string(),
            destinationId: z.nullable(z.string()).optional(),
            destinationType: InvoiceRefundDestinationDestinationType$,
            events: InvoiceRefundEvents$.outboundSchema,
            labels: z.record(z.string()),
            refundType: RefundType$,
            stripeTransferId: z.nullable(z.string()).optional(),
            transactionId: z.nullable(z.string()).optional(),
            transferId: z.nullable(z.string()).optional(),
            updatedAt: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                createdAt: v.createdAt,
                ...(v.destinationId === undefined ? null : { destinationId: v.destinationId }),
                destinationType: v.destinationType,
                events: v.events,
                labels: v.labels,
                refundType: v.refundType,
                ...(v.stripeTransferId === undefined
                    ? null
                    : { stripeTransferId: v.stripeTransferId }),
                ...(v.transactionId === undefined ? null : { transactionId: v.transactionId }),
                ...(v.transferId === undefined ? null : { transferId: v.transferId }),
                updatedAt: v.updatedAt,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InvoiceAppliedDeductions = {
  amount: number;
  deductionId: string;
  name: string;
  transferId?: string | null | undefined;
};

/** @internal */
export const InvoiceAppliedDeductions$inboundSchema: z.ZodType<
  InvoiceAppliedDeductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  deductionId: z.string(),
  name: z.string(),
  transferId: z.nullable(z.string()).optional(),
});

/** @internal */
export type InvoiceAppliedDeductions$Outbound = {
  amount: number;
  deductionId: string;
  name: string;
  transferId?: string | null | undefined;
};

/** @internal */
export const InvoiceAppliedDeductions$outboundSchema: z.ZodType<
  InvoiceAppliedDeductions$Outbound,
  z.ZodTypeDef,
  InvoiceAppliedDeductions
> = z.object({
  amount: z.number(),
  deductionId: z.string(),
  name: z.string(),
  transferId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceAppliedDeductions$ {
  /** @deprecated use `InvoiceAppliedDeductions$inboundSchema` instead. */
  export const inboundSchema = InvoiceAppliedDeductions$inboundSchema;
  /** @deprecated use `InvoiceAppliedDeductions$outboundSchema` instead. */
  export const outboundSchema = InvoiceAppliedDeductions$outboundSchema;
  /** @deprecated use `InvoiceAppliedDeductions$Outbound` instead. */
  export type Outbound = InvoiceAppliedDeductions$Outbound;
}

export function invoiceAppliedDeductionsToJSON(
  invoiceAppliedDeductions: InvoiceAppliedDeductions,
): string {
  return JSON.stringify(
    InvoiceAppliedDeductions$outboundSchema.parse(invoiceAppliedDeductions),
  );
}

export function invoiceAppliedDeductionsFromJSON(
  jsonString: string,
): SafeParseResult<InvoiceAppliedDeductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvoiceAppliedDeductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvoiceAppliedDeductions' from JSON`,
  );
}

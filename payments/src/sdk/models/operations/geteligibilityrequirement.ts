/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetEligibilityRequirementRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetEligibilityRequirementResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * List of Eligibility Requirements
   */
  classes?: Array<shared.EligibilityRequirement> | undefined;
};

/** @internal */
export const GetEligibilityRequirementRequest$inboundSchema: z.ZodType<
  GetEligibilityRequirementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetEligibilityRequirementRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetEligibilityRequirementRequest$outboundSchema: z.ZodType<
  GetEligibilityRequirementRequest$Outbound,
  z.ZodTypeDef,
  GetEligibilityRequirementRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEligibilityRequirementRequest$ {
  /** @deprecated use `GetEligibilityRequirementRequest$inboundSchema` instead. */
  export const inboundSchema = GetEligibilityRequirementRequest$inboundSchema;
  /** @deprecated use `GetEligibilityRequirementRequest$outboundSchema` instead. */
  export const outboundSchema = GetEligibilityRequirementRequest$outboundSchema;
  /** @deprecated use `GetEligibilityRequirementRequest$Outbound` instead. */
  export type Outbound = GetEligibilityRequirementRequest$Outbound;
}

export function getEligibilityRequirementRequestToJSON(
  getEligibilityRequirementRequest: GetEligibilityRequirementRequest,
): string {
  return JSON.stringify(
    GetEligibilityRequirementRequest$outboundSchema.parse(
      getEligibilityRequirementRequest,
    ),
  );
}

export function getEligibilityRequirementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEligibilityRequirementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEligibilityRequirementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEligibilityRequirementRequest' from JSON`,
  );
}

/** @internal */
export const GetEligibilityRequirementResponse$inboundSchema: z.ZodType<
  GetEligibilityRequirementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  classes: z.array(shared.EligibilityRequirement$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetEligibilityRequirementResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  classes?: Array<shared.EligibilityRequirement$Outbound> | undefined;
};

/** @internal */
export const GetEligibilityRequirementResponse$outboundSchema: z.ZodType<
  GetEligibilityRequirementResponse$Outbound,
  z.ZodTypeDef,
  GetEligibilityRequirementResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  classes: z.array(shared.EligibilityRequirement$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEligibilityRequirementResponse$ {
  /** @deprecated use `GetEligibilityRequirementResponse$inboundSchema` instead. */
  export const inboundSchema = GetEligibilityRequirementResponse$inboundSchema;
  /** @deprecated use `GetEligibilityRequirementResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetEligibilityRequirementResponse$outboundSchema;
  /** @deprecated use `GetEligibilityRequirementResponse$Outbound` instead. */
  export type Outbound = GetEligibilityRequirementResponse$Outbound;
}

export function getEligibilityRequirementResponseToJSON(
  getEligibilityRequirementResponse: GetEligibilityRequirementResponse,
): string {
  return JSON.stringify(
    GetEligibilityRequirementResponse$outboundSchema.parse(
      getEligibilityRequirementResponse,
    ),
  );
}

export function getEligibilityRequirementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetEligibilityRequirementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEligibilityRequirementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEligibilityRequirementResponse' from JSON`,
  );
}

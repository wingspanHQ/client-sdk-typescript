/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum AccountVerificationStatus {
    Requested = "Requested",
    Pending = "Pending",
    Verified = "Verified",
}

export enum AccountVerificationType {
    MicroDeposit = "MicroDeposit",
}

export type AccountVerification = {
    status: AccountVerificationStatus;
    type: AccountVerificationType;
};

/** @internal */
export const AccountVerificationStatus$ = z.nativeEnum(AccountVerificationStatus);

/** @internal */
export const AccountVerificationType$ = z.nativeEnum(AccountVerificationType);

/** @internal */
export namespace AccountVerification$ {
    export type Inbound = {
        status: AccountVerificationStatus;
        type: AccountVerificationType;
    };

    export const inboundSchema: z.ZodType<AccountVerification, z.ZodTypeDef, Inbound> = z
        .object({
            status: AccountVerificationStatus$,
            type: AccountVerificationType$,
        })
        .transform((v) => {
            return {
                status: v.status,
                type: v.type,
            };
        });

    export type Outbound = {
        status: AccountVerificationStatus;
        type: AccountVerificationType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountVerification> = z
        .object({
            status: AccountVerificationStatus$,
            type: AccountVerificationType$,
        })
        .transform((v) => {
            return {
                status: v.status,
                type: v.type,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateTaxFormRequest = {
  taxFormUpdateRequest?: shared.TaxFormUpdateRequest | undefined;
  /**
   * Unique tax Form Id
   */
  taxFormId: string;
};

export type UpdateTaxFormResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * 1099 Tax form object
   */
  taxFormResponse?: shared.TaxFormResponse | undefined;
};

/** @internal */
export const UpdateTaxFormRequest$inboundSchema: z.ZodType<
  UpdateTaxFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  TaxFormUpdateRequest: shared.TaxFormUpdateRequest$inboundSchema.optional(),
  taxFormId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "TaxFormUpdateRequest": "taxFormUpdateRequest",
  });
});

/** @internal */
export type UpdateTaxFormRequest$Outbound = {
  TaxFormUpdateRequest?: shared.TaxFormUpdateRequest$Outbound | undefined;
  taxFormId: string;
};

/** @internal */
export const UpdateTaxFormRequest$outboundSchema: z.ZodType<
  UpdateTaxFormRequest$Outbound,
  z.ZodTypeDef,
  UpdateTaxFormRequest
> = z.object({
  taxFormUpdateRequest: shared.TaxFormUpdateRequest$outboundSchema.optional(),
  taxFormId: z.string(),
}).transform((v) => {
  return remap$(v, {
    taxFormUpdateRequest: "TaxFormUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTaxFormRequest$ {
  /** @deprecated use `UpdateTaxFormRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTaxFormRequest$inboundSchema;
  /** @deprecated use `UpdateTaxFormRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTaxFormRequest$outboundSchema;
  /** @deprecated use `UpdateTaxFormRequest$Outbound` instead. */
  export type Outbound = UpdateTaxFormRequest$Outbound;
}

export function updateTaxFormRequestToJSON(
  updateTaxFormRequest: UpdateTaxFormRequest,
): string {
  return JSON.stringify(
    UpdateTaxFormRequest$outboundSchema.parse(updateTaxFormRequest),
  );
}

export function updateTaxFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTaxFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTaxFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTaxFormRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTaxFormResponse$inboundSchema: z.ZodType<
  UpdateTaxFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TaxFormResponse: shared.TaxFormResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TaxFormResponse": "taxFormResponse",
  });
});

/** @internal */
export type UpdateTaxFormResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  TaxFormResponse?: shared.TaxFormResponse$Outbound | undefined;
};

/** @internal */
export const UpdateTaxFormResponse$outboundSchema: z.ZodType<
  UpdateTaxFormResponse$Outbound,
  z.ZodTypeDef,
  UpdateTaxFormResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  taxFormResponse: shared.TaxFormResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    taxFormResponse: "TaxFormResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTaxFormResponse$ {
  /** @deprecated use `UpdateTaxFormResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTaxFormResponse$inboundSchema;
  /** @deprecated use `UpdateTaxFormResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTaxFormResponse$outboundSchema;
  /** @deprecated use `UpdateTaxFormResponse$Outbound` instead. */
  export type Outbound = UpdateTaxFormResponse$Outbound;
}

export function updateTaxFormResponseToJSON(
  updateTaxFormResponse: UpdateTaxFormResponse,
): string {
  return JSON.stringify(
    UpdateTaxFormResponse$outboundSchema.parse(updateTaxFormResponse),
  );
}

export function updateTaxFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTaxFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTaxFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTaxFormResponse' from JSON`,
  );
}

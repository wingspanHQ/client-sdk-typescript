/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { DocumentManagementForESignatures } from "./documentmanagementforesignatures";
import { ESignatureDocumentTemplates } from "./esignaturedocumenttemplates";
import { PrivateFileManagement } from "./privatefilemanagement";
import { PublicFileManagement } from "./publicfilemanagement";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Wingspan's Files API in Production
     */
    "https://api.wingspan.app",
    /**
     * Wingspan's Files API in Staging
     */
    "https://stagingapi.wingspan.app",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    bearerAuth?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "2.1.1";
    genVersion = "2.223.3";
    userAgent = "speakeasy-sdk/typescript 2.1.1 2.223.3 1.0.0 @wingspan/files";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Wingspan Files API: Files
 */
export class Files {
    /**
     * These endpoints cater to fetching, storing, and managing documents related to electronic signatures, including retrieval of signing URLs and saving e-signed documents.
     */
    public documentManagementForESignatures: DocumentManagementForESignatures;
    /**
     * Endpoints for managing private files that are only accessible to specific members, covering actions like uploading, listing, fetching details, and deleting private files
     */
    public privateFileManagement: PrivateFileManagement;
    /**
     * Endpoints related to the handling of publicly accessible files, including uploading, listing, downloading, and deleting public files.
     */
    public publicFileManagement: PublicFileManagement;
    /**
     * Endpoints focused on creating, listing, retrieving, and deleting e-signature document templates.
     */
    public eSignatureDocumentTemplates: ESignatureDocumentTemplates;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ bearerAuth: props?.bearerAuth }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.documentManagementForESignatures = new DocumentManagementForESignatures(
            this.sdkConfiguration
        );
        this.privateFileManagement = new PrivateFileManagement(this.sdkConfiguration);
        this.publicFileManagement = new PublicFileManagement(this.sdkConfiguration);
        this.eSignatureDocumentTemplates = new ESignatureDocumentTemplates(this.sdkConfiguration);
    }
}

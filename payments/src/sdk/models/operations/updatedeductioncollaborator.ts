/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateDeductionCollaboratorRequest = {
    deductionUpdateRequest?: shared.DeductionUpdateRequest | undefined;
    /**
     * Unique identifier
     */
    id: string;
};

export type UpdateDeductionCollaboratorResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * A deduction
     */
    deductionResponse?: shared.DeductionResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const UpdateDeductionCollaboratorRequest$inboundSchema: z.ZodType<
    UpdateDeductionCollaboratorRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        DeductionUpdateRequest: shared.DeductionUpdateRequest$inboundSchema.optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            DeductionUpdateRequest: "deductionUpdateRequest",
        });
    });

/** @internal */
export type UpdateDeductionCollaboratorRequest$Outbound = {
    DeductionUpdateRequest?: shared.DeductionUpdateRequest$Outbound | undefined;
    id: string;
};

/** @internal */
export const UpdateDeductionCollaboratorRequest$outboundSchema: z.ZodType<
    UpdateDeductionCollaboratorRequest$Outbound,
    z.ZodTypeDef,
    UpdateDeductionCollaboratorRequest
> = z
    .object({
        deductionUpdateRequest: shared.DeductionUpdateRequest$outboundSchema.optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            deductionUpdateRequest: "DeductionUpdateRequest",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDeductionCollaboratorRequest$ {
    /** @deprecated use `UpdateDeductionCollaboratorRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateDeductionCollaboratorRequest$inboundSchema;
    /** @deprecated use `UpdateDeductionCollaboratorRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateDeductionCollaboratorRequest$outboundSchema;
    /** @deprecated use `UpdateDeductionCollaboratorRequest$Outbound` instead. */
    export type Outbound = UpdateDeductionCollaboratorRequest$Outbound;
}

/** @internal */
export const UpdateDeductionCollaboratorResponse$inboundSchema: z.ZodType<
    UpdateDeductionCollaboratorResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        DeductionResponse: shared.DeductionResponse$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            DeductionResponse: "deductionResponse",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type UpdateDeductionCollaboratorResponse$Outbound = {
    ContentType: string;
    DeductionResponse?: shared.DeductionResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const UpdateDeductionCollaboratorResponse$outboundSchema: z.ZodType<
    UpdateDeductionCollaboratorResponse$Outbound,
    z.ZodTypeDef,
    UpdateDeductionCollaboratorResponse
> = z
    .object({
        contentType: z.string(),
        deductionResponse: shared.DeductionResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            deductionResponse: "DeductionResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDeductionCollaboratorResponse$ {
    /** @deprecated use `UpdateDeductionCollaboratorResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateDeductionCollaboratorResponse$inboundSchema;
    /** @deprecated use `UpdateDeductionCollaboratorResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateDeductionCollaboratorResponse$outboundSchema;
    /** @deprecated use `UpdateDeductionCollaboratorResponse$Outbound` instead. */
    export type Outbound = UpdateDeductionCollaboratorResponse$Outbound;
}

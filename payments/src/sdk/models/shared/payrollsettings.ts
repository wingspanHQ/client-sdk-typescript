/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CalculationSettings1099, CalculationSettings1099$ } from "./calculationsettings1099";
import { Frequency, Frequency$ } from "./frequency";
import { FundingSource, FundingSource$ } from "./fundingsource";
import { ScheduleDate, ScheduleDate$ } from "./scheduledate";
import { z } from "zod";

export enum InternationalPayroll {
    All = "All",
    None = "None",
    LessThanNilGreaterThan = "<nil>",
}

export enum PayrollSettingsStatus {
    Active = "Active",
    Draft = "Draft",
    Expired = "Expired",
    Cancelled = "Cancelled",
}

export enum Workflow {
    SingleStage = "SingleStage",
    DualStage = "DualStage",
    LessThanNilGreaterThan = "<nil>",
}

export type PayrollSettings = {
    calculationSettings1099?: CalculationSettings1099 | null | undefined;
    enablePlannedPayroll?: boolean | null | undefined;
    enableProcessDaysBeforeDue?: boolean | null | undefined;
    frequency?: Frequency | null | undefined;
    fundingSource?: FundingSource | null | undefined;
    internationalPayroll?: InternationalPayroll | null | undefined;
    issue1099s?: boolean | null | undefined;
    processDaysBeforeDue?: number | null | undefined;
    runsPayroll?: boolean | null | undefined;
    scheduleDates?: Array<ScheduleDate> | null | undefined;
    status: PayrollSettingsStatus;
    workflow?: Workflow | null | undefined;
};

/** @internal */
export const InternationalPayroll$ = z.nativeEnum(InternationalPayroll);

/** @internal */
export const PayrollSettingsStatus$ = z.nativeEnum(PayrollSettingsStatus);

/** @internal */
export const Workflow$ = z.nativeEnum(Workflow);

/** @internal */
export namespace PayrollSettings$ {
    export type Inbound = {
        calculationSettings1099?: CalculationSettings1099$.Inbound | null | undefined;
        enablePlannedPayroll?: boolean | null | undefined;
        enableProcessDaysBeforeDue?: boolean | null | undefined;
        frequency?: Frequency$.Inbound | null | undefined;
        fundingSource?: FundingSource$.Inbound | null | undefined;
        internationalPayroll?: InternationalPayroll | null | undefined;
        issue1099s?: boolean | null | undefined;
        processDaysBeforeDue?: number | null | undefined;
        runsPayroll?: boolean | null | undefined;
        scheduleDates?: Array<ScheduleDate$.Inbound> | null | undefined;
        status: PayrollSettingsStatus;
        workflow?: Workflow | null | undefined;
    };

    export const inboundSchema: z.ZodType<PayrollSettings, z.ZodTypeDef, Inbound> = z
        .object({
            calculationSettings1099: z.nullable(CalculationSettings1099$.inboundSchema).optional(),
            enablePlannedPayroll: z.nullable(z.boolean()).optional(),
            enableProcessDaysBeforeDue: z.nullable(z.boolean()).optional(),
            frequency: z.nullable(Frequency$.inboundSchema).optional(),
            fundingSource: z.nullable(FundingSource$.inboundSchema).optional(),
            internationalPayroll: z.nullable(InternationalPayroll$).optional(),
            issue1099s: z.nullable(z.boolean()).optional(),
            processDaysBeforeDue: z.nullable(z.number()).optional(),
            runsPayroll: z.nullable(z.boolean()).optional(),
            scheduleDates: z.nullable(z.array(ScheduleDate$.inboundSchema)).optional(),
            status: PayrollSettingsStatus$,
            workflow: z.nullable(Workflow$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.calculationSettings1099 === undefined
                    ? null
                    : { calculationSettings1099: v.calculationSettings1099 }),
                ...(v.enablePlannedPayroll === undefined
                    ? null
                    : { enablePlannedPayroll: v.enablePlannedPayroll }),
                ...(v.enableProcessDaysBeforeDue === undefined
                    ? null
                    : { enableProcessDaysBeforeDue: v.enableProcessDaysBeforeDue }),
                ...(v.frequency === undefined ? null : { frequency: v.frequency }),
                ...(v.fundingSource === undefined ? null : { fundingSource: v.fundingSource }),
                ...(v.internationalPayroll === undefined
                    ? null
                    : { internationalPayroll: v.internationalPayroll }),
                ...(v.issue1099s === undefined ? null : { issue1099s: v.issue1099s }),
                ...(v.processDaysBeforeDue === undefined
                    ? null
                    : { processDaysBeforeDue: v.processDaysBeforeDue }),
                ...(v.runsPayroll === undefined ? null : { runsPayroll: v.runsPayroll }),
                ...(v.scheduleDates === undefined ? null : { scheduleDates: v.scheduleDates }),
                status: v.status,
                ...(v.workflow === undefined ? null : { workflow: v.workflow }),
            };
        });

    export type Outbound = {
        calculationSettings1099?: CalculationSettings1099$.Outbound | null | undefined;
        enablePlannedPayroll?: boolean | null | undefined;
        enableProcessDaysBeforeDue?: boolean | null | undefined;
        frequency?: Frequency$.Outbound | null | undefined;
        fundingSource?: FundingSource$.Outbound | null | undefined;
        internationalPayroll?: InternationalPayroll | null | undefined;
        issue1099s?: boolean | null | undefined;
        processDaysBeforeDue?: number | null | undefined;
        runsPayroll?: boolean | null | undefined;
        scheduleDates?: Array<ScheduleDate$.Outbound> | null | undefined;
        status: PayrollSettingsStatus;
        workflow?: Workflow | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PayrollSettings> = z
        .object({
            calculationSettings1099: z.nullable(CalculationSettings1099$.outboundSchema).optional(),
            enablePlannedPayroll: z.nullable(z.boolean()).optional(),
            enableProcessDaysBeforeDue: z.nullable(z.boolean()).optional(),
            frequency: z.nullable(Frequency$.outboundSchema).optional(),
            fundingSource: z.nullable(FundingSource$.outboundSchema).optional(),
            internationalPayroll: z.nullable(InternationalPayroll$).optional(),
            issue1099s: z.nullable(z.boolean()).optional(),
            processDaysBeforeDue: z.nullable(z.number()).optional(),
            runsPayroll: z.nullable(z.boolean()).optional(),
            scheduleDates: z.nullable(z.array(ScheduleDate$.outboundSchema)).optional(),
            status: PayrollSettingsStatus$,
            workflow: z.nullable(Workflow$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.calculationSettings1099 === undefined
                    ? null
                    : { calculationSettings1099: v.calculationSettings1099 }),
                ...(v.enablePlannedPayroll === undefined
                    ? null
                    : { enablePlannedPayroll: v.enablePlannedPayroll }),
                ...(v.enableProcessDaysBeforeDue === undefined
                    ? null
                    : { enableProcessDaysBeforeDue: v.enableProcessDaysBeforeDue }),
                ...(v.frequency === undefined ? null : { frequency: v.frequency }),
                ...(v.fundingSource === undefined ? null : { fundingSource: v.fundingSource }),
                ...(v.internationalPayroll === undefined
                    ? null
                    : { internationalPayroll: v.internationalPayroll }),
                ...(v.issue1099s === undefined ? null : { issue1099s: v.issue1099s }),
                ...(v.processDaysBeforeDue === undefined
                    ? null
                    : { processDaysBeforeDue: v.processDaysBeforeDue }),
                ...(v.runsPayroll === undefined ? null : { runsPayroll: v.runsPayroll }),
                ...(v.scheduleDates === undefined ? null : { scheduleDates: v.scheduleDates }),
                status: v.status,
                ...(v.workflow === undefined ? null : { workflow: v.workflow }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InstitutionResponse = {
  address: string;
  isACHSupported: boolean;
  isRTPSupported: boolean;
  isWireSupported: boolean;
  name: string;
  routingNumber: string;
};

/** @internal */
export const InstitutionResponse$inboundSchema: z.ZodType<
  InstitutionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  isACHSupported: z.boolean(),
  isRTPSupported: z.boolean(),
  isWireSupported: z.boolean(),
  name: z.string(),
  routingNumber: z.string(),
});

/** @internal */
export type InstitutionResponse$Outbound = {
  address: string;
  isACHSupported: boolean;
  isRTPSupported: boolean;
  isWireSupported: boolean;
  name: string;
  routingNumber: string;
};

/** @internal */
export const InstitutionResponse$outboundSchema: z.ZodType<
  InstitutionResponse$Outbound,
  z.ZodTypeDef,
  InstitutionResponse
> = z.object({
  address: z.string(),
  isACHSupported: z.boolean(),
  isRTPSupported: z.boolean(),
  isWireSupported: z.boolean(),
  name: z.string(),
  routingNumber: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstitutionResponse$ {
  /** @deprecated use `InstitutionResponse$inboundSchema` instead. */
  export const inboundSchema = InstitutionResponse$inboundSchema;
  /** @deprecated use `InstitutionResponse$outboundSchema` instead. */
  export const outboundSchema = InstitutionResponse$outboundSchema;
  /** @deprecated use `InstitutionResponse$Outbound` instead. */
  export type Outbound = InstitutionResponse$Outbound;
}

export function institutionResponseToJSON(
  institutionResponse: InstitutionResponse,
): string {
  return JSON.stringify(
    InstitutionResponse$outboundSchema.parse(institutionResponse),
  );
}

export function institutionResponseFromJSON(
  jsonString: string,
): SafeParseResult<InstitutionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstitutionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstitutionResponse' from JSON`,
  );
}

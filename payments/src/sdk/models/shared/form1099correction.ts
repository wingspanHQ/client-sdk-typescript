/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Form1099CorrectionAddress = {};

export enum Form1099CorrectionCompanyStructure {
    None = "None",
    SoleProprietorship = "SoleProprietorship",
    LlcSingleMember = "LlcSingleMember",
    LlcMultiMember = "LlcMultiMember",
    CorporationS = "CorporationS",
    LLCCorporationS = "LLCCorporationS",
    LLCCorporationC = "LLCCorporationC",
    LLCPartnership = "LLCPartnership",
    CorporationC = "CorporationC",
    Partnership = "Partnership",
    LessThanNilGreaterThan = "<nil>",
}

export type Form1099Correction = {
    address?: Form1099CorrectionAddress | null | undefined;
    companyStructure?: Form1099CorrectionCompanyStructure | null | undefined;
    ein?: string | null | undefined;
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    legalBusinessName?: string | null | undefined;
    ssn?: string | null | undefined;
    totalAmount?: number | null | undefined;
};

/** @internal */
export namespace Form1099CorrectionAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Form1099CorrectionAddress, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Form1099CorrectionAddress> =
        z.object({});
}

/** @internal */
export const Form1099CorrectionCompanyStructure$ = z.nativeEnum(Form1099CorrectionCompanyStructure);

/** @internal */
export namespace Form1099Correction$ {
    export type Inbound = {
        address?: Form1099CorrectionAddress$.Inbound | null | undefined;
        companyStructure?: Form1099CorrectionCompanyStructure | null | undefined;
        ein?: string | null | undefined;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        legalBusinessName?: string | null | undefined;
        ssn?: string | null | undefined;
        totalAmount?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<Form1099Correction, z.ZodTypeDef, Inbound> = z
        .object({
            address: z
                .lazy(() => Form1099CorrectionAddress$.inboundSchema)
                .nullable()
                .optional(),
            companyStructure: Form1099CorrectionCompanyStructure$.nullable().optional(),
            ein: z.string().nullable().optional(),
            firstName: z.string().nullable().optional(),
            lastName: z.string().nullable().optional(),
            legalBusinessName: z.string().nullable().optional(),
            ssn: z.string().nullable().optional(),
            totalAmount: z.number().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.companyStructure === undefined
                    ? null
                    : { companyStructure: v.companyStructure }),
                ...(v.ein === undefined ? null : { ein: v.ein }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.legalBusinessName === undefined
                    ? null
                    : { legalBusinessName: v.legalBusinessName }),
                ...(v.ssn === undefined ? null : { ssn: v.ssn }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });

    export type Outbound = {
        address?: Form1099CorrectionAddress$.Outbound | null | undefined;
        companyStructure?: Form1099CorrectionCompanyStructure | null | undefined;
        ein?: string | null | undefined;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        legalBusinessName?: string | null | undefined;
        ssn?: string | null | undefined;
        totalAmount?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Form1099Correction> = z
        .object({
            address: z
                .lazy(() => Form1099CorrectionAddress$.outboundSchema)
                .nullable()
                .optional(),
            companyStructure: Form1099CorrectionCompanyStructure$.nullable().optional(),
            ein: z.string().nullable().optional(),
            firstName: z.string().nullable().optional(),
            lastName: z.string().nullable().optional(),
            legalBusinessName: z.string().nullable().optional(),
            ssn: z.string().nullable().optional(),
            totalAmount: z.number().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.companyStructure === undefined
                    ? null
                    : { companyStructure: v.companyStructure }),
                ...(v.ein === undefined ? null : { ein: v.ein }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.legalBusinessName === undefined
                    ? null
                    : { legalBusinessName: v.legalBusinessName }),
                ...(v.ssn === undefined ? null : { ssn: v.ssn }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Frequency, Frequency$ } from "./frequency";
import { InvoiceDataCreateRequest, InvoiceDataCreateRequest$ } from "./invoicedatacreaterequest";
import { ScheduleDate, ScheduleDate$ } from "./scheduledate";
import { z } from "zod";

export enum InvoiceTemplateCreateRequestStatus {
    Active = "Active",
    Draft = "Draft",
    Expired = "Expired",
    Cancelled = "Cancelled",
}

export type InvoiceTemplateCreateRequest = {
    dueInDays?: number | null | undefined;
    frequency?: Frequency | null | undefined;
    invoiceData: InvoiceDataCreateRequest;
    isSchedulingOnly?: boolean | null | undefined;
    labels?: Record<string, string> | null | undefined;
    scheduleDates?: Array<ScheduleDate> | null | undefined;
    sendEmails?: boolean | null | undefined;
    status: InvoiceTemplateCreateRequestStatus;
};

/** @internal */
export const InvoiceTemplateCreateRequestStatus$ = z.nativeEnum(InvoiceTemplateCreateRequestStatus);

/** @internal */
export namespace InvoiceTemplateCreateRequest$ {
    export type Inbound = {
        dueInDays?: number | null | undefined;
        frequency?: Frequency$.Inbound | null | undefined;
        invoiceData: InvoiceDataCreateRequest$.Inbound;
        isSchedulingOnly?: boolean | null | undefined;
        labels?: Record<string, string> | null | undefined;
        scheduleDates?: Array<ScheduleDate$.Inbound> | null | undefined;
        sendEmails?: boolean | null | undefined;
        status: InvoiceTemplateCreateRequestStatus;
    };

    export const inboundSchema: z.ZodType<InvoiceTemplateCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            dueInDays: z.number().nullable().optional(),
            frequency: Frequency$.inboundSchema.nullable().optional(),
            invoiceData: InvoiceDataCreateRequest$.inboundSchema,
            isSchedulingOnly: z.boolean().nullable().optional(),
            labels: z.record(z.string()).nullable().optional(),
            scheduleDates: z.array(ScheduleDate$.inboundSchema).nullable().optional(),
            sendEmails: z.boolean().nullable().optional(),
            status: InvoiceTemplateCreateRequestStatus$,
        })
        .transform((v) => {
            return {
                ...(v.dueInDays === undefined ? null : { dueInDays: v.dueInDays }),
                ...(v.frequency === undefined ? null : { frequency: v.frequency }),
                invoiceData: v.invoiceData,
                ...(v.isSchedulingOnly === undefined
                    ? null
                    : { isSchedulingOnly: v.isSchedulingOnly }),
                ...(v.labels === undefined ? null : { labels: v.labels }),
                ...(v.scheduleDates === undefined ? null : { scheduleDates: v.scheduleDates }),
                ...(v.sendEmails === undefined ? null : { sendEmails: v.sendEmails }),
                status: v.status,
            };
        });

    export type Outbound = {
        dueInDays?: number | null | undefined;
        frequency?: Frequency$.Outbound | null | undefined;
        invoiceData: InvoiceDataCreateRequest$.Outbound;
        isSchedulingOnly?: boolean | null | undefined;
        labels?: Record<string, string> | null | undefined;
        scheduleDates?: Array<ScheduleDate$.Outbound> | null | undefined;
        sendEmails?: boolean | null | undefined;
        status: InvoiceTemplateCreateRequestStatus;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceTemplateCreateRequest> = z
        .object({
            dueInDays: z.number().nullable().optional(),
            frequency: Frequency$.outboundSchema.nullable().optional(),
            invoiceData: InvoiceDataCreateRequest$.outboundSchema,
            isSchedulingOnly: z.boolean().nullable().optional(),
            labels: z.record(z.string()).nullable().optional(),
            scheduleDates: z.array(ScheduleDate$.outboundSchema).nullable().optional(),
            sendEmails: z.boolean().nullable().optional(),
            status: InvoiceTemplateCreateRequestStatus$,
        })
        .transform((v) => {
            return {
                ...(v.dueInDays === undefined ? null : { dueInDays: v.dueInDays }),
                ...(v.frequency === undefined ? null : { frequency: v.frequency }),
                invoiceData: v.invoiceData,
                ...(v.isSchedulingOnly === undefined
                    ? null
                    : { isSchedulingOnly: v.isSchedulingOnly }),
                ...(v.labels === undefined ? null : { labels: v.labels }),
                ...(v.scheduleDates === undefined ? null : { scheduleDates: v.scheduleDates }),
                ...(v.sendEmails === undefined ? null : { sendEmails: v.sendEmails }),
                status: v.status,
            };
        });
}

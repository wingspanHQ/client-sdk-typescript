/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RedactedMember } from "./redactedmember";
import { RedactedUser } from "./redacteduser";
import { ScopeModificationsMap } from "./scopemodificationsmap";
import { UserRoles } from "./userroles";
import { Expose, Type } from "class-transformer";

export enum AuthorizationResponseAllowedAction {
    Read = "Read",
    Write = "Write",
    LessThanNilGreaterThan = "<nil>",
}

export class AuthorizationResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "allowedAction" })
    allowedAction?: AuthorizationResponseAllowedAction;

    @SpeakeasyMetadata()
    @Expose({ name: "allowedScope" })
    allowedScope?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "allowedScopeGroupId" })
    allowedScopeGroupId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "authorizationId" })
    authorizationId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt: string;

    @SpeakeasyMetadata()
    @Expose({ name: "eventActors" })
    eventActors: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "labels" })
    labels: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "principalMember" })
    @Type(() => RedactedMember)
    principalMember: RedactedMember;

    @SpeakeasyMetadata()
    @Expose({ name: "principalUser" })
    @Type(() => RedactedUser)
    principalUser: RedactedUser;

    @SpeakeasyMetadata()
    @Expose({ name: "requestingMember" })
    @Type(() => RedactedMember)
    requestingMember: RedactedMember;

    @SpeakeasyMetadata()
    @Expose({ name: "requestingUser" })
    @Type(() => RedactedUser)
    requestingUser: RedactedUser;

    @SpeakeasyMetadata()
    @Expose({ name: "requestingUserId" })
    requestingUserId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "scopeModifications" })
    @Type(() => ScopeModificationsMap)
    scopeModifications?: ScopeModificationsMap;

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    updatedAt: string;

    @SpeakeasyMetadata()
    @Expose({ name: "userId" })
    userId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "userRoles" })
    @Type(() => UserRoles)
    userRoles: UserRoles;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetUsersUserEmailEmailRequest = {
    /**
     * Email Address
     */
    email: string;
};

export type GetUsersUserEmailEmailResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A newuser object
     */
    userByEmailResponse?: shared.UserByEmailResponse | undefined;
};

/** @internal */
export namespace GetUsersUserEmailEmailRequest$ {
    export type Inbound = {
        email: string;
    };

    export const inboundSchema: z.ZodType<GetUsersUserEmailEmailRequest, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
            };
        });

    export type Outbound = {
        email: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUsersUserEmailEmailRequest> =
        z
            .object({
                email: z.string(),
            })
            .transform((v) => {
                return {
                    email: v.email,
                };
            });
}

/** @internal */
export namespace GetUsersUserEmailEmailResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        UserByEmailResponse?: shared.UserByEmailResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetUsersUserEmailEmailResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            UserByEmailResponse: shared.UserByEmailResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.UserByEmailResponse === undefined
                    ? null
                    : { userByEmailResponse: v.UserByEmailResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        UserByEmailResponse?: shared.UserByEmailResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUsersUserEmailEmailResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                userByEmailResponse: shared.UserByEmailResponse$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.userByEmailResponse === undefined
                        ? null
                        : { UserByEmailResponse: v.userByEmailResponse }),
                };
            });
}

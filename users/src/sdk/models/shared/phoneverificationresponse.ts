/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SessionResponse, SessionResponse$ } from "./sessionresponse";
import * as z from "zod";

export enum PhoneVerificationResponseStatus {
    Pending = "Pending",
    Verified = "Verified",
}

export type PhoneVerificationResponse = {
    phone: string;
    session: SessionResponse;
    status: PhoneVerificationResponseStatus;
    userId: string;
};

/** @internal */
export const PhoneVerificationResponseStatus$ = z.nativeEnum(PhoneVerificationResponseStatus);

/** @internal */
export namespace PhoneVerificationResponse$ {
    export type Inbound = {
        phone: string;
        session: SessionResponse$.Inbound;
        status: PhoneVerificationResponseStatus;
        userId: string;
    };

    export const inboundSchema: z.ZodType<PhoneVerificationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string(),
            session: SessionResponse$.inboundSchema,
            status: PhoneVerificationResponseStatus$,
            userId: z.string(),
        })
        .transform((v) => {
            return {
                phone: v.phone,
                session: v.session,
                status: v.status,
                userId: v.userId,
            };
        });

    export type Outbound = {
        phone: string;
        session: SessionResponse$.Outbound;
        status: PhoneVerificationResponseStatus;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PhoneVerificationResponse> = z
        .object({
            phone: z.string(),
            session: SessionResponse$.outboundSchema,
            status: PhoneVerificationResponseStatus$,
            userId: z.string(),
        })
        .transform((v) => {
            return {
                phone: v.phone,
                session: v.session,
                status: v.status,
                userId: v.userId,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EligibilityRequirement, EligibilityRequirement$ } from "./eligibilityrequirement";
import { z } from "zod";

export type CollaboratorGroupResponse = {
    clientId: string;
    collaboratorGroupId: string;
    collaboratorSettings?: Record<string, string> | null | undefined;
    defaultGroup: boolean;
    description: string;
    eligibilityRequirements?: Array<EligibilityRequirement> | null | undefined;
    name: string;
};

/** @internal */
export namespace CollaboratorGroupResponse$ {
    export type Inbound = {
        clientId: string;
        collaboratorGroupId: string;
        collaboratorSettings?: Record<string, string> | null | undefined;
        defaultGroup: boolean;
        description: string;
        eligibilityRequirements?: Array<EligibilityRequirement$.Inbound> | null | undefined;
        name: string;
    };

    export const inboundSchema: z.ZodType<CollaboratorGroupResponse, z.ZodTypeDef, Inbound> = z
        .object({
            clientId: z.string(),
            collaboratorGroupId: z.string(),
            collaboratorSettings: z.nullable(z.record(z.string())).optional(),
            defaultGroup: z.boolean(),
            description: z.string(),
            eligibilityRequirements: z
                .nullable(z.array(EligibilityRequirement$.inboundSchema))
                .optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                collaboratorGroupId: v.collaboratorGroupId,
                ...(v.collaboratorSettings === undefined
                    ? null
                    : { collaboratorSettings: v.collaboratorSettings }),
                defaultGroup: v.defaultGroup,
                description: v.description,
                ...(v.eligibilityRequirements === undefined
                    ? null
                    : { eligibilityRequirements: v.eligibilityRequirements }),
                name: v.name,
            };
        });

    export type Outbound = {
        clientId: string;
        collaboratorGroupId: string;
        collaboratorSettings?: Record<string, string> | null | undefined;
        defaultGroup: boolean;
        description: string;
        eligibilityRequirements?: Array<EligibilityRequirement$.Outbound> | null | undefined;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CollaboratorGroupResponse> = z
        .object({
            clientId: z.string(),
            collaboratorGroupId: z.string(),
            collaboratorSettings: z.nullable(z.record(z.string())).optional(),
            defaultGroup: z.boolean(),
            description: z.string(),
            eligibilityRequirements: z
                .nullable(z.array(EligibilityRequirement$.outboundSchema))
                .optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                collaboratorGroupId: v.collaboratorGroupId,
                ...(v.collaboratorSettings === undefined
                    ? null
                    : { collaboratorSettings: v.collaboratorSettings }),
                defaultGroup: v.defaultGroup,
                description: v.description,
                ...(v.eligibilityRequirements === undefined
                    ? null
                    : { eligibilityRequirements: v.eligibilityRequirements }),
                name: v.name,
            };
        });
}

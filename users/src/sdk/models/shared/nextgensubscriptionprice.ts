/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SkuId, SkuId$ } from "./skuid";
import * as z from "zod";

export type NextgenSubscriptionPrice = {
    amount: number;
    skuId: SkuId;
    skuQuantity?: number | null | undefined;
};

/** @internal */
export namespace NextgenSubscriptionPrice$ {
    export type Inbound = {
        amount: number;
        skuId: SkuId$.Inbound;
        skuQuantity?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<NextgenSubscriptionPrice, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            skuId: SkuId$.inboundSchema,
            skuQuantity: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                skuId: v.skuId,
                ...(v.skuQuantity === undefined ? null : { skuQuantity: v.skuQuantity }),
            };
        });

    export type Outbound = {
        amount: number;
        skuId: SkuId$.Outbound;
        skuQuantity?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NextgenSubscriptionPrice> = z
        .object({
            amount: z.number(),
            skuId: SkuId$.outboundSchema,
            skuQuantity: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                skuId: v.skuId,
                ...(v.skuQuantity === undefined ? null : { skuQuantity: v.skuQuantity }),
            };
        });
}

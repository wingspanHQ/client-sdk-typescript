/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EligibilityRequirement,
  EligibilityRequirement$inboundSchema,
  EligibilityRequirement$Outbound,
  EligibilityRequirement$outboundSchema,
} from "./eligibilityrequirement.js";

export type CollaboratorGroupResponse = {
  clientId: string;
  collaboratorGroupId: string;
  collaboratorSettings?: { [k: string]: string } | null | undefined;
  defaultGroup: boolean;
  description: string;
  eligibilityRequirements?: Array<EligibilityRequirement> | null | undefined;
  name: string;
};

/** @internal */
export const CollaboratorGroupResponse$inboundSchema: z.ZodType<
  CollaboratorGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  collaboratorGroupId: z.string(),
  collaboratorSettings: z.nullable(z.record(z.string())).optional(),
  defaultGroup: z.boolean(),
  description: z.string(),
  eligibilityRequirements: z.nullable(
    z.array(EligibilityRequirement$inboundSchema),
  ).optional(),
  name: z.string(),
});

/** @internal */
export type CollaboratorGroupResponse$Outbound = {
  clientId: string;
  collaboratorGroupId: string;
  collaboratorSettings?: { [k: string]: string } | null | undefined;
  defaultGroup: boolean;
  description: string;
  eligibilityRequirements?:
    | Array<EligibilityRequirement$Outbound>
    | null
    | undefined;
  name: string;
};

/** @internal */
export const CollaboratorGroupResponse$outboundSchema: z.ZodType<
  CollaboratorGroupResponse$Outbound,
  z.ZodTypeDef,
  CollaboratorGroupResponse
> = z.object({
  clientId: z.string(),
  collaboratorGroupId: z.string(),
  collaboratorSettings: z.nullable(z.record(z.string())).optional(),
  defaultGroup: z.boolean(),
  description: z.string(),
  eligibilityRequirements: z.nullable(
    z.array(EligibilityRequirement$outboundSchema),
  ).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollaboratorGroupResponse$ {
  /** @deprecated use `CollaboratorGroupResponse$inboundSchema` instead. */
  export const inboundSchema = CollaboratorGroupResponse$inboundSchema;
  /** @deprecated use `CollaboratorGroupResponse$outboundSchema` instead. */
  export const outboundSchema = CollaboratorGroupResponse$outboundSchema;
  /** @deprecated use `CollaboratorGroupResponse$Outbound` instead. */
  export type Outbound = CollaboratorGroupResponse$Outbound;
}

export function collaboratorGroupResponseToJSON(
  collaboratorGroupResponse: CollaboratorGroupResponse,
): string {
  return JSON.stringify(
    CollaboratorGroupResponse$outboundSchema.parse(collaboratorGroupResponse),
  );
}

export function collaboratorGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<CollaboratorGroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollaboratorGroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollaboratorGroupResponse' from JSON`,
  );
}

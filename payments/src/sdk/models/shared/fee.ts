/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Fee = {
  amount: number;
  calculatedAt?: string | null | undefined;
};

/** @internal */
export const Fee$inboundSchema: z.ZodType<Fee, z.ZodTypeDef, unknown> = z
  .object({
    amount: z.number(),
    calculatedAt: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Fee$Outbound = {
  amount: number;
  calculatedAt?: string | null | undefined;
};

/** @internal */
export const Fee$outboundSchema: z.ZodType<Fee$Outbound, z.ZodTypeDef, Fee> = z
  .object({
    amount: z.number(),
    calculatedAt: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fee$ {
  /** @deprecated use `Fee$inboundSchema` instead. */
  export const inboundSchema = Fee$inboundSchema;
  /** @deprecated use `Fee$outboundSchema` instead. */
  export const outboundSchema = Fee$outboundSchema;
  /** @deprecated use `Fee$Outbound` instead. */
  export type Outbound = Fee$Outbound;
}

export function feeToJSON(fee: Fee): string {
  return JSON.stringify(Fee$outboundSchema.parse(fee));
}

export function feeFromJSON(
  jsonString: string,
): SafeParseResult<Fee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fee' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetClientDeductionRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetClientDeductionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A deduction
   */
  deductionResponse?: shared.DeductionResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetClientDeductionRequest$inboundSchema: z.ZodType<
  GetClientDeductionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetClientDeductionRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetClientDeductionRequest$outboundSchema: z.ZodType<
  GetClientDeductionRequest$Outbound,
  z.ZodTypeDef,
  GetClientDeductionRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientDeductionRequest$ {
  /** @deprecated use `GetClientDeductionRequest$inboundSchema` instead. */
  export const inboundSchema = GetClientDeductionRequest$inboundSchema;
  /** @deprecated use `GetClientDeductionRequest$outboundSchema` instead. */
  export const outboundSchema = GetClientDeductionRequest$outboundSchema;
  /** @deprecated use `GetClientDeductionRequest$Outbound` instead. */
  export type Outbound = GetClientDeductionRequest$Outbound;
}

export function getClientDeductionRequestToJSON(
  getClientDeductionRequest: GetClientDeductionRequest,
): string {
  return JSON.stringify(
    GetClientDeductionRequest$outboundSchema.parse(getClientDeductionRequest),
  );
}

export function getClientDeductionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClientDeductionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientDeductionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientDeductionRequest' from JSON`,
  );
}

/** @internal */
export const GetClientDeductionResponse$inboundSchema: z.ZodType<
  GetClientDeductionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeductionResponse: shared.DeductionResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "DeductionResponse": "deductionResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetClientDeductionResponse$Outbound = {
  ContentType: string;
  DeductionResponse?: shared.DeductionResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetClientDeductionResponse$outboundSchema: z.ZodType<
  GetClientDeductionResponse$Outbound,
  z.ZodTypeDef,
  GetClientDeductionResponse
> = z.object({
  contentType: z.string(),
  deductionResponse: shared.DeductionResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    deductionResponse: "DeductionResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientDeductionResponse$ {
  /** @deprecated use `GetClientDeductionResponse$inboundSchema` instead. */
  export const inboundSchema = GetClientDeductionResponse$inboundSchema;
  /** @deprecated use `GetClientDeductionResponse$outboundSchema` instead. */
  export const outboundSchema = GetClientDeductionResponse$outboundSchema;
  /** @deprecated use `GetClientDeductionResponse$Outbound` instead. */
  export type Outbound = GetClientDeductionResponse$Outbound;
}

export function getClientDeductionResponseToJSON(
  getClientDeductionResponse: GetClientDeductionResponse,
): string {
  return JSON.stringify(
    GetClientDeductionResponse$outboundSchema.parse(getClientDeductionResponse),
  );
}

export function getClientDeductionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClientDeductionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientDeductionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientDeductionResponse' from JSON`,
  );
}

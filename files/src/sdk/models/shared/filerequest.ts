/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type FileRequest = {
    encoding?: string | null | undefined;
    filename: string;
    hidden?: boolean | null | undefined;
    mimetype?: string | null | undefined;
};

/** @internal */
export namespace FileRequest$ {
    export type Inbound = {
        encoding?: string | null | undefined;
        filename: string;
        hidden?: boolean | null | undefined;
        mimetype?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<FileRequest, z.ZodTypeDef, Inbound> = z
        .object({
            encoding: z.nullable(z.string()).optional(),
            filename: z.string(),
            hidden: z.nullable(z.boolean()).optional(),
            mimetype: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.encoding === undefined ? null : { encoding: v.encoding }),
                filename: v.filename,
                ...(v.hidden === undefined ? null : { hidden: v.hidden }),
                ...(v.mimetype === undefined ? null : { mimetype: v.mimetype }),
            };
        });

    export type Outbound = {
        encoding?: string | null | undefined;
        filename: string;
        hidden?: boolean | null | undefined;
        mimetype?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileRequest> = z
        .object({
            encoding: z.nullable(z.string()).optional(),
            filename: z.string(),
            hidden: z.nullable(z.boolean()).optional(),
            mimetype: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.encoding === undefined ? null : { encoding: v.encoding }),
                filename: v.filename,
                ...(v.hidden === undefined ? null : { hidden: v.hidden }),
                ...(v.mimetype === undefined ? null : { mimetype: v.mimetype }),
            };
        });
}

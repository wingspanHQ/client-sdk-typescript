/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ChargeStatus {
    Zero = "0",
    One = "1",
    Two = "2",
}

export type Charge = {
    amount: number;
    cardLast4: string;
    chargeId: string;
    chargeStatus: ChargeStatus;
    created: string;
};

/** @internal */
export const ChargeStatus$ = z.nativeEnum(ChargeStatus);

/** @internal */
export namespace Charge$ {
    export type Inbound = {
        amount: number;
        cardLast4: string;
        chargeId: string;
        chargeStatus: ChargeStatus;
        created: string;
    };

    export const inboundSchema: z.ZodType<Charge, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            cardLast4: z.string(),
            chargeId: z.string(),
            chargeStatus: ChargeStatus$,
            created: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                cardLast4: v.cardLast4,
                chargeId: v.chargeId,
                chargeStatus: v.chargeStatus,
                created: v.created,
            };
        });

    export type Outbound = {
        amount: number;
        cardLast4: string;
        chargeId: string;
        chargeStatus: ChargeStatus;
        created: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Charge> = z
        .object({
            amount: z.number(),
            cardLast4: z.string(),
            chargeId: z.string(),
            chargeStatus: ChargeStatus$,
            created: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                cardLast4: v.cardLast4,
                chargeId: v.chargeId,
                chargeStatus: v.chargeStatus,
                created: v.created,
            };
        });
}

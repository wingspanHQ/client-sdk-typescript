/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateClientBatchItemRequest = {
  bulkClientItemCreate?: shared.BulkClientItemCreate | undefined;
  /**
   * Unique identifier for a batch
   */
  batchId: string;
};

export type CreateClientBatchItemResponse = {
  /**
   * An item that will be converted into a client
   */
  bulkClientItem?: shared.BulkClientItem | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const CreateClientBatchItemRequest$inboundSchema: z.ZodType<
  CreateClientBatchItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkClientItemCreate: shared.BulkClientItemCreate$inboundSchema.optional(),
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "BulkClientItemCreate": "bulkClientItemCreate",
  });
});

/** @internal */
export type CreateClientBatchItemRequest$Outbound = {
  BulkClientItemCreate?: shared.BulkClientItemCreate$Outbound | undefined;
  batchId: string;
};

/** @internal */
export const CreateClientBatchItemRequest$outboundSchema: z.ZodType<
  CreateClientBatchItemRequest$Outbound,
  z.ZodTypeDef,
  CreateClientBatchItemRequest
> = z.object({
  bulkClientItemCreate: shared.BulkClientItemCreate$outboundSchema.optional(),
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    bulkClientItemCreate: "BulkClientItemCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientBatchItemRequest$ {
  /** @deprecated use `CreateClientBatchItemRequest$inboundSchema` instead. */
  export const inboundSchema = CreateClientBatchItemRequest$inboundSchema;
  /** @deprecated use `CreateClientBatchItemRequest$outboundSchema` instead. */
  export const outboundSchema = CreateClientBatchItemRequest$outboundSchema;
  /** @deprecated use `CreateClientBatchItemRequest$Outbound` instead. */
  export type Outbound = CreateClientBatchItemRequest$Outbound;
}

export function createClientBatchItemRequestToJSON(
  createClientBatchItemRequest: CreateClientBatchItemRequest,
): string {
  return JSON.stringify(
    CreateClientBatchItemRequest$outboundSchema.parse(
      createClientBatchItemRequest,
    ),
  );
}

export function createClientBatchItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientBatchItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientBatchItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientBatchItemRequest' from JSON`,
  );
}

/** @internal */
export const CreateClientBatchItemResponse$inboundSchema: z.ZodType<
  CreateClientBatchItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkClientItem: shared.BulkClientItem$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkClientItem": "bulkClientItem",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CreateClientBatchItemResponse$Outbound = {
  BulkClientItem?: shared.BulkClientItem$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const CreateClientBatchItemResponse$outboundSchema: z.ZodType<
  CreateClientBatchItemResponse$Outbound,
  z.ZodTypeDef,
  CreateClientBatchItemResponse
> = z.object({
  bulkClientItem: shared.BulkClientItem$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkClientItem: "BulkClientItem",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientBatchItemResponse$ {
  /** @deprecated use `CreateClientBatchItemResponse$inboundSchema` instead. */
  export const inboundSchema = CreateClientBatchItemResponse$inboundSchema;
  /** @deprecated use `CreateClientBatchItemResponse$outboundSchema` instead. */
  export const outboundSchema = CreateClientBatchItemResponse$outboundSchema;
  /** @deprecated use `CreateClientBatchItemResponse$Outbound` instead. */
  export type Outbound = CreateClientBatchItemResponse$Outbound;
}

export function createClientBatchItemResponseToJSON(
  createClientBatchItemResponse: CreateClientBatchItemResponse,
): string {
  return JSON.stringify(
    CreateClientBatchItemResponse$outboundSchema.parse(
      createClientBatchItemResponse,
    ),
  );
}

export function createClientBatchItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientBatchItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientBatchItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientBatchItemResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  DocumentEvents,
  DocumentEvents$inboundSchema,
  DocumentEvents$Outbound,
  DocumentEvents$outboundSchema,
} from "./documentevents.js";
import {
  DocumentFiles,
  DocumentFiles$inboundSchema,
  DocumentFiles$Outbound,
  DocumentFiles$outboundSchema,
} from "./documentfiles.js";
import {
  UserRoles,
  UserRoles$inboundSchema,
  UserRoles$Outbound,
  UserRoles$outboundSchema,
} from "./userroles.js";

export const DocumentResponseStatus = {
  Required: "Required",
  Approved: "Approved",
  Invalid: "Invalid",
  ReceivedFront: "ReceivedFront",
  ReceivedBack: "ReceivedBack",
  PendingReview: "PendingReview",
} as const;
export type DocumentResponseStatus = ClosedEnum<typeof DocumentResponseStatus>;

export type DocumentResponse = {
  clientId: string;
  documentId: string;
  events?: DocumentEvents | null | undefined;
  files?: DocumentFiles | null | undefined;
  memberId: string;
  status: DocumentResponseStatus;
  templateId: string;
  title: string;
  userRoles: UserRoles;
};

/** @internal */
export const DocumentResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentResponseStatus
> = z.nativeEnum(DocumentResponseStatus);

/** @internal */
export const DocumentResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentResponseStatus
> = DocumentResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResponseStatus$ {
  /** @deprecated use `DocumentResponseStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentResponseStatus$inboundSchema;
  /** @deprecated use `DocumentResponseStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentResponseStatus$outboundSchema;
}

/** @internal */
export const DocumentResponse$inboundSchema: z.ZodType<
  DocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  documentId: z.string(),
  events: z.nullable(DocumentEvents$inboundSchema).optional(),
  files: z.nullable(DocumentFiles$inboundSchema).optional(),
  memberId: z.string(),
  status: DocumentResponseStatus$inboundSchema,
  templateId: z.string(),
  title: z.string(),
  userRoles: UserRoles$inboundSchema,
});

/** @internal */
export type DocumentResponse$Outbound = {
  clientId: string;
  documentId: string;
  events?: DocumentEvents$Outbound | null | undefined;
  files?: DocumentFiles$Outbound | null | undefined;
  memberId: string;
  status: string;
  templateId: string;
  title: string;
  userRoles: UserRoles$Outbound;
};

/** @internal */
export const DocumentResponse$outboundSchema: z.ZodType<
  DocumentResponse$Outbound,
  z.ZodTypeDef,
  DocumentResponse
> = z.object({
  clientId: z.string(),
  documentId: z.string(),
  events: z.nullable(DocumentEvents$outboundSchema).optional(),
  files: z.nullable(DocumentFiles$outboundSchema).optional(),
  memberId: z.string(),
  status: DocumentResponseStatus$outboundSchema,
  templateId: z.string(),
  title: z.string(),
  userRoles: UserRoles$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResponse$ {
  /** @deprecated use `DocumentResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentResponse$inboundSchema;
  /** @deprecated use `DocumentResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentResponse$outboundSchema;
  /** @deprecated use `DocumentResponse$Outbound` instead. */
  export type Outbound = DocumentResponse$Outbound;
}

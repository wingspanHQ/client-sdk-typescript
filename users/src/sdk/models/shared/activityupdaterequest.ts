/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Context = {};

export type Events = {};

export type ActivityUpdateRequestFlows = {};

export type ActivityUpdateRequest = {
    context?: Context | null | undefined;
    events?: Events | null | undefined;
    flows?: ActivityUpdateRequestFlows | null | undefined;
};

/** @internal */
export namespace Context$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Context, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Context> = z.object({});
}

/** @internal */
export namespace Events$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Events, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Events> = z.object({});
}

/** @internal */
export namespace ActivityUpdateRequestFlows$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<ActivityUpdateRequestFlows, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ActivityUpdateRequestFlows> =
        z.object({});
}

/** @internal */
export namespace ActivityUpdateRequest$ {
    export type Inbound = {
        context?: Context$.Inbound | null | undefined;
        events?: Events$.Inbound | null | undefined;
        flows?: ActivityUpdateRequestFlows$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<ActivityUpdateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            context: z.nullable(z.lazy(() => Context$.inboundSchema)).optional(),
            events: z.nullable(z.lazy(() => Events$.inboundSchema)).optional(),
            flows: z.nullable(z.lazy(() => ActivityUpdateRequestFlows$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.context === undefined ? null : { context: v.context }),
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.flows === undefined ? null : { flows: v.flows }),
            };
        });

    export type Outbound = {
        context?: Context$.Outbound | null | undefined;
        events?: Events$.Outbound | null | undefined;
        flows?: ActivityUpdateRequestFlows$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ActivityUpdateRequest> = z
        .object({
            context: z.nullable(z.lazy(() => Context$.outboundSchema)).optional(),
            events: z.nullable(z.lazy(() => Events$.outboundSchema)).optional(),
            flows: z.nullable(z.lazy(() => ActivityUpdateRequestFlows$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.context === undefined ? null : { context: v.context }),
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.flows === undefined ? null : { flows: v.flows }),
            };
        });
}

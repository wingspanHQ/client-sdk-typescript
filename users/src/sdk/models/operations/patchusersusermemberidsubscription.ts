/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type PatchUsersUserMemberIdSubscriptionRequest = {
    subscriptionUpdateRequest?: shared.SubscriptionUpdateRequest | undefined;
    /**
     * Unique identifier
     */
    id: string;
};

export type PatchUsersUserMemberIdSubscriptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A subscription object
     */
    subscription?: shared.Subscription | undefined;
};

/** @internal */
export namespace PatchUsersUserMemberIdSubscriptionRequest$ {
    export type Inbound = {
        SubscriptionUpdateRequest?: shared.SubscriptionUpdateRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        PatchUsersUserMemberIdSubscriptionRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            SubscriptionUpdateRequest: shared.SubscriptionUpdateRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.SubscriptionUpdateRequest === undefined
                    ? null
                    : { subscriptionUpdateRequest: v.SubscriptionUpdateRequest }),
                id: v.id,
            };
        });

    export type Outbound = {
        SubscriptionUpdateRequest?: shared.SubscriptionUpdateRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchUsersUserMemberIdSubscriptionRequest
    > = z
        .object({
            subscriptionUpdateRequest: shared.SubscriptionUpdateRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.subscriptionUpdateRequest === undefined
                    ? null
                    : { SubscriptionUpdateRequest: v.subscriptionUpdateRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace PatchUsersUserMemberIdSubscriptionResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        Subscription?: shared.Subscription$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchUsersUserMemberIdSubscriptionResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            Subscription: shared.Subscription$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.Subscription === undefined ? null : { subscription: v.Subscription }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        Subscription?: shared.Subscription$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchUsersUserMemberIdSubscriptionResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            subscription: shared.Subscription$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.subscription === undefined ? null : { Subscription: v.subscription }),
            };
        });
}

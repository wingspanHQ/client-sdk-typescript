/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum PreviouslyBilledPackage {
    None = "None",
    Benefits = "Benefits",
    Essentials = "Essentials",
    Professional = "Professional",
    Corporate = "Corporate",
}

export enum PreviouslyBilledPackageTier {
    Basic = "Basic",
    Premium = "Premium",
}

export enum PreviouslyBilledTerm {
    Yearly = "Yearly",
    Monthly = "Monthly",
}

export type PreviouslyBilled = {
    package?: PreviouslyBilledPackage | null | undefined;
    packageTier?: PreviouslyBilledPackageTier | null | undefined;
    term?: PreviouslyBilledTerm | null | undefined;
};

/** @internal */
export const PreviouslyBilledPackage$ = z.nativeEnum(PreviouslyBilledPackage);

/** @internal */
export const PreviouslyBilledPackageTier$ = z.nativeEnum(PreviouslyBilledPackageTier);

/** @internal */
export const PreviouslyBilledTerm$ = z.nativeEnum(PreviouslyBilledTerm);

/** @internal */
export namespace PreviouslyBilled$ {
    export type Inbound = {
        package?: PreviouslyBilledPackage | null | undefined;
        packageTier?: PreviouslyBilledPackageTier | null | undefined;
        term?: PreviouslyBilledTerm | null | undefined;
    };

    export const inboundSchema: z.ZodType<PreviouslyBilled, z.ZodTypeDef, Inbound> = z
        .object({
            package: z.nullable(PreviouslyBilledPackage$).optional(),
            packageTier: z.nullable(PreviouslyBilledPackageTier$).optional(),
            term: z.nullable(PreviouslyBilledTerm$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.package === undefined ? null : { package: v.package }),
                ...(v.packageTier === undefined ? null : { packageTier: v.packageTier }),
                ...(v.term === undefined ? null : { term: v.term }),
            };
        });

    export type Outbound = {
        package?: PreviouslyBilledPackage | null | undefined;
        packageTier?: PreviouslyBilledPackageTier | null | undefined;
        term?: PreviouslyBilledTerm | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviouslyBilled> = z
        .object({
            package: z.nullable(PreviouslyBilledPackage$).optional(),
            packageTier: z.nullable(PreviouslyBilledPackageTier$).optional(),
            term: z.nullable(PreviouslyBilledTerm$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.package === undefined ? null : { package: v.package }),
                ...(v.packageTier === undefined ? null : { packageTier: v.packageTier }),
                ...(v.term === undefined ? null : { term: v.term }),
            };
        });
}

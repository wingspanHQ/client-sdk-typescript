/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum EmailVerificationResponseStatus {
    Pending = "Pending",
    Verified = "Verified",
}

export type EmailVerificationResponse = {
    email: string;
    status: EmailVerificationResponseStatus;
    userId: string;
};

/** @internal */
export const EmailVerificationResponseStatus$ = z.nativeEnum(EmailVerificationResponseStatus);

/** @internal */
export namespace EmailVerificationResponse$ {
    export type Inbound = {
        email: string;
        status: EmailVerificationResponseStatus;
        userId: string;
    };

    export const inboundSchema: z.ZodType<EmailVerificationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            status: EmailVerificationResponseStatus$,
            userId: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
                status: v.status,
                userId: v.userId,
            };
        });

    export type Outbound = {
        email: string;
        status: EmailVerificationResponseStatus;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailVerificationResponse> = z
        .object({
            email: z.string(),
            status: EmailVerificationResponseStatus$,
            userId: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
                status: v.status,
                userId: v.userId,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum FrequencyUpdateInterval {
    Week = "Week",
    Month = "Month",
    LessThanNilGreaterThan = "<nil>",
}

export type FrequencyUpdate = {
    daily?: boolean | null | undefined;
    dayInInterval?: number | null | undefined;
    endDate?: string | null | undefined;
    every?: number | null | undefined;
    interval?: FrequencyUpdateInterval | null | undefined;
    startDate?: string | null | undefined;
    twicePerMonth?: boolean | null | undefined;
};

/** @internal */
export const FrequencyUpdateInterval$ = z.nativeEnum(FrequencyUpdateInterval);

/** @internal */
export namespace FrequencyUpdate$ {
    export type Inbound = {
        daily?: boolean | null | undefined;
        dayInInterval?: number | null | undefined;
        endDate?: string | null | undefined;
        every?: number | null | undefined;
        interval?: FrequencyUpdateInterval | null | undefined;
        startDate?: string | null | undefined;
        twicePerMonth?: boolean | null | undefined;
    };

    export const inboundSchema: z.ZodType<FrequencyUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            daily: z.boolean().nullable().optional(),
            dayInInterval: z.number().nullable().optional(),
            endDate: z.string().nullable().optional(),
            every: z.number().nullable().optional(),
            interval: FrequencyUpdateInterval$.nullable().optional(),
            startDate: z.string().nullable().optional(),
            twicePerMonth: z.boolean().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.daily === undefined ? null : { daily: v.daily }),
                ...(v.dayInInterval === undefined ? null : { dayInInterval: v.dayInInterval }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.every === undefined ? null : { every: v.every }),
                ...(v.interval === undefined ? null : { interval: v.interval }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.twicePerMonth === undefined ? null : { twicePerMonth: v.twicePerMonth }),
            };
        });

    export type Outbound = {
        daily?: boolean | null | undefined;
        dayInInterval?: number | null | undefined;
        endDate?: string | null | undefined;
        every?: number | null | undefined;
        interval?: FrequencyUpdateInterval | null | undefined;
        startDate?: string | null | undefined;
        twicePerMonth?: boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FrequencyUpdate> = z
        .object({
            daily: z.boolean().nullable().optional(),
            dayInInterval: z.number().nullable().optional(),
            endDate: z.string().nullable().optional(),
            every: z.number().nullable().optional(),
            interval: FrequencyUpdateInterval$.nullable().optional(),
            startDate: z.string().nullable().optional(),
            twicePerMonth: z.boolean().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.daily === undefined ? null : { daily: v.daily }),
                ...(v.dayInInterval === undefined ? null : { dayInInterval: v.dayInInterval }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.every === undefined ? null : { every: v.every }),
                ...(v.interval === undefined ? null : { interval: v.interval }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.twicePerMonth === undefined ? null : { twicePerMonth: v.twicePerMonth }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum AuthenticationStrategy {
    Password = "Password",
    SingleSignOn = "SingleSignOn",
}

export type AuthenticationRequestResponse = {
    authenticationStrategy: AuthenticationStrategy;
    authenticationUrl?: string | null | undefined;
};

/** @internal */
export const AuthenticationStrategy$ = z.nativeEnum(AuthenticationStrategy);

/** @internal */
export namespace AuthenticationRequestResponse$ {
    export type Inbound = {
        authenticationStrategy: AuthenticationStrategy;
        authenticationUrl?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<AuthenticationRequestResponse, z.ZodTypeDef, Inbound> = z
        .object({
            authenticationStrategy: AuthenticationStrategy$,
            authenticationUrl: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                authenticationStrategy: v.authenticationStrategy,
                ...(v.authenticationUrl === undefined
                    ? null
                    : { authenticationUrl: v.authenticationUrl }),
            };
        });

    export type Outbound = {
        authenticationStrategy: AuthenticationStrategy;
        authenticationUrl?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthenticationRequestResponse> =
        z
            .object({
                authenticationStrategy: AuthenticationStrategy$,
                authenticationUrl: z.nullable(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    authenticationStrategy: v.authenticationStrategy,
                    ...(v.authenticationUrl === undefined
                        ? null
                        : { authenticationUrl: v.authenticationUrl }),
                };
            });
}

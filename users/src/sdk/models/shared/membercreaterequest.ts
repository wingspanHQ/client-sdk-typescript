/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MemberProfileWrite, MemberProfileWrite$ } from "./memberprofilewrite";
import * as z from "zod";

export type MemberCreateRequest = {
    profile?: MemberProfileWrite | null | undefined;
    userId: string;
};

/** @internal */
export namespace MemberCreateRequest$ {
    export type Inbound = {
        profile?: MemberProfileWrite$.Inbound | null | undefined;
        userId: string;
    };

    export const inboundSchema: z.ZodType<MemberCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            profile: z.nullable(MemberProfileWrite$.inboundSchema).optional(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.profile === undefined ? null : { profile: v.profile }),
                userId: v.userId,
            };
        });

    export type Outbound = {
        profile?: MemberProfileWrite$.Outbound | null | undefined;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MemberCreateRequest> = z
        .object({
            profile: z.nullable(MemberProfileWrite$.outboundSchema).optional(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.profile === undefined ? null : { profile: v.profile }),
                userId: v.userId,
            };
        });
}

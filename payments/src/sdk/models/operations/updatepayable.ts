/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type UpdatePayableRequest = {
  payableUpdateRequest?: shared.PayableUpdateRequest | undefined;
  /**
   * Unique identifier
   */
  id: string;
};

export type UpdatePayableResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A payable
   */
  payableSchema?: shared.PayableSchema | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdatePayableRequest$inboundSchema: z.ZodType<
  UpdatePayableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PayableUpdateRequest: shared.PayableUpdateRequest$inboundSchema.optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "PayableUpdateRequest": "payableUpdateRequest",
  });
});

/** @internal */
export type UpdatePayableRequest$Outbound = {
  PayableUpdateRequest?: shared.PayableUpdateRequest$Outbound | undefined;
  id: string;
};

/** @internal */
export const UpdatePayableRequest$outboundSchema: z.ZodType<
  UpdatePayableRequest$Outbound,
  z.ZodTypeDef,
  UpdatePayableRequest
> = z.object({
  payableUpdateRequest: shared.PayableUpdateRequest$outboundSchema.optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    payableUpdateRequest: "PayableUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePayableRequest$ {
  /** @deprecated use `UpdatePayableRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePayableRequest$inboundSchema;
  /** @deprecated use `UpdatePayableRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePayableRequest$outboundSchema;
  /** @deprecated use `UpdatePayableRequest$Outbound` instead. */
  export type Outbound = UpdatePayableRequest$Outbound;
}

/** @internal */
export const UpdatePayableResponse$inboundSchema: z.ZodType<
  UpdatePayableResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PayableSchema: shared.PayableSchema$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "PayableSchema": "payableSchema",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdatePayableResponse$Outbound = {
  ContentType: string;
  PayableSchema?: shared.PayableSchema$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdatePayableResponse$outboundSchema: z.ZodType<
  UpdatePayableResponse$Outbound,
  z.ZodTypeDef,
  UpdatePayableResponse
> = z.object({
  contentType: z.string(),
  payableSchema: shared.PayableSchema$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    payableSchema: "PayableSchema",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePayableResponse$ {
  /** @deprecated use `UpdatePayableResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePayableResponse$inboundSchema;
  /** @deprecated use `UpdatePayableResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePayableResponse$outboundSchema;
  /** @deprecated use `UpdatePayableResponse$Outbound` instead. */
  export type Outbound = UpdatePayableResponse$Outbound;
}

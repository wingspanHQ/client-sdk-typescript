/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b,
  Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b$inboundSchema,
  Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b$Outbound,
  Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b$outboundSchema,
} from "./facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b.js";
import {
  InvoiceIntegrations,
  InvoiceIntegrations$inboundSchema,
  InvoiceIntegrations$Outbound,
  InvoiceIntegrations$outboundSchema,
} from "./invoiceintegrations.js";

export type PayrollReportLineItem = {
  amount?: number | null | undefined;
  costPerUnit: number;
  createdAt: string;
  description?: string | null | undefined;
  detail?: string | null | undefined;
  discount?:
    | Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b
    | null
    | undefined;
  discountTotal?: number | null | undefined;
  index: number;
  integration?: InvoiceIntegrations | null | undefined;
  labels: { [k: string]: string };
  labelsBak2: { [k: string]: string };
  quantity: number;
  reimbursableExpense: boolean;
  totalCost: number;
  unit: string;
  updatedAt: string;
};

/** @internal */
export const PayrollReportLineItem$inboundSchema: z.ZodType<
  PayrollReportLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.nullable(z.number()).optional(),
  costPerUnit: z.number(),
  createdAt: z.string(),
  description: z.nullable(z.string()).optional(),
  detail: z.nullable(z.string()).optional(),
  discount: z.nullable(
    Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b$inboundSchema,
  ).optional(),
  discountTotal: z.nullable(z.number()).optional(),
  index: z.number(),
  integration: z.nullable(InvoiceIntegrations$inboundSchema).optional(),
  labels: z.record(z.string()),
  labelsBak2: z.record(z.string()),
  quantity: z.number(),
  reimbursableExpense: z.boolean(),
  totalCost: z.number(),
  unit: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type PayrollReportLineItem$Outbound = {
  amount?: number | null | undefined;
  costPerUnit: number;
  createdAt: string;
  description?: string | null | undefined;
  detail?: string | null | undefined;
  discount?:
    | Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b$Outbound
    | null
    | undefined;
  discountTotal?: number | null | undefined;
  index: number;
  integration?: InvoiceIntegrations$Outbound | null | undefined;
  labels: { [k: string]: string };
  labelsBak2: { [k: string]: string };
  quantity: number;
  reimbursableExpense: boolean;
  totalCost: number;
  unit: string;
  updatedAt: string;
};

/** @internal */
export const PayrollReportLineItem$outboundSchema: z.ZodType<
  PayrollReportLineItem$Outbound,
  z.ZodTypeDef,
  PayrollReportLineItem
> = z.object({
  amount: z.nullable(z.number()).optional(),
  costPerUnit: z.number(),
  createdAt: z.string(),
  description: z.nullable(z.string()).optional(),
  detail: z.nullable(z.string()).optional(),
  discount: z.nullable(
    Facb8048736dba546c4c76242d9f8c7111011a7a7483528f37d80226698a1f2b$outboundSchema,
  ).optional(),
  discountTotal: z.nullable(z.number()).optional(),
  index: z.number(),
  integration: z.nullable(InvoiceIntegrations$outboundSchema).optional(),
  labels: z.record(z.string()),
  labelsBak2: z.record(z.string()),
  quantity: z.number(),
  reimbursableExpense: z.boolean(),
  totalCost: z.number(),
  unit: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollReportLineItem$ {
  /** @deprecated use `PayrollReportLineItem$inboundSchema` instead. */
  export const inboundSchema = PayrollReportLineItem$inboundSchema;
  /** @deprecated use `PayrollReportLineItem$outboundSchema` instead. */
  export const outboundSchema = PayrollReportLineItem$outboundSchema;
  /** @deprecated use `PayrollReportLineItem$Outbound` instead. */
  export type Outbound = PayrollReportLineItem$Outbound;
}

export function payrollReportLineItemToJSON(
  payrollReportLineItem: PayrollReportLineItem,
): string {
  return JSON.stringify(
    PayrollReportLineItem$outboundSchema.parse(payrollReportLineItem),
  );
}

export function payrollReportLineItemFromJSON(
  jsonString: string,
): SafeParseResult<PayrollReportLineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollReportLineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollReportLineItem' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type PostUsersAccountAccountIdVerifyRequest = {
    accountVerifyRequest?: shared.AccountVerifyRequest | undefined;
    /**
     * Account Id
     */
    accountId: string;
};

export type PostUsersAccountAccountIdVerifyResponse = {
    /**
     * A member's bank account
     */
    account?: shared.Account | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostUsersAccountAccountIdVerifyRequest$ {
    export type Inbound = {
        AccountVerifyRequest?: shared.AccountVerifyRequest$.Inbound | undefined;
        accountId: string;
    };

    export const inboundSchema: z.ZodType<
        PostUsersAccountAccountIdVerifyRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            AccountVerifyRequest: shared.AccountVerifyRequest$.inboundSchema.optional(),
            accountId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.AccountVerifyRequest === undefined
                    ? null
                    : { accountVerifyRequest: v.AccountVerifyRequest }),
                accountId: v.accountId,
            };
        });

    export type Outbound = {
        AccountVerifyRequest?: shared.AccountVerifyRequest$.Outbound | undefined;
        accountId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostUsersAccountAccountIdVerifyRequest
    > = z
        .object({
            accountVerifyRequest: shared.AccountVerifyRequest$.outboundSchema.optional(),
            accountId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.accountVerifyRequest === undefined
                    ? null
                    : { AccountVerifyRequest: v.accountVerifyRequest }),
                accountId: v.accountId,
            };
        });
}

/** @internal */
export namespace PostUsersAccountAccountIdVerifyResponse$ {
    export type Inbound = {
        Account?: shared.Account$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostUsersAccountAccountIdVerifyResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            Account: shared.Account$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.Account === undefined ? null : { account: v.Account }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        Account?: shared.Account$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostUsersAccountAccountIdVerifyResponse
    > = z
        .object({
            account: shared.Account$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.account === undefined ? null : { Account: v.account }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

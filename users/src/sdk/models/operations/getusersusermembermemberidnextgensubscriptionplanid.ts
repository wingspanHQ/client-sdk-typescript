/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

export type GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdRequest = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * member ident
     */
    memberId: string;
};

export type GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * A Nextgen Subscription Plan
     */
    nextgenSubscriptionPlan?: shared.NextgenSubscriptionPlan | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdRequest$ {
    export type Inbound = {
        id: string;
        memberId: string;
    };

    export const inboundSchema: z.ZodType<
        GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string(),
            memberId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                memberId: v.memberId,
            };
        });

    export type Outbound = {
        id: string;
        memberId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdRequest
    > = z
        .object({
            id: z.string(),
            memberId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                memberId: v.memberId,
            };
        });
}

/** @internal */
export namespace GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdResponse$ {
    export type Inbound = {
        ContentType: string;
        NextgenSubscriptionPlan?: shared.NextgenSubscriptionPlan$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            NextgenSubscriptionPlan: shared.NextgenSubscriptionPlan$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.NextgenSubscriptionPlan === undefined
                    ? null
                    : { nextgenSubscriptionPlan: v.NextgenSubscriptionPlan }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        NextgenSubscriptionPlan?: shared.NextgenSubscriptionPlan$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdResponse
    > = z
        .object({
            contentType: z.string(),
            nextgenSubscriptionPlan: shared.NextgenSubscriptionPlan$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.nextgenSubscriptionPlan === undefined
                    ? null
                    : { NextgenSubscriptionPlan: v.nextgenSubscriptionPlan }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetPayableRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetPayableResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A payable
   */
  payableSchema?: shared.PayableSchema | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetPayableRequest$inboundSchema: z.ZodType<
  GetPayableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetPayableRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetPayableRequest$outboundSchema: z.ZodType<
  GetPayableRequest$Outbound,
  z.ZodTypeDef,
  GetPayableRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPayableRequest$ {
  /** @deprecated use `GetPayableRequest$inboundSchema` instead. */
  export const inboundSchema = GetPayableRequest$inboundSchema;
  /** @deprecated use `GetPayableRequest$outboundSchema` instead. */
  export const outboundSchema = GetPayableRequest$outboundSchema;
  /** @deprecated use `GetPayableRequest$Outbound` instead. */
  export type Outbound = GetPayableRequest$Outbound;
}

export function getPayableRequestToJSON(
  getPayableRequest: GetPayableRequest,
): string {
  return JSON.stringify(
    GetPayableRequest$outboundSchema.parse(getPayableRequest),
  );
}

export function getPayableRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPayableRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPayableRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPayableRequest' from JSON`,
  );
}

/** @internal */
export const GetPayableResponse$inboundSchema: z.ZodType<
  GetPayableResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PayableSchema: shared.PayableSchema$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "PayableSchema": "payableSchema",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetPayableResponse$Outbound = {
  ContentType: string;
  PayableSchema?: shared.PayableSchema$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetPayableResponse$outboundSchema: z.ZodType<
  GetPayableResponse$Outbound,
  z.ZodTypeDef,
  GetPayableResponse
> = z.object({
  contentType: z.string(),
  payableSchema: shared.PayableSchema$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    payableSchema: "PayableSchema",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPayableResponse$ {
  /** @deprecated use `GetPayableResponse$inboundSchema` instead. */
  export const inboundSchema = GetPayableResponse$inboundSchema;
  /** @deprecated use `GetPayableResponse$outboundSchema` instead. */
  export const outboundSchema = GetPayableResponse$outboundSchema;
  /** @deprecated use `GetPayableResponse$Outbound` instead. */
  export type Outbound = GetPayableResponse$Outbound;
}

export function getPayableResponseToJSON(
  getPayableResponse: GetPayableResponse,
): string {
  return JSON.stringify(
    GetPayableResponse$outboundSchema.parse(getPayableResponse),
  );
}

export function getPayableResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPayableResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPayableResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPayableResponse' from JSON`,
  );
}

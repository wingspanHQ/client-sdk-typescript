/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExternalIdsQuickbooksData = {
  doCreate?: boolean | null | undefined;
  doDelete?: boolean | null | undefined;
  doUpdate?: boolean | null | undefined;
  id: string;
  syncToken: string;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const ExternalIdsQuickbooksData$inboundSchema: z.ZodType<
  ExternalIdsQuickbooksData,
  z.ZodTypeDef,
  unknown
> = z.object({
  doCreate: z.nullable(z.boolean()).optional(),
  doDelete: z.nullable(z.boolean()).optional(),
  doUpdate: z.nullable(z.boolean()).optional(),
  id: z.string(),
  syncToken: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExternalIdsQuickbooksData$Outbound = {
  doCreate?: boolean | null | undefined;
  doDelete?: boolean | null | undefined;
  doUpdate?: boolean | null | undefined;
  id: string;
  syncToken: string;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const ExternalIdsQuickbooksData$outboundSchema: z.ZodType<
  ExternalIdsQuickbooksData$Outbound,
  z.ZodTypeDef,
  ExternalIdsQuickbooksData
> = z.object({
  doCreate: z.nullable(z.boolean()).optional(),
  doDelete: z.nullable(z.boolean()).optional(),
  doUpdate: z.nullable(z.boolean()).optional(),
  id: z.string(),
  syncToken: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalIdsQuickbooksData$ {
  /** @deprecated use `ExternalIdsQuickbooksData$inboundSchema` instead. */
  export const inboundSchema = ExternalIdsQuickbooksData$inboundSchema;
  /** @deprecated use `ExternalIdsQuickbooksData$outboundSchema` instead. */
  export const outboundSchema = ExternalIdsQuickbooksData$outboundSchema;
  /** @deprecated use `ExternalIdsQuickbooksData$Outbound` instead. */
  export type Outbound = ExternalIdsQuickbooksData$Outbound;
}

export function externalIdsQuickbooksDataToJSON(
  externalIdsQuickbooksData: ExternalIdsQuickbooksData,
): string {
  return JSON.stringify(
    ExternalIdsQuickbooksData$outboundSchema.parse(externalIdsQuickbooksData),
  );
}

export function externalIdsQuickbooksDataFromJSON(
  jsonString: string,
): SafeParseResult<ExternalIdsQuickbooksData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalIdsQuickbooksData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalIdsQuickbooksData' from JSON`,
  );
}

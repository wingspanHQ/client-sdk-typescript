/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

export const CardDetailsStatus = {
  Active: "Active",
  Inactive: "Inactive",
  Stolen: "Stolen",
  Lost: "Lost",
  Frozen: "Frozen",
  ClosedByCustomer: "ClosedByCustomer",
  SuspectedFraud: "SuspectedFraud",
} as const;
export type CardDetailsStatus = ClosedEnum<typeof CardDetailsStatus>;

export const CardDetailsType = {
  IndividualDebitCard: "individualDebitCard",
  BusinessDebitCard: "businessDebitCard",
  IndividualVirtualDebitCard: "individualVirtualDebitCard",
  BusinessVirtualDebitCard: "businessVirtualDebitCard",
} as const;
export type CardDetailsType = ClosedEnum<typeof CardDetailsType>;

export type CardDetails = {
  address: Address;
  brand: string;
  createdAt: string;
  expirationDate: string;
  last4Digits: string;
  name: string;
  pinSet?: boolean | null | undefined;
  status: CardDetailsStatus;
  type: CardDetailsType;
};

/** @internal */
export const CardDetailsStatus$inboundSchema: z.ZodNativeEnum<
  typeof CardDetailsStatus
> = z.nativeEnum(CardDetailsStatus);

/** @internal */
export const CardDetailsStatus$outboundSchema: z.ZodNativeEnum<
  typeof CardDetailsStatus
> = CardDetailsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardDetailsStatus$ {
  /** @deprecated use `CardDetailsStatus$inboundSchema` instead. */
  export const inboundSchema = CardDetailsStatus$inboundSchema;
  /** @deprecated use `CardDetailsStatus$outboundSchema` instead. */
  export const outboundSchema = CardDetailsStatus$outboundSchema;
}

/** @internal */
export const CardDetailsType$inboundSchema: z.ZodNativeEnum<
  typeof CardDetailsType
> = z.nativeEnum(CardDetailsType);

/** @internal */
export const CardDetailsType$outboundSchema: z.ZodNativeEnum<
  typeof CardDetailsType
> = CardDetailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardDetailsType$ {
  /** @deprecated use `CardDetailsType$inboundSchema` instead. */
  export const inboundSchema = CardDetailsType$inboundSchema;
  /** @deprecated use `CardDetailsType$outboundSchema` instead. */
  export const outboundSchema = CardDetailsType$outboundSchema;
}

/** @internal */
export const CardDetails$inboundSchema: z.ZodType<
  CardDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: Address$inboundSchema,
  brand: z.string(),
  createdAt: z.string(),
  expirationDate: z.string(),
  last4Digits: z.string(),
  name: z.string(),
  pinSet: z.nullable(z.boolean()).optional(),
  status: CardDetailsStatus$inboundSchema,
  type: CardDetailsType$inboundSchema,
});

/** @internal */
export type CardDetails$Outbound = {
  address: Address$Outbound;
  brand: string;
  createdAt: string;
  expirationDate: string;
  last4Digits: string;
  name: string;
  pinSet?: boolean | null | undefined;
  status: string;
  type: string;
};

/** @internal */
export const CardDetails$outboundSchema: z.ZodType<
  CardDetails$Outbound,
  z.ZodTypeDef,
  CardDetails
> = z.object({
  address: Address$outboundSchema,
  brand: z.string(),
  createdAt: z.string(),
  expirationDate: z.string(),
  last4Digits: z.string(),
  name: z.string(),
  pinSet: z.nullable(z.boolean()).optional(),
  status: CardDetailsStatus$outboundSchema,
  type: CardDetailsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardDetails$ {
  /** @deprecated use `CardDetails$inboundSchema` instead. */
  export const inboundSchema = CardDetails$inboundSchema;
  /** @deprecated use `CardDetails$outboundSchema` instead. */
  export const outboundSchema = CardDetails$outboundSchema;
  /** @deprecated use `CardDetails$Outbound` instead. */
  export type Outbound = CardDetails$Outbound;
}

export function cardDetailsToJSON(cardDetails: CardDetails): string {
  return JSON.stringify(CardDetails$outboundSchema.parse(cardDetails));
}

export function cardDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CardDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardDetails' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ExecuteClientInvoicePaymentRequest = {
    payRequest?: shared.PayRequest | undefined;
    /**
     * Unique identifier of an invoice
     */
    invoiceId: string;
};

export type ExecuteClientInvoicePaymentResponse = {
    /**
     * A client created invoice
     */
    clientInvoice?: shared.ClientInvoice | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ExecuteClientInvoicePaymentRequest$ {
    export type Inbound = {
        PayRequest?: shared.PayRequest$.Inbound | undefined;
        invoice_id: string;
    };

    export const inboundSchema: z.ZodType<
        ExecuteClientInvoicePaymentRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            PayRequest: shared.PayRequest$.inboundSchema.optional(),
            invoice_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.PayRequest === undefined ? null : { payRequest: v.PayRequest }),
                invoiceId: v.invoice_id,
            };
        });

    export type Outbound = {
        PayRequest?: shared.PayRequest$.Outbound | undefined;
        invoice_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ExecuteClientInvoicePaymentRequest
    > = z
        .object({
            payRequest: shared.PayRequest$.outboundSchema.optional(),
            invoiceId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.payRequest === undefined ? null : { PayRequest: v.payRequest }),
                invoice_id: v.invoiceId,
            };
        });
}

/** @internal */
export namespace ExecuteClientInvoicePaymentResponse$ {
    export type Inbound = {
        ClientInvoice?: shared.ClientInvoice$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        ExecuteClientInvoicePaymentResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ClientInvoice: shared.ClientInvoice$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ClientInvoice === undefined ? null : { clientInvoice: v.ClientInvoice }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ClientInvoice?: shared.ClientInvoice$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ExecuteClientInvoicePaymentResponse
    > = z
        .object({
            clientInvoice: shared.ClientInvoice$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.clientInvoice === undefined ? null : { ClientInvoice: v.clientInvoice }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

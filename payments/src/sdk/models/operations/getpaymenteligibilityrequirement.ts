/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetPaymentEligibilityRequirementRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetPaymentEligibilityRequirementResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * See payment eligibility requirements on member
   */
  paymentEligibility?: shared.PaymentEligibility | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetPaymentEligibilityRequirementRequest$inboundSchema: z.ZodType<
  GetPaymentEligibilityRequirementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetPaymentEligibilityRequirementRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetPaymentEligibilityRequirementRequest$outboundSchema: z.ZodType<
  GetPaymentEligibilityRequirementRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentEligibilityRequirementRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentEligibilityRequirementRequest$ {
  /** @deprecated use `GetPaymentEligibilityRequirementRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentEligibilityRequirementRequest$inboundSchema;
  /** @deprecated use `GetPaymentEligibilityRequirementRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentEligibilityRequirementRequest$outboundSchema;
  /** @deprecated use `GetPaymentEligibilityRequirementRequest$Outbound` instead. */
  export type Outbound = GetPaymentEligibilityRequirementRequest$Outbound;
}

export function getPaymentEligibilityRequirementRequestToJSON(
  getPaymentEligibilityRequirementRequest:
    GetPaymentEligibilityRequirementRequest,
): string {
  return JSON.stringify(
    GetPaymentEligibilityRequirementRequest$outboundSchema.parse(
      getPaymentEligibilityRequirementRequest,
    ),
  );
}

export function getPaymentEligibilityRequirementRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentEligibilityRequirementRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentEligibilityRequirementRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentEligibilityRequirementRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentEligibilityRequirementResponse$inboundSchema: z.ZodType<
  GetPaymentEligibilityRequirementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PaymentEligibility: shared.PaymentEligibility$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "PaymentEligibility": "paymentEligibility",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetPaymentEligibilityRequirementResponse$Outbound = {
  ContentType: string;
  PaymentEligibility?: shared.PaymentEligibility$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetPaymentEligibilityRequirementResponse$outboundSchema: z.ZodType<
  GetPaymentEligibilityRequirementResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentEligibilityRequirementResponse
> = z.object({
  contentType: z.string(),
  paymentEligibility: shared.PaymentEligibility$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    paymentEligibility: "PaymentEligibility",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentEligibilityRequirementResponse$ {
  /** @deprecated use `GetPaymentEligibilityRequirementResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentEligibilityRequirementResponse$inboundSchema;
  /** @deprecated use `GetPaymentEligibilityRequirementResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentEligibilityRequirementResponse$outboundSchema;
  /** @deprecated use `GetPaymentEligibilityRequirementResponse$Outbound` instead. */
  export type Outbound = GetPaymentEligibilityRequirementResponse$Outbound;
}

export function getPaymentEligibilityRequirementResponseToJSON(
  getPaymentEligibilityRequirementResponse:
    GetPaymentEligibilityRequirementResponse,
): string {
  return JSON.stringify(
    GetPaymentEligibilityRequirementResponse$outboundSchema.parse(
      getPaymentEligibilityRequirementResponse,
    ),
  );
}

export function getPaymentEligibilityRequirementResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentEligibilityRequirementResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentEligibilityRequirementResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentEligibilityRequirementResponse' from JSON`,
  );
}

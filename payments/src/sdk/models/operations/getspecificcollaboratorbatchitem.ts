/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetSpecificCollaboratorBatchItemRequest = {
  /**
   * Unique identifier for a batch
   */
  batchId: string;
  /**
   * Unique identifier for an item in a batch
   */
  batchItemId: string;
};

export type GetSpecificCollaboratorBatchItemResponse = {
  /**
   * An item that will be converted into a collaborator
   */
  bulkCollaboratorItem?: shared.BulkCollaboratorItem | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetSpecificCollaboratorBatchItemRequest$inboundSchema: z.ZodType<
  GetSpecificCollaboratorBatchItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batchId: z.string(),
  batchItemId: z.string(),
});

/** @internal */
export type GetSpecificCollaboratorBatchItemRequest$Outbound = {
  batchId: string;
  batchItemId: string;
};

/** @internal */
export const GetSpecificCollaboratorBatchItemRequest$outboundSchema: z.ZodType<
  GetSpecificCollaboratorBatchItemRequest$Outbound,
  z.ZodTypeDef,
  GetSpecificCollaboratorBatchItemRequest
> = z.object({
  batchId: z.string(),
  batchItemId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpecificCollaboratorBatchItemRequest$ {
  /** @deprecated use `GetSpecificCollaboratorBatchItemRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetSpecificCollaboratorBatchItemRequest$inboundSchema;
  /** @deprecated use `GetSpecificCollaboratorBatchItemRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetSpecificCollaboratorBatchItemRequest$outboundSchema;
  /** @deprecated use `GetSpecificCollaboratorBatchItemRequest$Outbound` instead. */
  export type Outbound = GetSpecificCollaboratorBatchItemRequest$Outbound;
}

export function getSpecificCollaboratorBatchItemRequestToJSON(
  getSpecificCollaboratorBatchItemRequest:
    GetSpecificCollaboratorBatchItemRequest,
): string {
  return JSON.stringify(
    GetSpecificCollaboratorBatchItemRequest$outboundSchema.parse(
      getSpecificCollaboratorBatchItemRequest,
    ),
  );
}

export function getSpecificCollaboratorBatchItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSpecificCollaboratorBatchItemRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSpecificCollaboratorBatchItemRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSpecificCollaboratorBatchItemRequest' from JSON`,
  );
}

/** @internal */
export const GetSpecificCollaboratorBatchItemResponse$inboundSchema: z.ZodType<
  GetSpecificCollaboratorBatchItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkCollaboratorItem: shared.BulkCollaboratorItem$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkCollaboratorItem": "bulkCollaboratorItem",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetSpecificCollaboratorBatchItemResponse$Outbound = {
  BulkCollaboratorItem?: shared.BulkCollaboratorItem$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetSpecificCollaboratorBatchItemResponse$outboundSchema: z.ZodType<
  GetSpecificCollaboratorBatchItemResponse$Outbound,
  z.ZodTypeDef,
  GetSpecificCollaboratorBatchItemResponse
> = z.object({
  bulkCollaboratorItem: shared.BulkCollaboratorItem$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkCollaboratorItem: "BulkCollaboratorItem",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpecificCollaboratorBatchItemResponse$ {
  /** @deprecated use `GetSpecificCollaboratorBatchItemResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetSpecificCollaboratorBatchItemResponse$inboundSchema;
  /** @deprecated use `GetSpecificCollaboratorBatchItemResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetSpecificCollaboratorBatchItemResponse$outboundSchema;
  /** @deprecated use `GetSpecificCollaboratorBatchItemResponse$Outbound` instead. */
  export type Outbound = GetSpecificCollaboratorBatchItemResponse$Outbound;
}

export function getSpecificCollaboratorBatchItemResponseToJSON(
  getSpecificCollaboratorBatchItemResponse:
    GetSpecificCollaboratorBatchItemResponse,
): string {
  return JSON.stringify(
    GetSpecificCollaboratorBatchItemResponse$outboundSchema.parse(
      getSpecificCollaboratorBatchItemResponse,
    ),
  );
}

export function getSpecificCollaboratorBatchItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSpecificCollaboratorBatchItemResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSpecificCollaboratorBatchItemResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSpecificCollaboratorBatchItemResponse' from JSON`,
  );
}

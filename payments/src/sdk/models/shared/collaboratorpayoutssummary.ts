/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CollaboratorPayoutsSummary = {
    deductionsCount: number;
    firstPaidDate?: string | null | undefined;
    lastPaidDate?: string | null | undefined;
    payablesCount: number;
    totalDeducted: number;
    totalPaid: number;
};

/** @internal */
export namespace CollaboratorPayoutsSummary$ {
    export type Inbound = {
        deductionsCount: number;
        firstPaidDate?: string | null | undefined;
        lastPaidDate?: string | null | undefined;
        payablesCount: number;
        totalDeducted: number;
        totalPaid: number;
    };

    export const inboundSchema: z.ZodType<CollaboratorPayoutsSummary, z.ZodTypeDef, Inbound> = z
        .object({
            deductionsCount: z.number(),
            firstPaidDate: z.string().nullable().optional(),
            lastPaidDate: z.string().nullable().optional(),
            payablesCount: z.number(),
            totalDeducted: z.number(),
            totalPaid: z.number(),
        })
        .transform((v) => {
            return {
                deductionsCount: v.deductionsCount,
                ...(v.firstPaidDate === undefined ? null : { firstPaidDate: v.firstPaidDate }),
                ...(v.lastPaidDate === undefined ? null : { lastPaidDate: v.lastPaidDate }),
                payablesCount: v.payablesCount,
                totalDeducted: v.totalDeducted,
                totalPaid: v.totalPaid,
            };
        });

    export type Outbound = {
        deductionsCount: number;
        firstPaidDate?: string | null | undefined;
        lastPaidDate?: string | null | undefined;
        payablesCount: number;
        totalDeducted: number;
        totalPaid: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CollaboratorPayoutsSummary> = z
        .object({
            deductionsCount: z.number(),
            firstPaidDate: z.string().nullable().optional(),
            lastPaidDate: z.string().nullable().optional(),
            payablesCount: z.number(),
            totalDeducted: z.number(),
            totalPaid: z.number(),
        })
        .transform((v) => {
            return {
                deductionsCount: v.deductionsCount,
                ...(v.firstPaidDate === undefined ? null : { firstPaidDate: v.firstPaidDate }),
                ...(v.lastPaidDate === undefined ? null : { lastPaidDate: v.lastPaidDate }),
                payablesCount: v.payablesCount,
                totalDeducted: v.totalDeducted,
                totalPaid: v.totalPaid,
            };
        });
}

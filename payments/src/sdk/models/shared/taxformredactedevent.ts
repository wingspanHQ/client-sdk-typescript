/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RedactedMember, RedactedMember$ } from "./redactedmember";
import { z } from "zod";

export type TaxFormRedactedEventData = {};

export enum EventType {
    PayerUpdatedData = "PayerUpdatedData",
    PayerManuallyUpdatedStatus = "PayerManuallyUpdatedStatus",
    RecipientUpdatedData = "RecipientUpdatedData",
    RecipientSyncEnabled = "RecipientSyncEnabled",
    InvitationSent = "InvitationSent",
    InvitationOpened = "InvitationOpened",
    RecipientSignedUp = "RecipientSignedUp",
    RecipientSharedW9Info = "RecipientSharedW9Info",
    TINVerificationRequested = "TINVerificationRequested",
    TINVerificationSucceeded = "TINVerificationSucceeded",
    TINVerificationFailed = "TINVerificationFailed",
    FormSubmittedToIRS = "FormSubmittedToIRS",
    FormAcceptedByIRS = "FormAcceptedByIRS",
    FormRejectedByIRS = "FormRejectedByIRS",
    CorrectionRequested = "CorrectionRequested",
    CorrectionAccepted = "CorrectionAccepted",
    CorrectionRejected = "CorrectionRejected",
    Emailed1099CopyDelivered = "Emailed1099CopyDelivered",
    Emailed1099CopyOpened = "Emailed1099CopyOpened",
    Emailed1099CopyDownloaded = "Emailed1099CopyDownloaded",
    Mailed1099CopyDelivered = "Mailed1099CopyDelivered",
    Mailed1099CopyReturnedToSender = "Mailed1099CopyReturnedToSender",
    Remailed1099CopyDelivered = "Remailed1099CopyDelivered",
}

export type PreviousData = {};

export enum RecipientSyncToggled {
    Enabled = "Enabled",
    Disabled = "Disabled",
    LessThanNilGreaterThan = "<nil>",
}

export enum TriggeredBy {
    Payer = "Payer",
    Payee = "Payee",
    System = "System",
}

export type TaxFormRedactedEvent = {
    data?: TaxFormRedactedEventData | null | undefined;
    eventActor?: RedactedMember | null | undefined;
    eventActorId?: string | null | undefined;
    eventType: EventType;
    previousData?: PreviousData | null | undefined;
    recipientSyncToggled?: RecipientSyncToggled | null | undefined;
    timestamp: string;
    triggeredBy: TriggeredBy;
};

/** @internal */
export namespace TaxFormRedactedEventData$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<TaxFormRedactedEventData, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxFormRedactedEventData> =
        z.object({});
}

/** @internal */
export const EventType$ = z.nativeEnum(EventType);

/** @internal */
export namespace PreviousData$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PreviousData, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviousData> = z.object({});
}

/** @internal */
export const RecipientSyncToggled$ = z.nativeEnum(RecipientSyncToggled);

/** @internal */
export const TriggeredBy$ = z.nativeEnum(TriggeredBy);

/** @internal */
export namespace TaxFormRedactedEvent$ {
    export type Inbound = {
        data?: TaxFormRedactedEventData$.Inbound | null | undefined;
        eventActor?: RedactedMember$.Inbound | null | undefined;
        eventActorId?: string | null | undefined;
        eventType: EventType;
        previousData?: PreviousData$.Inbound | null | undefined;
        recipientSyncToggled?: RecipientSyncToggled | null | undefined;
        timestamp: string;
        triggeredBy: TriggeredBy;
    };

    export const inboundSchema: z.ZodType<TaxFormRedactedEvent, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.nullable(z.lazy(() => TaxFormRedactedEventData$.inboundSchema)).optional(),
            eventActor: z.nullable(RedactedMember$.inboundSchema).optional(),
            eventActorId: z.nullable(z.string()).optional(),
            eventType: EventType$,
            previousData: z.nullable(z.lazy(() => PreviousData$.inboundSchema)).optional(),
            recipientSyncToggled: z.nullable(RecipientSyncToggled$).optional(),
            timestamp: z.string(),
            triggeredBy: TriggeredBy$,
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.eventActor === undefined ? null : { eventActor: v.eventActor }),
                ...(v.eventActorId === undefined ? null : { eventActorId: v.eventActorId }),
                eventType: v.eventType,
                ...(v.previousData === undefined ? null : { previousData: v.previousData }),
                ...(v.recipientSyncToggled === undefined
                    ? null
                    : { recipientSyncToggled: v.recipientSyncToggled }),
                timestamp: v.timestamp,
                triggeredBy: v.triggeredBy,
            };
        });

    export type Outbound = {
        data?: TaxFormRedactedEventData$.Outbound | null | undefined;
        eventActor?: RedactedMember$.Outbound | null | undefined;
        eventActorId?: string | null | undefined;
        eventType: EventType;
        previousData?: PreviousData$.Outbound | null | undefined;
        recipientSyncToggled?: RecipientSyncToggled | null | undefined;
        timestamp: string;
        triggeredBy: TriggeredBy;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxFormRedactedEvent> = z
        .object({
            data: z.nullable(z.lazy(() => TaxFormRedactedEventData$.outboundSchema)).optional(),
            eventActor: z.nullable(RedactedMember$.outboundSchema).optional(),
            eventActorId: z.nullable(z.string()).optional(),
            eventType: EventType$,
            previousData: z.nullable(z.lazy(() => PreviousData$.outboundSchema)).optional(),
            recipientSyncToggled: z.nullable(RecipientSyncToggled$).optional(),
            timestamp: z.string(),
            triggeredBy: TriggeredBy$,
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.eventActor === undefined ? null : { eventActor: v.eventActor }),
                ...(v.eventActorId === undefined ? null : { eventActorId: v.eventActorId }),
                eventType: v.eventType,
                ...(v.previousData === undefined ? null : { previousData: v.previousData }),
                ...(v.recipientSyncToggled === undefined
                    ? null
                    : { recipientSyncToggled: v.recipientSyncToggled }),
                timestamp: v.timestamp,
                triggeredBy: v.triggeredBy,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ScheduleDateStatus = {
  Pending: "Pending",
  Completed: "Completed",
  Skipped: "Skipped",
  Modified: "Modified",
} as const;
export type ScheduleDateStatus = ClosedEnum<typeof ScheduleDateStatus>;

export type ScheduleDate = {
  cutOffDate?: string | null | undefined;
  date: string;
  invoiceId?: string | null | undefined;
  invoiceTemplateId?: string | null | undefined;
  status: ScheduleDateStatus;
};

/** @internal */
export const ScheduleDateStatus$inboundSchema: z.ZodNativeEnum<
  typeof ScheduleDateStatus
> = z.nativeEnum(ScheduleDateStatus);

/** @internal */
export const ScheduleDateStatus$outboundSchema: z.ZodNativeEnum<
  typeof ScheduleDateStatus
> = ScheduleDateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleDateStatus$ {
  /** @deprecated use `ScheduleDateStatus$inboundSchema` instead. */
  export const inboundSchema = ScheduleDateStatus$inboundSchema;
  /** @deprecated use `ScheduleDateStatus$outboundSchema` instead. */
  export const outboundSchema = ScheduleDateStatus$outboundSchema;
}

/** @internal */
export const ScheduleDate$inboundSchema: z.ZodType<
  ScheduleDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  cutOffDate: z.nullable(z.string()).optional(),
  date: z.string(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceTemplateId: z.nullable(z.string()).optional(),
  status: ScheduleDateStatus$inboundSchema,
});

/** @internal */
export type ScheduleDate$Outbound = {
  cutOffDate?: string | null | undefined;
  date: string;
  invoiceId?: string | null | undefined;
  invoiceTemplateId?: string | null | undefined;
  status: string;
};

/** @internal */
export const ScheduleDate$outboundSchema: z.ZodType<
  ScheduleDate$Outbound,
  z.ZodTypeDef,
  ScheduleDate
> = z.object({
  cutOffDate: z.nullable(z.string()).optional(),
  date: z.string(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceTemplateId: z.nullable(z.string()).optional(),
  status: ScheduleDateStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleDate$ {
  /** @deprecated use `ScheduleDate$inboundSchema` instead. */
  export const inboundSchema = ScheduleDate$inboundSchema;
  /** @deprecated use `ScheduleDate$outboundSchema` instead. */
  export const outboundSchema = ScheduleDate$outboundSchema;
  /** @deprecated use `ScheduleDate$Outbound` instead. */
  export type Outbound = ScheduleDate$Outbound;
}

export function scheduleDateToJSON(scheduleDate: ScheduleDate): string {
  return JSON.stringify(ScheduleDate$outboundSchema.parse(scheduleDate));
}

export function scheduleDateFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleDate' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a,
  C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a$inboundSchema,
  C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a$Outbound,
  C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a$outboundSchema,
} from "./c1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a.js";
import {
  FeeHandlingConfig,
  FeeHandlingConfig$inboundSchema,
  FeeHandlingConfig$Outbound,
  FeeHandlingConfig$outboundSchema,
} from "./feehandlingconfig.js";
import {
  InvoiceIntegrations,
  InvoiceIntegrations$inboundSchema,
  InvoiceIntegrations$Outbound,
  InvoiceIntegrations$outboundSchema,
} from "./invoiceintegrations.js";
import {
  UserRoles,
  UserRoles$inboundSchema,
  UserRoles$Outbound,
  UserRoles$outboundSchema,
} from "./userroles.js";

export const AcceptedPaymentMethods = {
  Credit: "Credit",
  Ach: "ACH",
  Manual: "Manual",
} as const;
export type AcceptedPaymentMethods = ClosedEnum<typeof AcceptedPaymentMethods>;

export const InvoiceStatus = {
  Draft: "Draft",
  Open: "Open",
  Approved: "Approved",
  Paid: "Paid",
  Cancelled: "Cancelled",
} as const;
export type InvoiceStatus = ClosedEnum<typeof InvoiceStatus>;

export const BulkInvoiceItemStatus = {
  Open: "Open",
  Pending: "Pending",
  Processing: "Processing",
  Complete: "Complete",
  Failed: "Failed",
} as const;
export type BulkInvoiceItemStatus = ClosedEnum<typeof BulkInvoiceItemStatus>;

export type BulkInvoiceItem = {
  acceptedPaymentMethods?: Array<AcceptedPaymentMethods> | null | undefined;
  amount: number;
  bulkInvoiceBatchId: string;
  bulkInvoiceItemId: string;
  bulkInvoiceItemMergeKey?: string | null | undefined;
  bulkInvoiceItemReference?: string | null | undefined;
  clientEmail?: string | null | undefined;
  clientExternalId?: string | null | undefined;
  createdAt: string;
  creditFeeHandling?: FeeHandlingConfig | null | undefined;
  dueDate: string;
  eventActors: { [k: string]: string };
  integration?: InvoiceIntegrations | null | undefined;
  invoiceDate?: string | null | undefined;
  invoiceNotes?: string | null | undefined;
  invoiceStatus: InvoiceStatus;
  labels: { [k: string]: string };
  lineItemDescription: string;
  lineItemDetail?: string | null | undefined;
  memberClientId?: string | null | undefined;
  memberId: string;
  metadata?:
    | C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a
    | null
    | undefined;
  paidDate: string;
  projectName?: string | null | undefined;
  reimbursableExpense?: boolean | null | undefined;
  sendDate?: string | null | undefined;
  status: BulkInvoiceItemStatus;
  updatedAt: string;
  userRoles: UserRoles;
};

/** @internal */
export const AcceptedPaymentMethods$inboundSchema: z.ZodNativeEnum<
  typeof AcceptedPaymentMethods
> = z.nativeEnum(AcceptedPaymentMethods);

/** @internal */
export const AcceptedPaymentMethods$outboundSchema: z.ZodNativeEnum<
  typeof AcceptedPaymentMethods
> = AcceptedPaymentMethods$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptedPaymentMethods$ {
  /** @deprecated use `AcceptedPaymentMethods$inboundSchema` instead. */
  export const inboundSchema = AcceptedPaymentMethods$inboundSchema;
  /** @deprecated use `AcceptedPaymentMethods$outboundSchema` instead. */
  export const outboundSchema = AcceptedPaymentMethods$outboundSchema;
}

/** @internal */
export const InvoiceStatus$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceStatus
> = z.nativeEnum(InvoiceStatus);

/** @internal */
export const InvoiceStatus$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceStatus
> = InvoiceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceStatus$ {
  /** @deprecated use `InvoiceStatus$inboundSchema` instead. */
  export const inboundSchema = InvoiceStatus$inboundSchema;
  /** @deprecated use `InvoiceStatus$outboundSchema` instead. */
  export const outboundSchema = InvoiceStatus$outboundSchema;
}

/** @internal */
export const BulkInvoiceItemStatus$inboundSchema: z.ZodNativeEnum<
  typeof BulkInvoiceItemStatus
> = z.nativeEnum(BulkInvoiceItemStatus);

/** @internal */
export const BulkInvoiceItemStatus$outboundSchema: z.ZodNativeEnum<
  typeof BulkInvoiceItemStatus
> = BulkInvoiceItemStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkInvoiceItemStatus$ {
  /** @deprecated use `BulkInvoiceItemStatus$inboundSchema` instead. */
  export const inboundSchema = BulkInvoiceItemStatus$inboundSchema;
  /** @deprecated use `BulkInvoiceItemStatus$outboundSchema` instead. */
  export const outboundSchema = BulkInvoiceItemStatus$outboundSchema;
}

/** @internal */
export const BulkInvoiceItem$inboundSchema: z.ZodType<
  BulkInvoiceItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptedPaymentMethods: z.nullable(
    z.array(AcceptedPaymentMethods$inboundSchema),
  ).optional(),
  amount: z.number(),
  bulkInvoiceBatchId: z.string(),
  bulkInvoiceItemId: z.string(),
  bulkInvoiceItemMergeKey: z.nullable(z.string()).optional(),
  bulkInvoiceItemReference: z.nullable(z.string()).optional(),
  clientEmail: z.nullable(z.string()).optional(),
  clientExternalId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  creditFeeHandling: z.nullable(FeeHandlingConfig$inboundSchema).optional(),
  dueDate: z.string(),
  eventActors: z.record(z.string()),
  integration: z.nullable(InvoiceIntegrations$inboundSchema).optional(),
  invoiceDate: z.nullable(z.string()).optional(),
  invoiceNotes: z.nullable(z.string()).optional(),
  invoiceStatus: InvoiceStatus$inboundSchema,
  labels: z.record(z.string()),
  lineItemDescription: z.string(),
  lineItemDetail: z.nullable(z.string()).optional(),
  memberClientId: z.nullable(z.string()).optional(),
  memberId: z.string(),
  metadata: z.nullable(
    C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a$inboundSchema,
  ).optional(),
  paidDate: z.string(),
  projectName: z.nullable(z.string()).optional(),
  reimbursableExpense: z.nullable(z.boolean()).optional(),
  sendDate: z.nullable(z.string()).optional(),
  status: BulkInvoiceItemStatus$inboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$inboundSchema,
});

/** @internal */
export type BulkInvoiceItem$Outbound = {
  acceptedPaymentMethods?: Array<string> | null | undefined;
  amount: number;
  bulkInvoiceBatchId: string;
  bulkInvoiceItemId: string;
  bulkInvoiceItemMergeKey?: string | null | undefined;
  bulkInvoiceItemReference?: string | null | undefined;
  clientEmail?: string | null | undefined;
  clientExternalId?: string | null | undefined;
  createdAt: string;
  creditFeeHandling?: FeeHandlingConfig$Outbound | null | undefined;
  dueDate: string;
  eventActors: { [k: string]: string };
  integration?: InvoiceIntegrations$Outbound | null | undefined;
  invoiceDate?: string | null | undefined;
  invoiceNotes?: string | null | undefined;
  invoiceStatus: string;
  labels: { [k: string]: string };
  lineItemDescription: string;
  lineItemDetail?: string | null | undefined;
  memberClientId?: string | null | undefined;
  memberId: string;
  metadata?:
    | C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a$Outbound
    | null
    | undefined;
  paidDate: string;
  projectName?: string | null | undefined;
  reimbursableExpense?: boolean | null | undefined;
  sendDate?: string | null | undefined;
  status: string;
  updatedAt: string;
  userRoles: UserRoles$Outbound;
};

/** @internal */
export const BulkInvoiceItem$outboundSchema: z.ZodType<
  BulkInvoiceItem$Outbound,
  z.ZodTypeDef,
  BulkInvoiceItem
> = z.object({
  acceptedPaymentMethods: z.nullable(
    z.array(AcceptedPaymentMethods$outboundSchema),
  ).optional(),
  amount: z.number(),
  bulkInvoiceBatchId: z.string(),
  bulkInvoiceItemId: z.string(),
  bulkInvoiceItemMergeKey: z.nullable(z.string()).optional(),
  bulkInvoiceItemReference: z.nullable(z.string()).optional(),
  clientEmail: z.nullable(z.string()).optional(),
  clientExternalId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  creditFeeHandling: z.nullable(FeeHandlingConfig$outboundSchema).optional(),
  dueDate: z.string(),
  eventActors: z.record(z.string()),
  integration: z.nullable(InvoiceIntegrations$outboundSchema).optional(),
  invoiceDate: z.nullable(z.string()).optional(),
  invoiceNotes: z.nullable(z.string()).optional(),
  invoiceStatus: InvoiceStatus$outboundSchema,
  labels: z.record(z.string()),
  lineItemDescription: z.string(),
  lineItemDetail: z.nullable(z.string()).optional(),
  memberClientId: z.nullable(z.string()).optional(),
  memberId: z.string(),
  metadata: z.nullable(
    C1b9877fd1d35a4292006c3c09941c1c5c21bbe2e0e87488661804eebf2a3e4a$outboundSchema,
  ).optional(),
  paidDate: z.string(),
  projectName: z.nullable(z.string()).optional(),
  reimbursableExpense: z.nullable(z.boolean()).optional(),
  sendDate: z.nullable(z.string()).optional(),
  status: BulkInvoiceItemStatus$outboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkInvoiceItem$ {
  /** @deprecated use `BulkInvoiceItem$inboundSchema` instead. */
  export const inboundSchema = BulkInvoiceItem$inboundSchema;
  /** @deprecated use `BulkInvoiceItem$outboundSchema` instead. */
  export const outboundSchema = BulkInvoiceItem$outboundSchema;
  /** @deprecated use `BulkInvoiceItem$Outbound` instead. */
  export type Outbound = BulkInvoiceItem$Outbound;
}

export function bulkInvoiceItemToJSON(
  bulkInvoiceItem: BulkInvoiceItem,
): string {
  return JSON.stringify(BulkInvoiceItem$outboundSchema.parse(bulkInvoiceItem));
}

export function bulkInvoiceItemFromJSON(
  jsonString: string,
): SafeParseResult<BulkInvoiceItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkInvoiceItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkInvoiceItem' from JSON`,
  );
}

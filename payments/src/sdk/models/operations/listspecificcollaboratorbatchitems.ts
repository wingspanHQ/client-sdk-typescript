/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListSpecificCollaboratorBatchItemsRequest = {
  /**
   * Unique identifier for a batch
   */
  batchId: string;
};

export type ListSpecificCollaboratorBatchItemsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * A list of bulk collaborator items
   */
  classes?: Array<shared.BulkCollaboratorItem> | undefined;
};

/** @internal */
export const ListSpecificCollaboratorBatchItemsRequest$inboundSchema: z.ZodType<
  ListSpecificCollaboratorBatchItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batchId: z.string(),
});

/** @internal */
export type ListSpecificCollaboratorBatchItemsRequest$Outbound = {
  batchId: string;
};

/** @internal */
export const ListSpecificCollaboratorBatchItemsRequest$outboundSchema:
  z.ZodType<
    ListSpecificCollaboratorBatchItemsRequest$Outbound,
    z.ZodTypeDef,
    ListSpecificCollaboratorBatchItemsRequest
  > = z.object({
    batchId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpecificCollaboratorBatchItemsRequest$ {
  /** @deprecated use `ListSpecificCollaboratorBatchItemsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListSpecificCollaboratorBatchItemsRequest$inboundSchema;
  /** @deprecated use `ListSpecificCollaboratorBatchItemsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListSpecificCollaboratorBatchItemsRequest$outboundSchema;
  /** @deprecated use `ListSpecificCollaboratorBatchItemsRequest$Outbound` instead. */
  export type Outbound = ListSpecificCollaboratorBatchItemsRequest$Outbound;
}

export function listSpecificCollaboratorBatchItemsRequestToJSON(
  listSpecificCollaboratorBatchItemsRequest:
    ListSpecificCollaboratorBatchItemsRequest,
): string {
  return JSON.stringify(
    ListSpecificCollaboratorBatchItemsRequest$outboundSchema.parse(
      listSpecificCollaboratorBatchItemsRequest,
    ),
  );
}

export function listSpecificCollaboratorBatchItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSpecificCollaboratorBatchItemsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSpecificCollaboratorBatchItemsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSpecificCollaboratorBatchItemsRequest' from JSON`,
  );
}

/** @internal */
export const ListSpecificCollaboratorBatchItemsResponse$inboundSchema:
  z.ZodType<ListSpecificCollaboratorBatchItemsResponse, z.ZodTypeDef, unknown> =
    z.object({
      ContentType: z.string(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
      classes: z.array(shared.BulkCollaboratorItem$inboundSchema).optional(),
    }).transform((v) => {
      return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
      });
    });

/** @internal */
export type ListSpecificCollaboratorBatchItemsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  classes?: Array<shared.BulkCollaboratorItem$Outbound> | undefined;
};

/** @internal */
export const ListSpecificCollaboratorBatchItemsResponse$outboundSchema:
  z.ZodType<
    ListSpecificCollaboratorBatchItemsResponse$Outbound,
    z.ZodTypeDef,
    ListSpecificCollaboratorBatchItemsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    classes: z.array(shared.BulkCollaboratorItem$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpecificCollaboratorBatchItemsResponse$ {
  /** @deprecated use `ListSpecificCollaboratorBatchItemsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListSpecificCollaboratorBatchItemsResponse$inboundSchema;
  /** @deprecated use `ListSpecificCollaboratorBatchItemsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListSpecificCollaboratorBatchItemsResponse$outboundSchema;
  /** @deprecated use `ListSpecificCollaboratorBatchItemsResponse$Outbound` instead. */
  export type Outbound = ListSpecificCollaboratorBatchItemsResponse$Outbound;
}

export function listSpecificCollaboratorBatchItemsResponseToJSON(
  listSpecificCollaboratorBatchItemsResponse:
    ListSpecificCollaboratorBatchItemsResponse,
): string {
  return JSON.stringify(
    ListSpecificCollaboratorBatchItemsResponse$outboundSchema.parse(
      listSpecificCollaboratorBatchItemsResponse,
    ),
  );
}

export function listSpecificCollaboratorBatchItemsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSpecificCollaboratorBatchItemsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSpecificCollaboratorBatchItemsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSpecificCollaboratorBatchItemsResponse' from JSON`,
  );
}

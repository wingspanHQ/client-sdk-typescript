/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    Address,
    Address$inboundSchema,
    Address$Outbound,
    Address$outboundSchema,
} from "./address.js";
import {
    BankAccount,
    BankAccount$inboundSchema,
    BankAccount$Outbound,
    BankAccount$outboundSchema,
} from "./bankaccount.js";
import {
    ClientOptions,
    ClientOptions$inboundSchema,
    ClientOptions$Outbound,
    ClientOptions$outboundSchema,
} from "./clientoptions.js";
import {
    FeeHandlingConfig,
    FeeHandlingConfig$inboundSchema,
    FeeHandlingConfig$Outbound,
    FeeHandlingConfig$outboundSchema,
} from "./feehandlingconfig.js";
import { Fees, Fees$inboundSchema, Fees$Outbound, Fees$outboundSchema } from "./fees.js";
import {
    InvoiceAttachments,
    InvoiceAttachments$inboundSchema,
    InvoiceAttachments$Outbound,
    InvoiceAttachments$outboundSchema,
} from "./invoiceattachments.js";
import {
    InvoiceEvents,
    InvoiceEvents$inboundSchema,
    InvoiceEvents$Outbound,
    InvoiceEvents$outboundSchema,
} from "./invoiceevents.js";
import {
    InvoiceIntegrations,
    InvoiceIntegrations$inboundSchema,
    InvoiceIntegrations$Outbound,
    InvoiceIntegrations$outboundSchema,
} from "./invoiceintegrations.js";
import {
    InvoiceLineItem,
    InvoiceLineItem$inboundSchema,
    InvoiceLineItem$Outbound,
    InvoiceLineItem$outboundSchema,
} from "./invoicelineitem.js";
import {
    InvoiceMetadata,
    InvoiceMetadata$inboundSchema,
    InvoiceMetadata$Outbound,
    InvoiceMetadata$outboundSchema,
} from "./invoicemetadata.js";
import {
    LateFeeConfig,
    LateFeeConfig$inboundSchema,
    LateFeeConfig$Outbound,
    LateFeeConfig$outboundSchema,
} from "./latefeeconfig.js";
import {
    MemberClient,
    MemberClient$inboundSchema,
    MemberClient$Outbound,
    MemberClient$outboundSchema,
} from "./memberclient.js";
import {
    MemberOptions,
    MemberOptions$inboundSchema,
    MemberOptions$Outbound,
    MemberOptions$outboundSchema,
} from "./memberoptions.js";
import {
    PaymentInfo,
    PaymentInfo$inboundSchema,
    PaymentInfo$Outbound,
    PaymentInfo$outboundSchema,
} from "./paymentinfo.js";
import {
    ProcessingFees,
    ProcessingFees$inboundSchema,
    ProcessingFees$Outbound,
    ProcessingFees$outboundSchema,
} from "./processingfees.js";
import * as z from "zod";

export const ClientInvoiceAcceptedPaymentMethods = {
    Credit: "Credit",
    Ach: "ACH",
    Manual: "Manual",
} as const;
export type ClientInvoiceAcceptedPaymentMethods = ClosedEnum<
    typeof ClientInvoiceAcceptedPaymentMethods
>;

export const Currency = {
    Usd: "USD",
    Cad: "CAD",
} as const;
export type Currency = ClosedEnum<typeof Currency>;

export const ClientInvoiceStatus = {
    Draft: "Draft",
    Open: "Open",
    Overdue: "Overdue",
    Cancelled: "Cancelled",
    Pending: "Pending",
    PaymentInTransit: "PaymentInTransit",
    Paid: "Paid",
} as const;
export type ClientInvoiceStatus = ClosedEnum<typeof ClientInvoiceStatus>;

export type ClientInvoice = {
    acceptedPaymentMethods?: Array<ClientInvoiceAcceptedPaymentMethods> | null | undefined;
    accountId?: string | null | undefined;
    additionalRecipientEmails: Array<string>;
    amount: number;
    attachments?: InvoiceAttachments | null | undefined;
    bankTransferInfo?: BankAccount | null | undefined;
    chargedFees?: Fees | null | undefined;
    client: ClientOptions;
    createdAt: string;
    creditFeeHandling?: FeeHandlingConfig | null | undefined;
    currency: Currency;
    dueDate: string;
    events: InvoiceEvents;
    integration?: InvoiceIntegrations | null | undefined;
    internationalBankTransferInfo?: BankAccount | null | undefined;
    invoiceId: string;
    invoiceNotes?: string | null | undefined;
    invoiceNumber: string;
    invoiceTemplateId?: string | null | undefined;
    lateFeeHandling?: LateFeeConfig | null | undefined;
    lineItems: Array<InvoiceLineItem>;
    member: MemberOptions;
    memberAcceptsPayments: boolean;
    memberAddress: Address;
    memberClient: MemberClient;
    memberCompany: string;
    memberEmail: string;
    memberFormattedAddressLines?: Array<string> | null | undefined;
    memberLogoUrl: string;
    memberName: string;
    memberPaymentsVersion: number;
    memberStripeAccountId: string;
    metadata?: InvoiceMetadata | null | undefined;
    paymentInfo?: PaymentInfo | null | undefined;
    paymentMethodId?: string | null | undefined;
    processingFees?: ProcessingFees | null | undefined;
    projectName: string;
    sourceId?: string | null | undefined;
    status: ClientInvoiceStatus;
    updatedAt: string;
};

/** @internal */
export const ClientInvoiceAcceptedPaymentMethods$inboundSchema: z.ZodNativeEnum<
    typeof ClientInvoiceAcceptedPaymentMethods
> = z.nativeEnum(ClientInvoiceAcceptedPaymentMethods);

/** @internal */
export const ClientInvoiceAcceptedPaymentMethods$outboundSchema: z.ZodNativeEnum<
    typeof ClientInvoiceAcceptedPaymentMethods
> = ClientInvoiceAcceptedPaymentMethods$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientInvoiceAcceptedPaymentMethods$ {
    /** @deprecated use `ClientInvoiceAcceptedPaymentMethods$inboundSchema` instead. */
    export const inboundSchema = ClientInvoiceAcceptedPaymentMethods$inboundSchema;
    /** @deprecated use `ClientInvoiceAcceptedPaymentMethods$outboundSchema` instead. */
    export const outboundSchema = ClientInvoiceAcceptedPaymentMethods$outboundSchema;
}

/** @internal */
export const Currency$inboundSchema: z.ZodNativeEnum<typeof Currency> = z.nativeEnum(Currency);

/** @internal */
export const Currency$outboundSchema: z.ZodNativeEnum<typeof Currency> = Currency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Currency$ {
    /** @deprecated use `Currency$inboundSchema` instead. */
    export const inboundSchema = Currency$inboundSchema;
    /** @deprecated use `Currency$outboundSchema` instead. */
    export const outboundSchema = Currency$outboundSchema;
}

/** @internal */
export const ClientInvoiceStatus$inboundSchema: z.ZodNativeEnum<typeof ClientInvoiceStatus> =
    z.nativeEnum(ClientInvoiceStatus);

/** @internal */
export const ClientInvoiceStatus$outboundSchema: z.ZodNativeEnum<typeof ClientInvoiceStatus> =
    ClientInvoiceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientInvoiceStatus$ {
    /** @deprecated use `ClientInvoiceStatus$inboundSchema` instead. */
    export const inboundSchema = ClientInvoiceStatus$inboundSchema;
    /** @deprecated use `ClientInvoiceStatus$outboundSchema` instead. */
    export const outboundSchema = ClientInvoiceStatus$outboundSchema;
}

/** @internal */
export const ClientInvoice$inboundSchema: z.ZodType<ClientInvoice, z.ZodTypeDef, unknown> =
    z.object({
        acceptedPaymentMethods: z
            .nullable(z.array(ClientInvoiceAcceptedPaymentMethods$inboundSchema))
            .optional(),
        accountId: z.nullable(z.string()).optional(),
        additionalRecipientEmails: z.array(z.string()),
        amount: z.number(),
        attachments: z.nullable(InvoiceAttachments$inboundSchema).optional(),
        bankTransferInfo: z.nullable(BankAccount$inboundSchema).optional(),
        chargedFees: z.nullable(Fees$inboundSchema).optional(),
        client: ClientOptions$inboundSchema,
        createdAt: z.string(),
        creditFeeHandling: z.nullable(FeeHandlingConfig$inboundSchema).optional(),
        currency: Currency$inboundSchema,
        dueDate: z.string(),
        events: InvoiceEvents$inboundSchema,
        integration: z.nullable(InvoiceIntegrations$inboundSchema).optional(),
        internationalBankTransferInfo: z.nullable(BankAccount$inboundSchema).optional(),
        invoiceId: z.string(),
        invoiceNotes: z.nullable(z.string()).optional(),
        invoiceNumber: z.string(),
        invoiceTemplateId: z.nullable(z.string()).optional(),
        lateFeeHandling: z.nullable(LateFeeConfig$inboundSchema).optional(),
        lineItems: z.array(InvoiceLineItem$inboundSchema),
        member: MemberOptions$inboundSchema,
        memberAcceptsPayments: z.boolean(),
        memberAddress: Address$inboundSchema,
        memberClient: MemberClient$inboundSchema,
        memberCompany: z.string(),
        memberEmail: z.string(),
        memberFormattedAddressLines: z.nullable(z.array(z.string())).optional(),
        memberLogoUrl: z.string(),
        memberName: z.string(),
        memberPaymentsVersion: z.number(),
        memberStripeAccountId: z.string(),
        metadata: z.nullable(InvoiceMetadata$inboundSchema).optional(),
        paymentInfo: z.nullable(PaymentInfo$inboundSchema).optional(),
        paymentMethodId: z.nullable(z.string()).optional(),
        processingFees: z.nullable(ProcessingFees$inboundSchema).optional(),
        projectName: z.string(),
        sourceId: z.nullable(z.string()).optional(),
        status: ClientInvoiceStatus$inboundSchema,
        updatedAt: z.string(),
    });

/** @internal */
export type ClientInvoice$Outbound = {
    acceptedPaymentMethods?: Array<string> | null | undefined;
    accountId?: string | null | undefined;
    additionalRecipientEmails: Array<string>;
    amount: number;
    attachments?: InvoiceAttachments$Outbound | null | undefined;
    bankTransferInfo?: BankAccount$Outbound | null | undefined;
    chargedFees?: Fees$Outbound | null | undefined;
    client: ClientOptions$Outbound;
    createdAt: string;
    creditFeeHandling?: FeeHandlingConfig$Outbound | null | undefined;
    currency: string;
    dueDate: string;
    events: InvoiceEvents$Outbound;
    integration?: InvoiceIntegrations$Outbound | null | undefined;
    internationalBankTransferInfo?: BankAccount$Outbound | null | undefined;
    invoiceId: string;
    invoiceNotes?: string | null | undefined;
    invoiceNumber: string;
    invoiceTemplateId?: string | null | undefined;
    lateFeeHandling?: LateFeeConfig$Outbound | null | undefined;
    lineItems: Array<InvoiceLineItem$Outbound>;
    member: MemberOptions$Outbound;
    memberAcceptsPayments: boolean;
    memberAddress: Address$Outbound;
    memberClient: MemberClient$Outbound;
    memberCompany: string;
    memberEmail: string;
    memberFormattedAddressLines?: Array<string> | null | undefined;
    memberLogoUrl: string;
    memberName: string;
    memberPaymentsVersion: number;
    memberStripeAccountId: string;
    metadata?: InvoiceMetadata$Outbound | null | undefined;
    paymentInfo?: PaymentInfo$Outbound | null | undefined;
    paymentMethodId?: string | null | undefined;
    processingFees?: ProcessingFees$Outbound | null | undefined;
    projectName: string;
    sourceId?: string | null | undefined;
    status: string;
    updatedAt: string;
};

/** @internal */
export const ClientInvoice$outboundSchema: z.ZodType<
    ClientInvoice$Outbound,
    z.ZodTypeDef,
    ClientInvoice
> = z.object({
    acceptedPaymentMethods: z
        .nullable(z.array(ClientInvoiceAcceptedPaymentMethods$outboundSchema))
        .optional(),
    accountId: z.nullable(z.string()).optional(),
    additionalRecipientEmails: z.array(z.string()),
    amount: z.number(),
    attachments: z.nullable(InvoiceAttachments$outboundSchema).optional(),
    bankTransferInfo: z.nullable(BankAccount$outboundSchema).optional(),
    chargedFees: z.nullable(Fees$outboundSchema).optional(),
    client: ClientOptions$outboundSchema,
    createdAt: z.string(),
    creditFeeHandling: z.nullable(FeeHandlingConfig$outboundSchema).optional(),
    currency: Currency$outboundSchema,
    dueDate: z.string(),
    events: InvoiceEvents$outboundSchema,
    integration: z.nullable(InvoiceIntegrations$outboundSchema).optional(),
    internationalBankTransferInfo: z.nullable(BankAccount$outboundSchema).optional(),
    invoiceId: z.string(),
    invoiceNotes: z.nullable(z.string()).optional(),
    invoiceNumber: z.string(),
    invoiceTemplateId: z.nullable(z.string()).optional(),
    lateFeeHandling: z.nullable(LateFeeConfig$outboundSchema).optional(),
    lineItems: z.array(InvoiceLineItem$outboundSchema),
    member: MemberOptions$outboundSchema,
    memberAcceptsPayments: z.boolean(),
    memberAddress: Address$outboundSchema,
    memberClient: MemberClient$outboundSchema,
    memberCompany: z.string(),
    memberEmail: z.string(),
    memberFormattedAddressLines: z.nullable(z.array(z.string())).optional(),
    memberLogoUrl: z.string(),
    memberName: z.string(),
    memberPaymentsVersion: z.number(),
    memberStripeAccountId: z.string(),
    metadata: z.nullable(InvoiceMetadata$outboundSchema).optional(),
    paymentInfo: z.nullable(PaymentInfo$outboundSchema).optional(),
    paymentMethodId: z.nullable(z.string()).optional(),
    processingFees: z.nullable(ProcessingFees$outboundSchema).optional(),
    projectName: z.string(),
    sourceId: z.nullable(z.string()).optional(),
    status: ClientInvoiceStatus$outboundSchema,
    updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientInvoice$ {
    /** @deprecated use `ClientInvoice$inboundSchema` instead. */
    export const inboundSchema = ClientInvoice$inboundSchema;
    /** @deprecated use `ClientInvoice$outboundSchema` instead. */
    export const outboundSchema = ClientInvoice$outboundSchema;
    /** @deprecated use `ClientInvoice$Outbound` instead. */
    export type Outbound = ClientInvoice$Outbound;
}

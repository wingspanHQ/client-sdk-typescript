/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GenerateSpecificInvoiceRequest = {
    /**
     * Unique identifier of an invoice
     */
    invoiceId: string;
};

export type GenerateSpecificInvoiceResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Response from generation of invoice pdf
     */
    invoicePdfGenerationResponse?: shared.InvoicePdfGenerationResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GenerateSpecificInvoiceRequest$ {
    export type Inbound = {
        invoice_id: string;
    };

    export const inboundSchema: z.ZodType<GenerateSpecificInvoiceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            invoice_id: z.string(),
        })
        .transform((v) => {
            return {
                invoiceId: v.invoice_id,
            };
        });

    export type Outbound = {
        invoice_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GenerateSpecificInvoiceRequest> =
        z
            .object({
                invoiceId: z.string(),
            })
            .transform((v) => {
                return {
                    invoice_id: v.invoiceId,
                };
            });
}

/** @internal */
export namespace GenerateSpecificInvoiceResponse$ {
    export type Inbound = {
        ContentType: string;
        InvoicePdfGenerationResponse?: shared.InvoicePdfGenerationResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GenerateSpecificInvoiceResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                InvoicePdfGenerationResponse:
                    shared.InvoicePdfGenerationResponse$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    ...(v.InvoicePdfGenerationResponse === undefined
                        ? null
                        : { invoicePdfGenerationResponse: v.InvoicePdfGenerationResponse }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        InvoicePdfGenerationResponse?: shared.InvoicePdfGenerationResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GenerateSpecificInvoiceResponse
    > = z
        .object({
            contentType: z.string(),
            invoicePdfGenerationResponse:
                shared.InvoicePdfGenerationResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.invoicePdfGenerationResponse === undefined
                    ? null
                    : { InvoicePdfGenerationResponse: v.invoicePdfGenerationResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

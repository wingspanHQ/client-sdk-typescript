/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RedactedUser, RedactedUser$ } from "./redacteduser";
import { z } from "zod";

export type UserByEmailResponse = {
    user: RedactedUser;
    userId: string;
};

/** @internal */
export namespace UserByEmailResponse$ {
    export type Inbound = {
        user: RedactedUser$.Inbound;
        userId: string;
    };

    export const inboundSchema: z.ZodType<UserByEmailResponse, z.ZodTypeDef, Inbound> = z
        .object({
            user: RedactedUser$.inboundSchema,
            userId: z.string(),
        })
        .transform((v) => {
            return {
                user: v.user,
                userId: v.userId,
            };
        });

    export type Outbound = {
        user: RedactedUser$.Outbound;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserByEmailResponse> = z
        .object({
            user: RedactedUser$.outboundSchema,
            userId: z.string(),
        })
        .transform((v) => {
            return {
                user: v.user,
                userId: v.userId,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type DeleteCustomFieldRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type DeleteCustomFieldResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Custom fields that are set on resource
   */
  customField?: shared.CustomField | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DeleteCustomFieldRequest$inboundSchema: z.ZodType<
  DeleteCustomFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteCustomFieldRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteCustomFieldRequest$outboundSchema: z.ZodType<
  DeleteCustomFieldRequest$Outbound,
  z.ZodTypeDef,
  DeleteCustomFieldRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCustomFieldRequest$ {
  /** @deprecated use `DeleteCustomFieldRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCustomFieldRequest$inboundSchema;
  /** @deprecated use `DeleteCustomFieldRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCustomFieldRequest$outboundSchema;
  /** @deprecated use `DeleteCustomFieldRequest$Outbound` instead. */
  export type Outbound = DeleteCustomFieldRequest$Outbound;
}

export function deleteCustomFieldRequestToJSON(
  deleteCustomFieldRequest: DeleteCustomFieldRequest,
): string {
  return JSON.stringify(
    DeleteCustomFieldRequest$outboundSchema.parse(deleteCustomFieldRequest),
  );
}

export function deleteCustomFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCustomFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCustomFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCustomFieldRequest' from JSON`,
  );
}

/** @internal */
export const DeleteCustomFieldResponse$inboundSchema: z.ZodType<
  DeleteCustomFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CustomField: shared.CustomField$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CustomField": "customField",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteCustomFieldResponse$Outbound = {
  ContentType: string;
  CustomField?: shared.CustomField$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DeleteCustomFieldResponse$outboundSchema: z.ZodType<
  DeleteCustomFieldResponse$Outbound,
  z.ZodTypeDef,
  DeleteCustomFieldResponse
> = z.object({
  contentType: z.string(),
  customField: shared.CustomField$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    customField: "CustomField",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCustomFieldResponse$ {
  /** @deprecated use `DeleteCustomFieldResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteCustomFieldResponse$inboundSchema;
  /** @deprecated use `DeleteCustomFieldResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteCustomFieldResponse$outboundSchema;
  /** @deprecated use `DeleteCustomFieldResponse$Outbound` instead. */
  export type Outbound = DeleteCustomFieldResponse$Outbound;
}

export function deleteCustomFieldResponseToJSON(
  deleteCustomFieldResponse: DeleteCustomFieldResponse,
): string {
  return JSON.stringify(
    DeleteCustomFieldResponse$outboundSchema.parse(deleteCustomFieldResponse),
  );
}

export function deleteCustomFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCustomFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCustomFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCustomFieldResponse' from JSON`,
  );
}

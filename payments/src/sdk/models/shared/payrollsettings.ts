/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CalculationSettings1099,
  CalculationSettings1099$inboundSchema,
  CalculationSettings1099$Outbound,
  CalculationSettings1099$outboundSchema,
} from "./calculationsettings1099.js";
import {
  Frequency,
  Frequency$inboundSchema,
  Frequency$Outbound,
  Frequency$outboundSchema,
} from "./frequency.js";
import {
  FundingSource,
  FundingSource$inboundSchema,
  FundingSource$Outbound,
  FundingSource$outboundSchema,
} from "./fundingsource.js";
import {
  ScheduleDate,
  ScheduleDate$inboundSchema,
  ScheduleDate$Outbound,
  ScheduleDate$outboundSchema,
} from "./scheduledate.js";

export const InternationalPayroll = {
  All: "All",
  None: "None",
} as const;
export type InternationalPayroll = ClosedEnum<typeof InternationalPayroll>;

export const PayrollSettingsStatus = {
  Active: "Active",
  Draft: "Draft",
  Expired: "Expired",
  Cancelled: "Cancelled",
} as const;
export type PayrollSettingsStatus = ClosedEnum<typeof PayrollSettingsStatus>;

export const Workflow = {
  SingleStage: "SingleStage",
  DualStage: "DualStage",
} as const;
export type Workflow = ClosedEnum<typeof Workflow>;

export type PayrollSettings = {
  calculationSettings1099?: CalculationSettings1099 | null | undefined;
  enablePlannedPayroll?: boolean | null | undefined;
  enableProcessDaysBeforeDue?: boolean | null | undefined;
  frequency?: Frequency | null | undefined;
  fundingSource?: FundingSource | null | undefined;
  internationalPayroll?: InternationalPayroll | null | undefined;
  issue1099s?: boolean | null | undefined;
  processDaysBeforeDue?: number | null | undefined;
  runsPayroll?: boolean | null | undefined;
  scheduleDates?: Array<ScheduleDate> | null | undefined;
  status: PayrollSettingsStatus;
  workflow?: Workflow | null | undefined;
};

/** @internal */
export const InternationalPayroll$inboundSchema: z.ZodNativeEnum<
  typeof InternationalPayroll
> = z.nativeEnum(InternationalPayroll);

/** @internal */
export const InternationalPayroll$outboundSchema: z.ZodNativeEnum<
  typeof InternationalPayroll
> = InternationalPayroll$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternationalPayroll$ {
  /** @deprecated use `InternationalPayroll$inboundSchema` instead. */
  export const inboundSchema = InternationalPayroll$inboundSchema;
  /** @deprecated use `InternationalPayroll$outboundSchema` instead. */
  export const outboundSchema = InternationalPayroll$outboundSchema;
}

/** @internal */
export const PayrollSettingsStatus$inboundSchema: z.ZodNativeEnum<
  typeof PayrollSettingsStatus
> = z.nativeEnum(PayrollSettingsStatus);

/** @internal */
export const PayrollSettingsStatus$outboundSchema: z.ZodNativeEnum<
  typeof PayrollSettingsStatus
> = PayrollSettingsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSettingsStatus$ {
  /** @deprecated use `PayrollSettingsStatus$inboundSchema` instead. */
  export const inboundSchema = PayrollSettingsStatus$inboundSchema;
  /** @deprecated use `PayrollSettingsStatus$outboundSchema` instead. */
  export const outboundSchema = PayrollSettingsStatus$outboundSchema;
}

/** @internal */
export const Workflow$inboundSchema: z.ZodNativeEnum<typeof Workflow> = z
  .nativeEnum(Workflow);

/** @internal */
export const Workflow$outboundSchema: z.ZodNativeEnum<typeof Workflow> =
  Workflow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflow$ {
  /** @deprecated use `Workflow$inboundSchema` instead. */
  export const inboundSchema = Workflow$inboundSchema;
  /** @deprecated use `Workflow$outboundSchema` instead. */
  export const outboundSchema = Workflow$outboundSchema;
}

/** @internal */
export const PayrollSettings$inboundSchema: z.ZodType<
  PayrollSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  calculationSettings1099: z.nullable(CalculationSettings1099$inboundSchema)
    .optional(),
  enablePlannedPayroll: z.nullable(z.boolean()).optional(),
  enableProcessDaysBeforeDue: z.nullable(z.boolean()).optional(),
  frequency: z.nullable(Frequency$inboundSchema).optional(),
  fundingSource: z.nullable(FundingSource$inboundSchema).optional(),
  internationalPayroll: z.nullable(InternationalPayroll$inboundSchema)
    .optional(),
  issue1099s: z.nullable(z.boolean()).optional(),
  processDaysBeforeDue: z.nullable(z.number()).optional(),
  runsPayroll: z.nullable(z.boolean()).optional(),
  scheduleDates: z.nullable(z.array(ScheduleDate$inboundSchema)).optional(),
  status: PayrollSettingsStatus$inboundSchema,
  workflow: z.nullable(Workflow$inboundSchema).optional(),
});

/** @internal */
export type PayrollSettings$Outbound = {
  calculationSettings1099?: CalculationSettings1099$Outbound | null | undefined;
  enablePlannedPayroll?: boolean | null | undefined;
  enableProcessDaysBeforeDue?: boolean | null | undefined;
  frequency?: Frequency$Outbound | null | undefined;
  fundingSource?: FundingSource$Outbound | null | undefined;
  internationalPayroll?: string | null | undefined;
  issue1099s?: boolean | null | undefined;
  processDaysBeforeDue?: number | null | undefined;
  runsPayroll?: boolean | null | undefined;
  scheduleDates?: Array<ScheduleDate$Outbound> | null | undefined;
  status: string;
  workflow?: string | null | undefined;
};

/** @internal */
export const PayrollSettings$outboundSchema: z.ZodType<
  PayrollSettings$Outbound,
  z.ZodTypeDef,
  PayrollSettings
> = z.object({
  calculationSettings1099: z.nullable(CalculationSettings1099$outboundSchema)
    .optional(),
  enablePlannedPayroll: z.nullable(z.boolean()).optional(),
  enableProcessDaysBeforeDue: z.nullable(z.boolean()).optional(),
  frequency: z.nullable(Frequency$outboundSchema).optional(),
  fundingSource: z.nullable(FundingSource$outboundSchema).optional(),
  internationalPayroll: z.nullable(InternationalPayroll$outboundSchema)
    .optional(),
  issue1099s: z.nullable(z.boolean()).optional(),
  processDaysBeforeDue: z.nullable(z.number()).optional(),
  runsPayroll: z.nullable(z.boolean()).optional(),
  scheduleDates: z.nullable(z.array(ScheduleDate$outboundSchema)).optional(),
  status: PayrollSettingsStatus$outboundSchema,
  workflow: z.nullable(Workflow$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSettings$ {
  /** @deprecated use `PayrollSettings$inboundSchema` instead. */
  export const inboundSchema = PayrollSettings$inboundSchema;
  /** @deprecated use `PayrollSettings$outboundSchema` instead. */
  export const outboundSchema = PayrollSettings$outboundSchema;
  /** @deprecated use `PayrollSettings$Outbound` instead. */
  export type Outbound = PayrollSettings$Outbound;
}

export function payrollSettingsToJSON(
  payrollSettings: PayrollSettings,
): string {
  return JSON.stringify(PayrollSettings$outboundSchema.parse(payrollSettings));
}

export function payrollSettingsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollSettings' from JSON`,
  );
}

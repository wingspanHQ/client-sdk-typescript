/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { AccountAndBankingOperations } from "./accountandbankingoperations";
import { ActivityAndUsageTracking } from "./activityandusagetracking";
import { AuthorizationAndPermissions } from "./authorizationandpermissions";
import { Deprecated } from "./deprecated";
import { OrganizationAccountManagement } from "./organizationaccountmanagement";
import { SessionAndAuthentication } from "./sessionandauthentication";
import { SubscriptionAndGrantsManagement } from "./subscriptionandgrantsmanagement";
import { SubscriptionManagement } from "./subscriptionmanagement";
import { UserAndMemberManagement } from "./userandmembermanagement";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Wingspan's Users API in Production
     */
    "https://api.wingspan.app",
    /**
     * Wingspan's Users API in Staging
     */
    "https://stagingapi.wingspan.app",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    bearerAuth?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "2.0.4";
    genVersion = "2.210.6";
    userAgent = "speakeasy-sdk/typescript 2.0.4 2.210.6 1.0.0 @wingspan/users";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Wingspan Users API: Users
 */
export class Users {
    /**
     * Endpoints dealing with user accounts, member subscriptions, and profile information.
     */
    public userAndMemberManagement: UserAndMemberManagement;
    /**
     * Endpoints for handling account linkages, bank account information, and related financial operations.
     */
    public accountAndBankingOperations: AccountAndBankingOperations;
    /**
     * Endpoints for tracking and logging user activities and interactions.
     */
    public activityAndUsageTracking: ActivityAndUsageTracking;
    /**
     * Endpoints related to user session creation, management, and authentication processes, including OTP and SSO sessions.
     */
    public sessionAndAuthentication: SessionAndAuthentication;
    /**
     * Endpoints focused on managing user authorizations and permissions, including scopes and scope-groups.
     */
    public authorizationAndPermissions: AuthorizationAndPermissions;
    /**
     * Endpoints for managing user accounts within an organizational context.
     */
    public organizationAccountManagement: OrganizationAccountManagement;
    public subscriptionAndGrantsManagement: SubscriptionAndGrantsManagement;
    /**
     * Deprecated Endpoints.
     */
    public deprecated: Deprecated;
    /**
     * Endpoints related to managing user subscriptions and subscription grants.
     */
    public subscriptionManagement: SubscriptionManagement;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ bearerAuth: props?.bearerAuth }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.userAndMemberManagement = new UserAndMemberManagement(this.sdkConfiguration);
        this.accountAndBankingOperations = new AccountAndBankingOperations(this.sdkConfiguration);
        this.activityAndUsageTracking = new ActivityAndUsageTracking(this.sdkConfiguration);
        this.sessionAndAuthentication = new SessionAndAuthentication(this.sdkConfiguration);
        this.authorizationAndPermissions = new AuthorizationAndPermissions(this.sdkConfiguration);
        this.organizationAccountManagement = new OrganizationAccountManagement(
            this.sdkConfiguration
        );
        this.subscriptionAndGrantsManagement = new SubscriptionAndGrantsManagement(
            this.sdkConfiguration
        );
        this.deprecated = new Deprecated(this.sdkConfiguration);
        this.subscriptionManagement = new SubscriptionManagement(this.sdkConfiguration);
    }
}

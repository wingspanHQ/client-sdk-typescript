/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum ResourceType {
    Collaborator = "Collaborator",
    LineItem = "LineItem",
}

export enum TypeT {
    Boolean = "Boolean",
    String = "String",
}

export type AdditionalData = {
    key: string;
    name: string;
    required: boolean;
    resourceType: ResourceType;
    type: TypeT;
};

/** @internal */
export const ResourceType$ = z.nativeEnum(ResourceType);

/** @internal */
export const TypeT$ = z.nativeEnum(TypeT);

/** @internal */
export namespace AdditionalData$ {
    export type Inbound = {
        key: string;
        name: string;
        required: boolean;
        resourceType: ResourceType;
        type: TypeT;
    };

    export const inboundSchema: z.ZodType<AdditionalData, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            name: z.string(),
            required: z.boolean(),
            resourceType: ResourceType$,
            type: TypeT$,
        })
        .transform((v) => {
            return {
                key: v.key,
                name: v.name,
                required: v.required,
                resourceType: v.resourceType,
                type: v.type,
            };
        });

    export type Outbound = {
        key: string;
        name: string;
        required: boolean;
        resourceType: ResourceType;
        type: TypeT;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdditionalData> = z
        .object({
            key: z.string(),
            name: z.string(),
            required: z.boolean(),
            resourceType: ResourceType$,
            type: TypeT$,
        })
        .transform((v) => {
            return {
                key: v.key,
                name: v.name,
                required: v.required,
                resourceType: v.resourceType,
                type: v.type,
            };
        });
}

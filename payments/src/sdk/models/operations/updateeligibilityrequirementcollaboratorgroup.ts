/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateEligibilityRequirementCollaboratorGroupRequest = {
    collaboratorGroupRequirementUpdate?: shared.CollaboratorGroupRequirementUpdate | undefined;
    /**
     * Unique eligibility Requirement Id
     */
    eligibilityRequirementId: string;
    /**
     * Unique identifier
     */
    id: string;
};

export type UpdateEligibilityRequirementCollaboratorGroupResponse = {
    /**
     * Collaborator Configuration Per Group
     */
    collaboratorGroupResponse?: shared.CollaboratorGroupResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const UpdateEligibilityRequirementCollaboratorGroupRequest$inboundSchema: z.ZodType<
    UpdateEligibilityRequirementCollaboratorGroupRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        CollaboratorGroupRequirementUpdate:
            shared.CollaboratorGroupRequirementUpdate$inboundSchema.optional(),
        eligibilityRequirementId: z.string(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            CollaboratorGroupRequirementUpdate: "collaboratorGroupRequirementUpdate",
        });
    });

/** @internal */
export type UpdateEligibilityRequirementCollaboratorGroupRequest$Outbound = {
    CollaboratorGroupRequirementUpdate?:
        | shared.CollaboratorGroupRequirementUpdate$Outbound
        | undefined;
    eligibilityRequirementId: string;
    id: string;
};

/** @internal */
export const UpdateEligibilityRequirementCollaboratorGroupRequest$outboundSchema: z.ZodType<
    UpdateEligibilityRequirementCollaboratorGroupRequest$Outbound,
    z.ZodTypeDef,
    UpdateEligibilityRequirementCollaboratorGroupRequest
> = z
    .object({
        collaboratorGroupRequirementUpdate:
            shared.CollaboratorGroupRequirementUpdate$outboundSchema.optional(),
        eligibilityRequirementId: z.string(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            collaboratorGroupRequirementUpdate: "CollaboratorGroupRequirementUpdate",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEligibilityRequirementCollaboratorGroupRequest$ {
    /** @deprecated use `UpdateEligibilityRequirementCollaboratorGroupRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateEligibilityRequirementCollaboratorGroupRequest$inboundSchema;
    /** @deprecated use `UpdateEligibilityRequirementCollaboratorGroupRequest$outboundSchema` instead. */
    export const outboundSchema =
        UpdateEligibilityRequirementCollaboratorGroupRequest$outboundSchema;
    /** @deprecated use `UpdateEligibilityRequirementCollaboratorGroupRequest$Outbound` instead. */
    export type Outbound = UpdateEligibilityRequirementCollaboratorGroupRequest$Outbound;
}

/** @internal */
export const UpdateEligibilityRequirementCollaboratorGroupResponse$inboundSchema: z.ZodType<
    UpdateEligibilityRequirementCollaboratorGroupResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        CollaboratorGroupResponse: shared.CollaboratorGroupResponse$inboundSchema.optional(),
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            CollaboratorGroupResponse: "collaboratorGroupResponse",
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type UpdateEligibilityRequirementCollaboratorGroupResponse$Outbound = {
    CollaboratorGroupResponse?: shared.CollaboratorGroupResponse$Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const UpdateEligibilityRequirementCollaboratorGroupResponse$outboundSchema: z.ZodType<
    UpdateEligibilityRequirementCollaboratorGroupResponse$Outbound,
    z.ZodTypeDef,
    UpdateEligibilityRequirementCollaboratorGroupResponse
> = z
    .object({
        collaboratorGroupResponse: shared.CollaboratorGroupResponse$outboundSchema.optional(),
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            collaboratorGroupResponse: "CollaboratorGroupResponse",
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEligibilityRequirementCollaboratorGroupResponse$ {
    /** @deprecated use `UpdateEligibilityRequirementCollaboratorGroupResponse$inboundSchema` instead. */
    export const inboundSchema =
        UpdateEligibilityRequirementCollaboratorGroupResponse$inboundSchema;
    /** @deprecated use `UpdateEligibilityRequirementCollaboratorGroupResponse$outboundSchema` instead. */
    export const outboundSchema =
        UpdateEligibilityRequirementCollaboratorGroupResponse$outboundSchema;
    /** @deprecated use `UpdateEligibilityRequirementCollaboratorGroupResponse$Outbound` instead. */
    export type Outbound = UpdateEligibilityRequirementCollaboratorGroupResponse$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type DisassociateCollaboratorWithGroupRequest = {
  /**
   * Unique group Id
   */
  groupId: string;
  /**
   * Unique identifier
   */
  id: string;
};

export type DisassociateCollaboratorWithGroupResponse = {
  /**
   * A collaborator is a contractor that can receive payments
   */
  collaboratorSchema?: shared.CollaboratorSchema | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DisassociateCollaboratorWithGroupRequest$inboundSchema: z.ZodType<
  DisassociateCollaboratorWithGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupId: z.string(),
  id: z.string(),
});

/** @internal */
export type DisassociateCollaboratorWithGroupRequest$Outbound = {
  groupId: string;
  id: string;
};

/** @internal */
export const DisassociateCollaboratorWithGroupRequest$outboundSchema: z.ZodType<
  DisassociateCollaboratorWithGroupRequest$Outbound,
  z.ZodTypeDef,
  DisassociateCollaboratorWithGroupRequest
> = z.object({
  groupId: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisassociateCollaboratorWithGroupRequest$ {
  /** @deprecated use `DisassociateCollaboratorWithGroupRequest$inboundSchema` instead. */
  export const inboundSchema =
    DisassociateCollaboratorWithGroupRequest$inboundSchema;
  /** @deprecated use `DisassociateCollaboratorWithGroupRequest$outboundSchema` instead. */
  export const outboundSchema =
    DisassociateCollaboratorWithGroupRequest$outboundSchema;
  /** @deprecated use `DisassociateCollaboratorWithGroupRequest$Outbound` instead. */
  export type Outbound = DisassociateCollaboratorWithGroupRequest$Outbound;
}

export function disassociateCollaboratorWithGroupRequestToJSON(
  disassociateCollaboratorWithGroupRequest:
    DisassociateCollaboratorWithGroupRequest,
): string {
  return JSON.stringify(
    DisassociateCollaboratorWithGroupRequest$outboundSchema.parse(
      disassociateCollaboratorWithGroupRequest,
    ),
  );
}

export function disassociateCollaboratorWithGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DisassociateCollaboratorWithGroupRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DisassociateCollaboratorWithGroupRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DisassociateCollaboratorWithGroupRequest' from JSON`,
  );
}

/** @internal */
export const DisassociateCollaboratorWithGroupResponse$inboundSchema: z.ZodType<
  DisassociateCollaboratorWithGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CollaboratorSchema: shared.CollaboratorSchema$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CollaboratorSchema": "collaboratorSchema",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DisassociateCollaboratorWithGroupResponse$Outbound = {
  CollaboratorSchema?: shared.CollaboratorSchema$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DisassociateCollaboratorWithGroupResponse$outboundSchema:
  z.ZodType<
    DisassociateCollaboratorWithGroupResponse$Outbound,
    z.ZodTypeDef,
    DisassociateCollaboratorWithGroupResponse
  > = z.object({
    collaboratorSchema: shared.CollaboratorSchema$outboundSchema.optional(),
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      collaboratorSchema: "CollaboratorSchema",
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisassociateCollaboratorWithGroupResponse$ {
  /** @deprecated use `DisassociateCollaboratorWithGroupResponse$inboundSchema` instead. */
  export const inboundSchema =
    DisassociateCollaboratorWithGroupResponse$inboundSchema;
  /** @deprecated use `DisassociateCollaboratorWithGroupResponse$outboundSchema` instead. */
  export const outboundSchema =
    DisassociateCollaboratorWithGroupResponse$outboundSchema;
  /** @deprecated use `DisassociateCollaboratorWithGroupResponse$Outbound` instead. */
  export type Outbound = DisassociateCollaboratorWithGroupResponse$Outbound;
}

export function disassociateCollaboratorWithGroupResponseToJSON(
  disassociateCollaboratorWithGroupResponse:
    DisassociateCollaboratorWithGroupResponse,
): string {
  return JSON.stringify(
    DisassociateCollaboratorWithGroupResponse$outboundSchema.parse(
      disassociateCollaboratorWithGroupResponse,
    ),
  );
}

export function disassociateCollaboratorWithGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DisassociateCollaboratorWithGroupResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DisassociateCollaboratorWithGroupResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DisassociateCollaboratorWithGroupResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PreviouslyBilled, PreviouslyBilled$ } from "./previouslybilled";
import { ScheduledChange, ScheduledChange$ } from "./scheduledchange";
import { UserRoles, UserRoles$ } from "./userroles";
import { z } from "zod";

export enum LatestPaymentStatus {
    Failed = "Failed",
    Succeeded = "Succeeded",
    ActionRequired = "ActionRequired",
}

export enum SubscriptionPackage {
    None = "None",
    Benefits = "Benefits",
    Essentials = "Essentials",
    Professional = "Professional",
    Corporate = "Corporate",
}

export enum SubscriptionPackageTier {
    Basic = "Basic",
    Premium = "Premium",
}

export enum SubscriptionStatus {
    Incomplete = "incomplete",
    IncompleteExpired = "incomplete_expired",
    Trialing = "trialing",
    Active = "active",
    PastDue = "past_due",
    Canceled = "canceled",
    Unpaid = "unpaid",
}

export enum SubscriptionTerm {
    Yearly = "Yearly",
    Monthly = "Monthly",
}

export type Subscription = {
    cancelAtPeriodEnd?: boolean | null | undefined;
    createdAt: string;
    currentPeriodEnd: string;
    currentPeriodStart: string;
    discountCode: string;
    eventActors: Record<string, string>;
    gracePeriodEnd: string;
    labels: Record<string, string>;
    latestPaymentStatus: LatestPaymentStatus;
    memberId: string;
    nextBillingAmount?: number | null | undefined;
    package: SubscriptionPackage;
    packageTier: SubscriptionPackageTier;
    previouslyBilled: PreviouslyBilled;
    scheduledChanges?: Array<ScheduledChange> | null | undefined;
    status: SubscriptionStatus;
    subscriptionGrantId?: string | null | undefined;
    subscriptionId: string;
    term: SubscriptionTerm;
    trialEnd: string;
    updatedAt: string;
    userRoles: UserRoles;
};

/** @internal */
export const LatestPaymentStatus$ = z.nativeEnum(LatestPaymentStatus);

/** @internal */
export const SubscriptionPackage$ = z.nativeEnum(SubscriptionPackage);

/** @internal */
export const SubscriptionPackageTier$ = z.nativeEnum(SubscriptionPackageTier);

/** @internal */
export const SubscriptionStatus$ = z.nativeEnum(SubscriptionStatus);

/** @internal */
export const SubscriptionTerm$ = z.nativeEnum(SubscriptionTerm);

/** @internal */
export namespace Subscription$ {
    export type Inbound = {
        cancelAtPeriodEnd?: boolean | null | undefined;
        createdAt: string;
        currentPeriodEnd: string;
        currentPeriodStart: string;
        discountCode: string;
        eventActors: Record<string, string>;
        gracePeriodEnd: string;
        labels: Record<string, string>;
        latestPaymentStatus: LatestPaymentStatus;
        memberId: string;
        nextBillingAmount?: number | null | undefined;
        package: SubscriptionPackage;
        packageTier: SubscriptionPackageTier;
        previouslyBilled: PreviouslyBilled$.Inbound;
        scheduledChanges?: Array<ScheduledChange$.Inbound> | null | undefined;
        status: SubscriptionStatus;
        subscriptionGrantId?: string | null | undefined;
        subscriptionId: string;
        term: SubscriptionTerm;
        trialEnd: string;
        updatedAt: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<Subscription, z.ZodTypeDef, Inbound> = z
        .object({
            cancelAtPeriodEnd: z.nullable(z.boolean()).optional(),
            createdAt: z.string(),
            currentPeriodEnd: z.string(),
            currentPeriodStart: z.string(),
            discountCode: z.string(),
            eventActors: z.record(z.string()),
            gracePeriodEnd: z.string(),
            labels: z.record(z.string()),
            latestPaymentStatus: LatestPaymentStatus$,
            memberId: z.string(),
            nextBillingAmount: z.nullable(z.number()).optional(),
            package: SubscriptionPackage$,
            packageTier: SubscriptionPackageTier$,
            previouslyBilled: PreviouslyBilled$.inboundSchema,
            scheduledChanges: z.nullable(z.array(ScheduledChange$.inboundSchema)).optional(),
            status: SubscriptionStatus$,
            subscriptionGrantId: z.nullable(z.string()).optional(),
            subscriptionId: z.string(),
            term: SubscriptionTerm$,
            trialEnd: z.string(),
            updatedAt: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.cancelAtPeriodEnd === undefined
                    ? null
                    : { cancelAtPeriodEnd: v.cancelAtPeriodEnd }),
                createdAt: v.createdAt,
                currentPeriodEnd: v.currentPeriodEnd,
                currentPeriodStart: v.currentPeriodStart,
                discountCode: v.discountCode,
                eventActors: v.eventActors,
                gracePeriodEnd: v.gracePeriodEnd,
                labels: v.labels,
                latestPaymentStatus: v.latestPaymentStatus,
                memberId: v.memberId,
                ...(v.nextBillingAmount === undefined
                    ? null
                    : { nextBillingAmount: v.nextBillingAmount }),
                package: v.package,
                packageTier: v.packageTier,
                previouslyBilled: v.previouslyBilled,
                ...(v.scheduledChanges === undefined
                    ? null
                    : { scheduledChanges: v.scheduledChanges }),
                status: v.status,
                ...(v.subscriptionGrantId === undefined
                    ? null
                    : { subscriptionGrantId: v.subscriptionGrantId }),
                subscriptionId: v.subscriptionId,
                term: v.term,
                trialEnd: v.trialEnd,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        cancelAtPeriodEnd?: boolean | null | undefined;
        createdAt: string;
        currentPeriodEnd: string;
        currentPeriodStart: string;
        discountCode: string;
        eventActors: Record<string, string>;
        gracePeriodEnd: string;
        labels: Record<string, string>;
        latestPaymentStatus: LatestPaymentStatus;
        memberId: string;
        nextBillingAmount?: number | null | undefined;
        package: SubscriptionPackage;
        packageTier: SubscriptionPackageTier;
        previouslyBilled: PreviouslyBilled$.Outbound;
        scheduledChanges?: Array<ScheduledChange$.Outbound> | null | undefined;
        status: SubscriptionStatus;
        subscriptionGrantId?: string | null | undefined;
        subscriptionId: string;
        term: SubscriptionTerm;
        trialEnd: string;
        updatedAt: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Subscription> = z
        .object({
            cancelAtPeriodEnd: z.nullable(z.boolean()).optional(),
            createdAt: z.string(),
            currentPeriodEnd: z.string(),
            currentPeriodStart: z.string(),
            discountCode: z.string(),
            eventActors: z.record(z.string()),
            gracePeriodEnd: z.string(),
            labels: z.record(z.string()),
            latestPaymentStatus: LatestPaymentStatus$,
            memberId: z.string(),
            nextBillingAmount: z.nullable(z.number()).optional(),
            package: SubscriptionPackage$,
            packageTier: SubscriptionPackageTier$,
            previouslyBilled: PreviouslyBilled$.outboundSchema,
            scheduledChanges: z.nullable(z.array(ScheduledChange$.outboundSchema)).optional(),
            status: SubscriptionStatus$,
            subscriptionGrantId: z.nullable(z.string()).optional(),
            subscriptionId: z.string(),
            term: SubscriptionTerm$,
            trialEnd: z.string(),
            updatedAt: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.cancelAtPeriodEnd === undefined
                    ? null
                    : { cancelAtPeriodEnd: v.cancelAtPeriodEnd }),
                createdAt: v.createdAt,
                currentPeriodEnd: v.currentPeriodEnd,
                currentPeriodStart: v.currentPeriodStart,
                discountCode: v.discountCode,
                eventActors: v.eventActors,
                gracePeriodEnd: v.gracePeriodEnd,
                labels: v.labels,
                latestPaymentStatus: v.latestPaymentStatus,
                memberId: v.memberId,
                ...(v.nextBillingAmount === undefined
                    ? null
                    : { nextBillingAmount: v.nextBillingAmount }),
                package: v.package,
                packageTier: v.packageTier,
                previouslyBilled: v.previouslyBilled,
                ...(v.scheduledChanges === undefined
                    ? null
                    : { scheduledChanges: v.scheduledChanges }),
                status: v.status,
                ...(v.subscriptionGrantId === undefined
                    ? null
                    : { subscriptionGrantId: v.subscriptionGrantId }),
                subscriptionId: v.subscriptionId,
                term: v.term,
                trialEnd: v.trialEnd,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });
}

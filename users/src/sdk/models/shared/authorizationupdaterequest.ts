/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum AuthorizationUpdateRequestAllowedAction {
    Read = "Read",
    Write = "Write",
}

export type AuthorizationUpdateRequest = {
    allowedAction?: AuthorizationUpdateRequestAllowedAction | null | undefined;
    allowedScope?: string | null | undefined;
    allowedScopeGroupId?: string | null | undefined;
    requestingUserId?: string | null | undefined;
};

/** @internal */
export const AuthorizationUpdateRequestAllowedAction$ = z.nativeEnum(
    AuthorizationUpdateRequestAllowedAction
);

/** @internal */
export namespace AuthorizationUpdateRequest$ {
    export type Inbound = {
        allowedAction?: AuthorizationUpdateRequestAllowedAction | null | undefined;
        allowedScope?: string | null | undefined;
        allowedScopeGroupId?: string | null | undefined;
        requestingUserId?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<AuthorizationUpdateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            allowedAction: z.nullable(AuthorizationUpdateRequestAllowedAction$).optional(),
            allowedScope: z.nullable(z.string()).optional(),
            allowedScopeGroupId: z.nullable(z.string()).optional(),
            requestingUserId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowedAction === undefined ? null : { allowedAction: v.allowedAction }),
                ...(v.allowedScope === undefined ? null : { allowedScope: v.allowedScope }),
                ...(v.allowedScopeGroupId === undefined
                    ? null
                    : { allowedScopeGroupId: v.allowedScopeGroupId }),
                ...(v.requestingUserId === undefined
                    ? null
                    : { requestingUserId: v.requestingUserId }),
            };
        });

    export type Outbound = {
        allowedAction?: AuthorizationUpdateRequestAllowedAction | null | undefined;
        allowedScope?: string | null | undefined;
        allowedScopeGroupId?: string | null | undefined;
        requestingUserId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorizationUpdateRequest> = z
        .object({
            allowedAction: z.nullable(AuthorizationUpdateRequestAllowedAction$).optional(),
            allowedScope: z.nullable(z.string()).optional(),
            allowedScopeGroupId: z.nullable(z.string()).optional(),
            requestingUserId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowedAction === undefined ? null : { allowedAction: v.allowedAction }),
                ...(v.allowedScope === undefined ? null : { allowedScope: v.allowedScope }),
                ...(v.allowedScopeGroupId === undefined
                    ? null
                    : { allowedScopeGroupId: v.allowedScopeGroupId }),
                ...(v.requestingUserId === undefined
                    ? null
                    : { requestingUserId: v.requestingUserId }),
            };
        });
}

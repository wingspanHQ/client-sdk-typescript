/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class SubscriptionManagement extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Revoke a Nextgen Subscription for Member
     *
     * @remarks
     * Remove and terminate a specific Nextgen subscription associated with the member, revoking their access to Nextgen features.
     */
    async deleteUsersUserMemberMemberIdNextgenSubscriptionId(
        input: operations.DeleteUsersUserMemberMemberIdNextgenSubscriptionIdRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteUsersUserMemberMemberIdNextgenSubscriptionIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.DeleteUsersUserMemberMemberIdNextgenSubscriptionIdRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription/{id}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete_/users/user/member/{memberId}/nextgen-subscription/{id}",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.DeleteUsersUserMemberMemberIdNextgenSubscriptionIdResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            NextgenSubscriptionResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Fetch All Nextgen Subscriptions for Member
     *
     * @remarks
     * Retrieve all the active and previous Nextgen subscriptions associated with the specified member.
     */
    async getUsersUserMemberMemberIdNextgenSubscription(
        input: operations.GetUsersUserMemberMemberIdNextgenSubscriptionRequest,
        options?: RequestOptions
    ): Promise<operations.GetUsersUserMemberMemberIdNextgenSubscriptionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetUsersUserMemberMemberIdNextgenSubscriptionRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get_/users/user/member/{memberId}/nextgen-subscription",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetUsersUserMemberMemberIdNextgenSubscriptionResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            classes: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Browse Available Nextgen Subscription Plans
     *
     * @remarks
     * Fetches an array of available Nextgen Subscription Plans, providing members with an overview of the different subscription options, features, and pricing details.
     */
    async getUsersUserMemberMemberIdNextgenSubscriptionPlan(
        input: operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanRequest,
        options?: RequestOptions
    ): Promise<operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription-plan"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get_/users/user/member/{memberId}/nextgen-subscription-plan",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            classes: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve Specific Nextgen Subscription Plan
     *
     * @remarks
     * Fetches detailed information and pricing for a specific Nextgen Subscription Plan based on the provided plan ID.
     */
    async getUsersUserMemberMemberIdNextgenSubscriptionPlanId(
        input: operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdRequest,
        options?: RequestOptions
    ): Promise<operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription-plan/{id}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get_/users/user/member/{memberId}/nextgen-subscription-plan/{id}",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetUsersUserMemberMemberIdNextgenSubscriptionPlanIdResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            NextgenSubscriptionPlan: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve Details of a Specific Nextgen Subscription
     *
     * @remarks
     * Fetch detailed information about a specific Nextgen subscription associated with the member.
     */
    async getUsersUserMemberMemberIdNextgenSubscriptionId(
        input: operations.GetUsersUserMemberMemberIdNextgenSubscriptionIdRequest,
        options?: RequestOptions
    ): Promise<operations.GetUsersUserMemberMemberIdNextgenSubscriptionIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetUsersUserMemberMemberIdNextgenSubscriptionIdRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription/{id}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get_/users/user/member/{memberId}/nextgen-subscription/{id}",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetUsersUserMemberMemberIdNextgenSubscriptionIdResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            NextgenSubscriptionResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify an Existing Nextgen Subscription for Member
     *
     * @remarks
     * Update the details or terms of an existing Nextgen subscription associated with the specified member.
     */
    async patchUsersUserMemberMemberIdNextgenSubscriptionId(
        input: operations.PatchUsersUserMemberMemberIdNextgenSubscriptionIdRequest,
        options?: RequestOptions
    ): Promise<operations.PatchUsersUserMemberMemberIdNextgenSubscriptionIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.PatchUsersUserMemberMemberIdNextgenSubscriptionIdRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.SubscriptionUpdateRequest, {
            explode: true,
        });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription/{id}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "patch_/users/user/member/{memberId}/nextgen-subscription/{id}",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PatchUsersUserMemberMemberIdNextgenSubscriptionIdResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            NextgenSubscriptionResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Initiate a New Nextgen Subscription for a Member
     *
     * @remarks
     * Create a Nextgen subscription for a specific member, granting them access to Nextgen features and services.
     */
    async postUsersUserMemberMemberIdNextgenSubscription(
        input: operations.PostUsersUserMemberMemberIdNextgenSubscriptionRequest,
        options?: RequestOptions
    ): Promise<operations.PostUsersUserMemberMemberIdNextgenSubscriptionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.PostUsersUserMemberMemberIdNextgenSubscriptionRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.SubscriptionCreateRequest, {
            explode: true,
        });

        const pathParams$ = {
            memberId: enc$.encodeSimple("memberId", payload$.memberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/users/user/member/{memberId}/nextgen-subscription"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "post_/users/user/member/{memberId}/nextgen-subscription",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PostUsersUserMemberMemberIdNextgenSubscriptionResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            NextgenSubscriptionResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}

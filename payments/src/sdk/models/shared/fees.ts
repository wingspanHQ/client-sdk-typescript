/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Fee,
  Fee$inboundSchema,
  Fee$Outbound,
  Fee$outboundSchema,
} from "./fee.js";

export type Fees = {
  lateFee?: Fee | null | undefined;
  processingFee?: Fee | null | undefined;
};

/** @internal */
export const Fees$inboundSchema: z.ZodType<Fees, z.ZodTypeDef, unknown> = z
  .object({
    lateFee: z.nullable(Fee$inboundSchema).optional(),
    processingFee: z.nullable(Fee$inboundSchema).optional(),
  });

/** @internal */
export type Fees$Outbound = {
  lateFee?: Fee$Outbound | null | undefined;
  processingFee?: Fee$Outbound | null | undefined;
};

/** @internal */
export const Fees$outboundSchema: z.ZodType<Fees$Outbound, z.ZodTypeDef, Fees> =
  z.object({
    lateFee: z.nullable(Fee$outboundSchema).optional(),
    processingFee: z.nullable(Fee$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fees$ {
  /** @deprecated use `Fees$inboundSchema` instead. */
  export const inboundSchema = Fees$inboundSchema;
  /** @deprecated use `Fees$outboundSchema` instead. */
  export const outboundSchema = Fees$outboundSchema;
  /** @deprecated use `Fees$Outbound` instead. */
  export type Outbound = Fees$Outbound;
}

export function feesToJSON(fees: Fees): string {
  return JSON.stringify(Fees$outboundSchema.parse(fees));
}

export function feesFromJSON(
  jsonString: string,
): SafeParseResult<Fees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fees' from JSON`,
  );
}

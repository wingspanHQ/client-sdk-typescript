/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { BankingManagement } from "./bankingmanagement";
import { BulkOperations } from "./bulkoperations";
import { ClientManagement } from "./clientmanagement";
import { CollaboratorManagement } from "./collaboratormanagement";
import { CustomFieldManagement } from "./customfieldmanagement";
import { DocumentSigningAndEligibility } from "./documentsigningandeligibility";
import { InvoiceManagement } from "./invoicemanagement";
import { OneThousandAndNinetyNineOperations } from "./onethousandandninetynineoperations";
import { PayablesManagement } from "./payablesmanagement";
import { PayrollSettings } from "./payrollsettings";
import { ReportingAndAnalytics } from "./reportingandanalytics";
import { ServiceSettings } from "./servicesettings";
import { WingspanWallet } from "./wingspanwallet";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse, RawAxiosRequestHeaders } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Wingspan's Payments API in Production
     */
    "https://api.wingspan.app",
    /**
     * Wingspan's Payments API in Staging
     */
    "https://stagingapi.wingspan.app",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    bearerAuth?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "2.0.1";
    genVersion = "2.194.1";
    userAgent = "speakeasy-sdk/typescript 2.0.1 2.194.1 1.0.0 @wingspan/payments";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Wingspan Payments API: Payments
 */
export class Payments {
    /**
     * Covers endpoints that manage service statuses and related configurations.
     */
    public serviceSettings: ServiceSettings;
    public wingspanWallet: WingspanWallet;
    /**
     * These endpoints cater to fetching, storing, and managing documents related to electronic signatures, including retrieval of signing URLs and saving e-signed documents.
     */
    public bankingManagement: BankingManagement;
    /**
     * Includes endpoints for managing 1099 forms.
     */
    public oneThousandAndNinetyNineOperations: OneThousandAndNinetyNineOperations;
    /**
     * This category includes endpoints for managing bulk operations like bulk payables, bulk invoices, and bulk collaborator management.
     */
    public bulkOperations: BulkOperations;
    /**
     * Encompasses endpoints for banking-related operations such as managing bank cards, statements, instant payouts, and banking institutions..
     */
    public clientManagement: ClientManagement;
    /**
     * Covers endpoints related to invoice creation, retrieval, and management. This includes both member and client invoices, along with specific actions like sending invoices by email and managing invoice templates.
     */
    public invoiceManagement: InvoiceManagement;
    /**
     * This category includes endpoints that manage relationships and interactions with collaborators. This includes collaborator settings, and various operations related to collaborators.
     */
    public collaboratorManagement: CollaboratorManagement;
    public documentSigningAndEligibility: DocumentSigningAndEligibility;
    /**
     * Focuses on endpoints for managing custom fields related to payments and collaborators.
     */
    public customFieldManagement: CustomFieldManagement;
    /**
     * Endpoints dealing with payables, including creating, listing, updating, and deleting payables. It also includes summary endpoints and immediate payroll payables.
     */
    public payablesManagement: PayablesManagement;
    /**
     * Covers endpoints that manage payout settings and related configurations.
     */
    public payrollSettings: PayrollSettings;
    /**
     * Includes endpoints for generating various reports and analytics, such as payables reports, collaborators reports, and aging reports.
     */
    public reportingAndAnalytics: ReportingAndAnalytics;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ bearerAuth: props?.bearerAuth }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.serviceSettings = new ServiceSettings(this.sdkConfiguration);
        this.wingspanWallet = new WingspanWallet(this.sdkConfiguration);
        this.bankingManagement = new BankingManagement(this.sdkConfiguration);
        this.oneThousandAndNinetyNineOperations = new OneThousandAndNinetyNineOperations(
            this.sdkConfiguration
        );
        this.bulkOperations = new BulkOperations(this.sdkConfiguration);
        this.clientManagement = new ClientManagement(this.sdkConfiguration);
        this.invoiceManagement = new InvoiceManagement(this.sdkConfiguration);
        this.collaboratorManagement = new CollaboratorManagement(this.sdkConfiguration);
        this.documentSigningAndEligibility = new DocumentSigningAndEligibility(
            this.sdkConfiguration
        );
        this.customFieldManagement = new CustomFieldManagement(this.sdkConfiguration);
        this.payablesManagement = new PayablesManagement(this.sdkConfiguration);
        this.payrollSettings = new PayrollSettings(this.sdkConfiguration);
        this.reportingAndAnalytics = new ReportingAndAnalytics(this.sdkConfiguration);
    }

    /**
     * Erase a Specific Collaborator-Member Custom Data
     *
     * @remarks
     * [Deprecated - use /payments/custom-fields] Remove a specific custom data point, eliminating the additional details provided about a collaborator-member relationship.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async deletePaymentsCollaboratorSettingsAdditionalDataId(
        req: operations.DeletePaymentsCollaboratorSettingsAdditionalDataIdRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeletePaymentsCollaboratorSettingsAdditionalDataIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeletePaymentsCollaboratorSettingsAdditionalDataIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/payments/collaborator-settings/additional-data/{id}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeletePaymentsCollaboratorSettingsAdditionalDataIdResponse =
            new operations.DeletePaymentsCollaboratorSettingsAdditionalDataIdResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.additionalData = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.AdditionalData
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve All Collaborator-Member Custom Data Points
     *
     * @remarks
     * [Deprecated - use /payments/custom-fields] Fetch all custom data fields that are associated with the memberClient objects, giving insight into additional details between collaborators and members.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async getPaymentsCollaboratorSettingsAdditionalData(
        config?: AxiosRequestConfig
    ): Promise<operations.GetPaymentsCollaboratorSettingsAdditionalDataResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string =
            baseURL.replace(/\/$/, "") + "/payments/collaborator-settings/additional-data";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsCollaboratorSettingsAdditionalDataResponse =
            new operations.GetPaymentsCollaboratorSettingsAdditionalDataResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.AdditionalData,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve Specific Collaborator Custom Data
     *
     * @remarks
     * Deprecated - use /payments/custom-fields/:id
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async getPaymentsCollaboratorSettingsAdditionalDataId(
        req: operations.GetPaymentsCollaboratorSettingsAdditionalDataIdRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetPaymentsCollaboratorSettingsAdditionalDataIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetPaymentsCollaboratorSettingsAdditionalDataIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/payments/collaborator-settings/additional-data/{id}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsCollaboratorSettingsAdditionalDataIdResponse =
            new operations.GetPaymentsCollaboratorSettingsAdditionalDataIdResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.additionalData = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.AdditionalData
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve Merchant Category Codes (MCC)
     *
     * @remarks
     * This endpoint provides a comprehensive list of available Merchant Category Codes (MCC) which are used to classify businesses by the type of services or goods they provide.
     */
    async getPaymentsMcc(config?: AxiosRequestConfig): Promise<operations.GetPaymentsMccResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/payments/mcc";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsMccResponse = new operations.GetPaymentsMccResponse({
            statusCode: httpRes.status,
            contentType: responseContentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.MccResponse,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve All Clients (Version 2)
     *
     * @remarks
     * Fetches a comprehensive list of clients formatted in the V2 standard, providing an overview of all client data.
     */
    async getPaymentsV2Client(
        config?: AxiosRequestConfig
    ): Promise<operations.GetPaymentsV2ClientResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/payments/v2/client";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsV2ClientResponse =
            new operations.GetPaymentsV2ClientResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.CollaboratorV2,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve Specific Client Details (Version 2)
     *
     * @remarks
     * Fetches detailed information of a specific client, identified by the clientId, in the V2 format.
     */
    async getPaymentsV2ClientClientId(
        req: operations.GetPaymentsV2ClientClientIdRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetPaymentsV2ClientClientIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetPaymentsV2ClientClientIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/payments/v2/client/{clientId}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsV2ClientClientIdResponse =
            new operations.GetPaymentsV2ClientClientIdResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.collaboratorV2 = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.CollaboratorV2
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve All Collaborators (Version 2)
     *
     * @remarks
     * Fetches a comprehensive list of collaborators formatted in the V2 standard, providing an overview of all collaborator data.
     */
    async getPaymentsV2Collaborator(
        config?: AxiosRequestConfig
    ): Promise<operations.GetPaymentsV2CollaboratorResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/payments/v2/collaborator";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsV2CollaboratorResponse =
            new operations.GetPaymentsV2CollaboratorResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.CollaboratorV2,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Retrieve Specific Collaborator Details (Version 2)
     *
     * @remarks
     * Fetches detailed information of a specific collaborator, identified by the memberId, in the V2 format.
     */
    async getPaymentsV2CollaboratorMemberId(
        req: operations.GetPaymentsV2CollaboratorMemberIdRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetPaymentsV2CollaboratorMemberIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetPaymentsV2CollaboratorMemberIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/payments/v2/collaborator/{memberId}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPaymentsV2CollaboratorMemberIdResponse =
            new operations.GetPaymentsV2CollaboratorMemberIdResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.collaboratorV2 = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.CollaboratorV2
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Modify a Specific Collaborator-Member Custom Data
     *
     * @remarks
     * [Deprecated - use /payments/custom-fields] Update details or attributes of an existing custom data point associated with the relationship between a collaborator and a member.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async patchPaymentsCollaboratorSettingsAdditionalDataId(
        req: operations.PatchPaymentsCollaboratorSettingsAdditionalDataIdRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.PatchPaymentsCollaboratorSettingsAdditionalDataIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PatchPaymentsCollaboratorSettingsAdditionalDataIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/payments/collaborator-settings/additional-data/{id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "additionalDataUpdateRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = {
            ...reqBodyHeaders,
            ...config?.headers,
            ...properties.headers,
        };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PatchPaymentsCollaboratorSettingsAdditionalDataIdResponse =
            new operations.PatchPaymentsCollaboratorSettingsAdditionalDataIdResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.additionalData = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.AdditionalData
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Register New Custom Data for Collaborator-Member Relationship
     *
     * @remarks
     * [Deprecated - use /payments/custom-fields] Create custom fields that can be associated with the memberClient object to provide extra details about the relationship between a collaborator and a member.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async postPaymentsCollaboratorSettingsAdditionalData(
        req: shared.AdditionalData,
        config?: AxiosRequestConfig
    ): Promise<operations.PostPaymentsCollaboratorSettingsAdditionalDataResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.AdditionalData(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string =
            baseURL.replace(/\/$/, "") + "/payments/collaborator-settings/additional-data";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers: RawAxiosRequestHeaders = {
            ...reqBodyHeaders,
            ...config?.headers,
            ...properties.headers,
        };
        headers["Accept"] = "application/json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PostPaymentsCollaboratorSettingsAdditionalDataResponse =
            new operations.PostPaymentsCollaboratorSettingsAdditionalDataResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(responseContentType, `application/json`)) {
                    res.additionalData = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.AdditionalData
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + responseContentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CalculationSettings1099,
  CalculationSettings1099$inboundSchema,
  CalculationSettings1099$Outbound,
  CalculationSettings1099$outboundSchema,
} from "./calculationsettings1099.js";
import {
  FrequencyUpdate,
  FrequencyUpdate$inboundSchema,
  FrequencyUpdate$Outbound,
  FrequencyUpdate$outboundSchema,
} from "./frequencyupdate.js";
import {
  FundingSource,
  FundingSource$inboundSchema,
  FundingSource$Outbound,
  FundingSource$outboundSchema,
} from "./fundingsource.js";
import {
  ScheduleDateUpdate,
  ScheduleDateUpdate$inboundSchema,
  ScheduleDateUpdate$Outbound,
  ScheduleDateUpdate$outboundSchema,
} from "./scheduledateupdate.js";

export const PayrollSettingsUpdateStatus = {
  Active: "Active",
  Draft: "Draft",
  Expired: "Expired",
  Cancelled: "Cancelled",
} as const;
export type PayrollSettingsUpdateStatus = ClosedEnum<
  typeof PayrollSettingsUpdateStatus
>;

export const PayrollSettingsUpdateWorkflow = {
  SingleStage: "SingleStage",
  DualStage: "DualStage",
} as const;
export type PayrollSettingsUpdateWorkflow = ClosedEnum<
  typeof PayrollSettingsUpdateWorkflow
>;

export type PayrollSettingsUpdate = {
  calculationSettings1099?: CalculationSettings1099 | null | undefined;
  enablePlannedPayroll?: boolean | null | undefined;
  enableProcessDaysBeforeDue?: boolean | null | undefined;
  frequency?: FrequencyUpdate | null | undefined;
  fundingSource?: FundingSource | null | undefined;
  issue1099s?: boolean | null | undefined;
  processDaysBeforeDue?: number | null | undefined;
  scheduleDates?: Array<ScheduleDateUpdate> | null | undefined;
  status?: PayrollSettingsUpdateStatus | null | undefined;
  workflow?: PayrollSettingsUpdateWorkflow | null | undefined;
};

/** @internal */
export const PayrollSettingsUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof PayrollSettingsUpdateStatus
> = z.nativeEnum(PayrollSettingsUpdateStatus);

/** @internal */
export const PayrollSettingsUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof PayrollSettingsUpdateStatus
> = PayrollSettingsUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSettingsUpdateStatus$ {
  /** @deprecated use `PayrollSettingsUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = PayrollSettingsUpdateStatus$inboundSchema;
  /** @deprecated use `PayrollSettingsUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = PayrollSettingsUpdateStatus$outboundSchema;
}

/** @internal */
export const PayrollSettingsUpdateWorkflow$inboundSchema: z.ZodNativeEnum<
  typeof PayrollSettingsUpdateWorkflow
> = z.nativeEnum(PayrollSettingsUpdateWorkflow);

/** @internal */
export const PayrollSettingsUpdateWorkflow$outboundSchema: z.ZodNativeEnum<
  typeof PayrollSettingsUpdateWorkflow
> = PayrollSettingsUpdateWorkflow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSettingsUpdateWorkflow$ {
  /** @deprecated use `PayrollSettingsUpdateWorkflow$inboundSchema` instead. */
  export const inboundSchema = PayrollSettingsUpdateWorkflow$inboundSchema;
  /** @deprecated use `PayrollSettingsUpdateWorkflow$outboundSchema` instead. */
  export const outboundSchema = PayrollSettingsUpdateWorkflow$outboundSchema;
}

/** @internal */
export const PayrollSettingsUpdate$inboundSchema: z.ZodType<
  PayrollSettingsUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  calculationSettings1099: z.nullable(CalculationSettings1099$inboundSchema)
    .optional(),
  enablePlannedPayroll: z.nullable(z.boolean()).optional(),
  enableProcessDaysBeforeDue: z.nullable(z.boolean()).optional(),
  frequency: z.nullable(FrequencyUpdate$inboundSchema).optional(),
  fundingSource: z.nullable(FundingSource$inboundSchema).optional(),
  issue1099s: z.nullable(z.boolean()).optional(),
  processDaysBeforeDue: z.nullable(z.number()).optional(),
  scheduleDates: z.nullable(z.array(ScheduleDateUpdate$inboundSchema))
    .optional(),
  status: z.nullable(PayrollSettingsUpdateStatus$inboundSchema).optional(),
  workflow: z.nullable(PayrollSettingsUpdateWorkflow$inboundSchema).optional(),
});

/** @internal */
export type PayrollSettingsUpdate$Outbound = {
  calculationSettings1099?: CalculationSettings1099$Outbound | null | undefined;
  enablePlannedPayroll?: boolean | null | undefined;
  enableProcessDaysBeforeDue?: boolean | null | undefined;
  frequency?: FrequencyUpdate$Outbound | null | undefined;
  fundingSource?: FundingSource$Outbound | null | undefined;
  issue1099s?: boolean | null | undefined;
  processDaysBeforeDue?: number | null | undefined;
  scheduleDates?: Array<ScheduleDateUpdate$Outbound> | null | undefined;
  status?: string | null | undefined;
  workflow?: string | null | undefined;
};

/** @internal */
export const PayrollSettingsUpdate$outboundSchema: z.ZodType<
  PayrollSettingsUpdate$Outbound,
  z.ZodTypeDef,
  PayrollSettingsUpdate
> = z.object({
  calculationSettings1099: z.nullable(CalculationSettings1099$outboundSchema)
    .optional(),
  enablePlannedPayroll: z.nullable(z.boolean()).optional(),
  enableProcessDaysBeforeDue: z.nullable(z.boolean()).optional(),
  frequency: z.nullable(FrequencyUpdate$outboundSchema).optional(),
  fundingSource: z.nullable(FundingSource$outboundSchema).optional(),
  issue1099s: z.nullable(z.boolean()).optional(),
  processDaysBeforeDue: z.nullable(z.number()).optional(),
  scheduleDates: z.nullable(z.array(ScheduleDateUpdate$outboundSchema))
    .optional(),
  status: z.nullable(PayrollSettingsUpdateStatus$outboundSchema).optional(),
  workflow: z.nullable(PayrollSettingsUpdateWorkflow$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSettingsUpdate$ {
  /** @deprecated use `PayrollSettingsUpdate$inboundSchema` instead. */
  export const inboundSchema = PayrollSettingsUpdate$inboundSchema;
  /** @deprecated use `PayrollSettingsUpdate$outboundSchema` instead. */
  export const outboundSchema = PayrollSettingsUpdate$outboundSchema;
  /** @deprecated use `PayrollSettingsUpdate$Outbound` instead. */
  export type Outbound = PayrollSettingsUpdate$Outbound;
}

export function payrollSettingsUpdateToJSON(
  payrollSettingsUpdate: PayrollSettingsUpdate,
): string {
  return JSON.stringify(
    PayrollSettingsUpdate$outboundSchema.parse(payrollSettingsUpdate),
  );
}

export function payrollSettingsUpdateFromJSON(
  jsonString: string,
): SafeParseResult<PayrollSettingsUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollSettingsUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollSettingsUpdate' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type ExecuteApprovedPayrollTransactionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An invoice
   */
  invoice?: shared.Invoice | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ExecuteApprovedPayrollTransactionResponse$inboundSchema: z.ZodType<
  ExecuteApprovedPayrollTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Invoice: shared.Invoice$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Invoice": "invoice",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ExecuteApprovedPayrollTransactionResponse$Outbound = {
  ContentType: string;
  Invoice?: shared.Invoice$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ExecuteApprovedPayrollTransactionResponse$outboundSchema:
  z.ZodType<
    ExecuteApprovedPayrollTransactionResponse$Outbound,
    z.ZodTypeDef,
    ExecuteApprovedPayrollTransactionResponse
  > = z.object({
    contentType: z.string(),
    invoice: shared.Invoice$outboundSchema.optional(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      invoice: "Invoice",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteApprovedPayrollTransactionResponse$ {
  /** @deprecated use `ExecuteApprovedPayrollTransactionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ExecuteApprovedPayrollTransactionResponse$inboundSchema;
  /** @deprecated use `ExecuteApprovedPayrollTransactionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ExecuteApprovedPayrollTransactionResponse$outboundSchema;
  /** @deprecated use `ExecuteApprovedPayrollTransactionResponse$Outbound` instead. */
  export type Outbound = ExecuteApprovedPayrollTransactionResponse$Outbound;
}

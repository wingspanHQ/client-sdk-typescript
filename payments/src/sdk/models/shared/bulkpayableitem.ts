/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb,
    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$,
} from "./ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb";
import { InvoiceIntegrations, InvoiceIntegrations$ } from "./invoiceintegrations";
import { UserRoles, UserRoles$ } from "./userroles";
import { z } from "zod";

export enum PayableStatus {
    Draft = "Draft",
    Open = "Open",
    Approved = "Approved",
    Paid = "Paid",
    Cancelled = "Cancelled",
}

export enum BulkPayableItemStatus {
    Open = "Open",
    Pending = "Pending",
    Processing = "Processing",
    Complete = "Complete",
    Failed = "Failed",
}

export enum WorkflowSubStatus {
    Submitted = "Submitted",
    LessThanNilGreaterThan = "<nil>",
}

export type BulkPayableItem = {
    amount: number;
    attachmentId?: string | null | undefined;
    bulkPayableBatchId: string;
    bulkPayableItemId: string;
    bulkPayableItemMergeKey?: string | null | undefined;
    bulkPayableItemReference?: string | null | undefined;
    clientId: string;
    collaboratorEmail?: string | null | undefined;
    collaboratorExternalId?: string | null | undefined;
    collaboratorId?: string | null | undefined;
    createdAt: string;
    dueDate: string;
    eventActors: Record<string, string>;
    integration?: InvoiceIntegrations | null | undefined;
    labels: Record<string, string>;
    lineItemDescription: string;
    lineItemDetail?: string | null | undefined;
    metadata?: Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb | null | undefined;
    paidDate: string;
    payableNotes?: string | null | undefined;
    payableStatus: PayableStatus;
    reimbursableExpense?: boolean | null | undefined;
    status: BulkPayableItemStatus;
    updatedAt: string;
    userRoles: UserRoles;
    workflowSubStatus?: WorkflowSubStatus | null | undefined;
};

/** @internal */
export const PayableStatus$ = z.nativeEnum(PayableStatus);

/** @internal */
export const BulkPayableItemStatus$ = z.nativeEnum(BulkPayableItemStatus);

/** @internal */
export const WorkflowSubStatus$ = z.nativeEnum(WorkflowSubStatus);

/** @internal */
export namespace BulkPayableItem$ {
    export type Inbound = {
        amount: number;
        attachmentId?: string | null | undefined;
        bulkPayableBatchId: string;
        bulkPayableItemId: string;
        bulkPayableItemMergeKey?: string | null | undefined;
        bulkPayableItemReference?: string | null | undefined;
        clientId: string;
        collaboratorEmail?: string | null | undefined;
        collaboratorExternalId?: string | null | undefined;
        collaboratorId?: string | null | undefined;
        createdAt: string;
        dueDate: string;
        eventActors: Record<string, string>;
        integration?: InvoiceIntegrations$.Inbound | null | undefined;
        labels: Record<string, string>;
        lineItemDescription: string;
        lineItemDetail?: string | null | undefined;
        metadata?:
            | Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$.Inbound
            | null
            | undefined;
        paidDate: string;
        payableNotes?: string | null | undefined;
        payableStatus: PayableStatus;
        reimbursableExpense?: boolean | null | undefined;
        status: BulkPayableItemStatus;
        updatedAt: string;
        userRoles: UserRoles$.Inbound;
        workflowSubStatus?: WorkflowSubStatus | null | undefined;
    };

    export const inboundSchema: z.ZodType<BulkPayableItem, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            attachmentId: z.nullable(z.string()).optional(),
            bulkPayableBatchId: z.string(),
            bulkPayableItemId: z.string(),
            bulkPayableItemMergeKey: z.nullable(z.string()).optional(),
            bulkPayableItemReference: z.nullable(z.string()).optional(),
            clientId: z.string(),
            collaboratorEmail: z.nullable(z.string()).optional(),
            collaboratorExternalId: z.nullable(z.string()).optional(),
            collaboratorId: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            dueDate: z.string(),
            eventActors: z.record(z.string()),
            integration: z.nullable(InvoiceIntegrations$.inboundSchema).optional(),
            labels: z.record(z.string()),
            lineItemDescription: z.string(),
            lineItemDetail: z.nullable(z.string()).optional(),
            metadata: z
                .nullable(
                    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$.inboundSchema
                )
                .optional(),
            paidDate: z.string(),
            payableNotes: z.nullable(z.string()).optional(),
            payableStatus: PayableStatus$,
            reimbursableExpense: z.nullable(z.boolean()).optional(),
            status: BulkPayableItemStatus$,
            updatedAt: z.string(),
            userRoles: UserRoles$.inboundSchema,
            workflowSubStatus: z.nullable(WorkflowSubStatus$).optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.attachmentId === undefined ? null : { attachmentId: v.attachmentId }),
                bulkPayableBatchId: v.bulkPayableBatchId,
                bulkPayableItemId: v.bulkPayableItemId,
                ...(v.bulkPayableItemMergeKey === undefined
                    ? null
                    : { bulkPayableItemMergeKey: v.bulkPayableItemMergeKey }),
                ...(v.bulkPayableItemReference === undefined
                    ? null
                    : { bulkPayableItemReference: v.bulkPayableItemReference }),
                clientId: v.clientId,
                ...(v.collaboratorEmail === undefined
                    ? null
                    : { collaboratorEmail: v.collaboratorEmail }),
                ...(v.collaboratorExternalId === undefined
                    ? null
                    : { collaboratorExternalId: v.collaboratorExternalId }),
                ...(v.collaboratorId === undefined ? null : { collaboratorId: v.collaboratorId }),
                createdAt: v.createdAt,
                dueDate: v.dueDate,
                eventActors: v.eventActors,
                ...(v.integration === undefined ? null : { integration: v.integration }),
                labels: v.labels,
                lineItemDescription: v.lineItemDescription,
                ...(v.lineItemDetail === undefined ? null : { lineItemDetail: v.lineItemDetail }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                paidDate: v.paidDate,
                ...(v.payableNotes === undefined ? null : { payableNotes: v.payableNotes }),
                payableStatus: v.payableStatus,
                ...(v.reimbursableExpense === undefined
                    ? null
                    : { reimbursableExpense: v.reimbursableExpense }),
                status: v.status,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
                ...(v.workflowSubStatus === undefined
                    ? null
                    : { workflowSubStatus: v.workflowSubStatus }),
            };
        });

    export type Outbound = {
        amount: number;
        attachmentId?: string | null | undefined;
        bulkPayableBatchId: string;
        bulkPayableItemId: string;
        bulkPayableItemMergeKey?: string | null | undefined;
        bulkPayableItemReference?: string | null | undefined;
        clientId: string;
        collaboratorEmail?: string | null | undefined;
        collaboratorExternalId?: string | null | undefined;
        collaboratorId?: string | null | undefined;
        createdAt: string;
        dueDate: string;
        eventActors: Record<string, string>;
        integration?: InvoiceIntegrations$.Outbound | null | undefined;
        labels: Record<string, string>;
        lineItemDescription: string;
        lineItemDetail?: string | null | undefined;
        metadata?:
            | Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$.Outbound
            | null
            | undefined;
        paidDate: string;
        payableNotes?: string | null | undefined;
        payableStatus: PayableStatus;
        reimbursableExpense?: boolean | null | undefined;
        status: BulkPayableItemStatus;
        updatedAt: string;
        userRoles: UserRoles$.Outbound;
        workflowSubStatus?: WorkflowSubStatus | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BulkPayableItem> = z
        .object({
            amount: z.number(),
            attachmentId: z.nullable(z.string()).optional(),
            bulkPayableBatchId: z.string(),
            bulkPayableItemId: z.string(),
            bulkPayableItemMergeKey: z.nullable(z.string()).optional(),
            bulkPayableItemReference: z.nullable(z.string()).optional(),
            clientId: z.string(),
            collaboratorEmail: z.nullable(z.string()).optional(),
            collaboratorExternalId: z.nullable(z.string()).optional(),
            collaboratorId: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            dueDate: z.string(),
            eventActors: z.record(z.string()),
            integration: z.nullable(InvoiceIntegrations$.outboundSchema).optional(),
            labels: z.record(z.string()),
            lineItemDescription: z.string(),
            lineItemDetail: z.nullable(z.string()).optional(),
            metadata: z
                .nullable(
                    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$.outboundSchema
                )
                .optional(),
            paidDate: z.string(),
            payableNotes: z.nullable(z.string()).optional(),
            payableStatus: PayableStatus$,
            reimbursableExpense: z.nullable(z.boolean()).optional(),
            status: BulkPayableItemStatus$,
            updatedAt: z.string(),
            userRoles: UserRoles$.outboundSchema,
            workflowSubStatus: z.nullable(WorkflowSubStatus$).optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.attachmentId === undefined ? null : { attachmentId: v.attachmentId }),
                bulkPayableBatchId: v.bulkPayableBatchId,
                bulkPayableItemId: v.bulkPayableItemId,
                ...(v.bulkPayableItemMergeKey === undefined
                    ? null
                    : { bulkPayableItemMergeKey: v.bulkPayableItemMergeKey }),
                ...(v.bulkPayableItemReference === undefined
                    ? null
                    : { bulkPayableItemReference: v.bulkPayableItemReference }),
                clientId: v.clientId,
                ...(v.collaboratorEmail === undefined
                    ? null
                    : { collaboratorEmail: v.collaboratorEmail }),
                ...(v.collaboratorExternalId === undefined
                    ? null
                    : { collaboratorExternalId: v.collaboratorExternalId }),
                ...(v.collaboratorId === undefined ? null : { collaboratorId: v.collaboratorId }),
                createdAt: v.createdAt,
                dueDate: v.dueDate,
                eventActors: v.eventActors,
                ...(v.integration === undefined ? null : { integration: v.integration }),
                labels: v.labels,
                lineItemDescription: v.lineItemDescription,
                ...(v.lineItemDetail === undefined ? null : { lineItemDetail: v.lineItemDetail }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                paidDate: v.paidDate,
                ...(v.payableNotes === undefined ? null : { payableNotes: v.payableNotes }),
                payableStatus: v.payableStatus,
                ...(v.reimbursableExpense === undefined
                    ? null
                    : { reimbursableExpense: v.reimbursableExpense }),
                status: v.status,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
                ...(v.workflowSubStatus === undefined
                    ? null
                    : { workflowSubStatus: v.workflowSubStatus }),
            };
        });
}

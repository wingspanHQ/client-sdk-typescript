/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum EligibilityRequirementCreateRequestRequirementType {
    Signature = "Signature",
}

export type EligibilityRequirementCreateRequest = {
    requirementType: EligibilityRequirementCreateRequestRequirementType;
    templateId?: string | null | undefined;
    validFor?: number | null | undefined;
};

/** @internal */
export const EligibilityRequirementCreateRequestRequirementType$ = z.nativeEnum(
    EligibilityRequirementCreateRequestRequirementType
);

/** @internal */
export namespace EligibilityRequirementCreateRequest$ {
    export type Inbound = {
        requirementType: EligibilityRequirementCreateRequestRequirementType;
        templateId?: string | null | undefined;
        validFor?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        EligibilityRequirementCreateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            requirementType: EligibilityRequirementCreateRequestRequirementType$,
            templateId: z.nullable(z.string()).optional(),
            validFor: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                requirementType: v.requirementType,
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                ...(v.validFor === undefined ? null : { validFor: v.validFor }),
            };
        });

    export type Outbound = {
        requirementType: EligibilityRequirementCreateRequestRequirementType;
        templateId?: string | null | undefined;
        validFor?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EligibilityRequirementCreateRequest
    > = z
        .object({
            requirementType: EligibilityRequirementCreateRequestRequirementType$,
            templateId: z.nullable(z.string()).optional(),
            validFor: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                requirementType: v.requirementType,
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                ...(v.validFor === undefined ? null : { validFor: v.validFor }),
            };
        });
}

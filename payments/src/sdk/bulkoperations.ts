/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";

export class BulkOperations extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Initiate a New Bulk Invoice Batch
     *
     * @remarks
     * Creates a new batch for importing multiple invoices at once, streamlining the bulk invoicing operations.
     */
    async create(
        input: shared.BulkInvoiceBatchCreate | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateInvoiceBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.BulkInvoiceBatchCreate$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/payments/bulk/invoice/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateInvoiceBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkInvoiceBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Add a new item to a specific bulk payable batch
     *
     * @remarks
     * Allows for the creation and addition of a new individual payable item into an existing bulk payable batch. This enhances batch management and payable tracking.
     */
    async createBatchItem(
        input: operations.CreatePayableBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.CreatePayableBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreatePayableBatchItemRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkPayableItemCreate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreatePayableBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create a new bulk client batch
     *
     * @remarks
     * Initiates the creation of a fresh bulk client batch, streamlining the process of adding multiple clients in one go.
     */
    async createClient(
        input: shared.BulkBatchCreate | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateClientBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.BulkBatchCreate$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/payments/bulk/client/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateClientBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkClientBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Add a New Item to a Client Batch
     *
     * @remarks
     * Inserts a new item into the specified bulk client batch, allowing for further expansion of client data within the batch.
     */
    async createClientItem(
        input: operations.CreateClientBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.CreateClientBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreateClientBatchItemRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkClientItemCreate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/client/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateClientBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkClientItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Initiate a new bulk collaborator batch.
     *
     * @remarks
     * Enables the creation of a new bulk collaborator batch, facilitating the bulk management and addition of collaborators for various projects or tasks.
     */
    async createCollaborator(
        input: shared.BulkBatchCreate | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateCollaboratorBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.BulkBatchCreate$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateCollaboratorBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkCollaboratorBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Initiate a New Bulk Payable Batch
     *
     * @remarks
     * Creates a new batch for importing multiple payables at once, streamlining the bulk payment operations.
     */
    async createPayable(
        input: shared.BulkPayableBatchCreate | undefined,
        options?: RequestOptions
    ): Promise<operations.CreatePayableBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.BulkPayableBatchCreate$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreatePayableBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Append a new item to a specific collaborator batch
     *
     * @remarks
     * Allows for the addition of a new item to an existing batch of collaborators by providing the batchs unique identifier and item details.
     */
    async createSpecificCollaboratorItem(
        input: operations.CreateSpecificCollaboratorBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.CreateSpecificCollaboratorBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.CreateSpecificCollaboratorBatchItemRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkCollaboratorItemCreate, {
            explode: true,
        });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.CreateSpecificCollaboratorBatchItemResponse$.inboundSchema.parse({
                    ...responseFields$,
                    BulkCollaboratorItem: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Add a new item to a specific bulk invoice batch
     *
     * @remarks
     * Allows users to append a new item to a given batch of bulk invoices by supplying its unique batch identifier and the details of the new item.
     */
    async createSpecificInvoice(
        input: operations.CreateSpecificInvoiceBatchRequest,
        options?: RequestOptions
    ): Promise<operations.CreateSpecificInvoiceBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreateSpecificInvoiceBatchRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkInvoiceItemCreate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/invoice/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateSpecificInvoiceBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkInvoiceItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Remove a Specific Collaborator Batch
     *
     * @remarks
     * Deletes a specific bulk collaborator batch using its unique identifier. Once deleted, the batch cannot be recovered.
     */
    async deleteCollaborator(
        input: operations.DeleteCollaboratorBatchRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteCollaboratorBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.DeleteCollaboratorBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DeleteCollaboratorBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkCollaboratorBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Remove a Specific Bulk Payable Batch
     *
     * @remarks
     * Deletes a specific batch for bulk payables, using the provided batch ID, preventing any further operations on it.
     */
    async deletePayable(
        input: operations.DeletePayableBatchRequest,
        options?: RequestOptions
    ): Promise<operations.DeletePayableBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.DeletePayableBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DeletePayableBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve details of a specific bulk invoice batch
     *
     * @remarks
     * Allows for the retrieval of a specified batch of bulk invoices by providing its unique batch identifier.
     */
    async get(
        input: operations.GetInvoiceBatchRequest,
        options?: RequestOptions
    ): Promise<operations.GetInvoiceBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetInvoiceBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/invoice/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetInvoiceBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkInvoiceBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Fetch the import summary for a specific bulk payable batch
     *
     * @remarks
     * Provides an overview and summary of the import process for a given bulk payable batch, allowing for tracking of imported items, errors, and other relevant batch statistics.
     */
    async getBatchItem(
        input: operations.GetPayableBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.GetPayableBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPayableBatchItemRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/payable/batch/{batchId}/import-summary"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPayableBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableImportSummary: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Fetch Details of a Specific Item from a Client Batch
     *
     * @remarks
     * Retrieves the detailed information of a specific item within the bulk client batch using both batch and item unique identifiers.
     */
    async getClient(
        input: operations.GetClientBatchRequest,
        options?: RequestOptions
    ): Promise<operations.GetClientBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetClientBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/client/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetClientBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkClientBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Fetch Details of a Specific Item from a Client Batch
     *
     * @remarks
     * Retrieves the detailed information of a specific item within the bulk client batch using both batch and item unique identifiers.
     */
    async getClientItem(
        input: operations.GetClientBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.GetClientBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetClientBatchItemRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/client/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetClientBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkClientItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve Details of a Specific Collaborator Batch
     *
     * @remarks
     * Fetches detailed information of a specific bulk collaborator batch, using the provided batch ID.
     */
    async getCollaborator(
        input: operations.GetCollaboratorBatchRequest,
        options?: RequestOptions
    ): Promise<operations.GetCollaboratorBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetCollaboratorBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCollaboratorBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkCollaboratorBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve Details of a Specific Bulk Payable Batch
     *
     * @remarks
     * Fetches detailed information of a specific batch created for bulk payables, using the provided batch ID.
     */
    async getPayable(
        input: operations.GetPayableBatchRequest,
        options?: RequestOptions
    ): Promise<operations.GetPayableBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPayableBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPayableBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve a Specific Item from a Bulk Payable Batch
     *
     * @remarks
     * Fetches detailed information of a specific item within a bulk payable batch, using both the batch ID and the item ID.
     */
    async getSpecific(
        input: operations.GetSpecificPayableBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.GetSpecificPayableBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetSpecificPayableBatchItemRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/payable/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetSpecificPayableBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve details of a specific item from a collaborator batch
     *
     * @remarks
     * Enables fetching of detailed information about an individual item from a specified batch of collaborators using both the batch and item unique identifiers.
     */
    async getSpecificCollaboratorItem(
        input: operations.GetSpecificCollaboratorBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.GetSpecificCollaboratorBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetSpecificCollaboratorBatchItemRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/collaborator/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetSpecificCollaboratorBatchItemResponse$.inboundSchema.parse(
                {
                    ...responseFields$,
                    BulkCollaboratorItem: responseBody,
                }
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve a specific item from a bulk invoice batch
     *
     * @remarks
     * Fetches detailed information about a specific item located within a designated bulk invoice batch. Useful for obtaining particular item data without browsing the entire batch.
     */
    async getSpecificInvoice(
        input: operations.GetSpecificInvoiceBatchRequest,
        options?: RequestOptions
    ): Promise<operations.GetSpecificInvoiceBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetSpecificInvoiceBatchRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/invoice/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetSpecificInvoiceBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkInvoiceItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve All Bulk Invoice Batches
     *
     * @remarks
     * Fetches a list of all the batches created for bulk invoices, providing an overview of the bulk invoicing operations.
     */
    async list(options?: RequestOptions): Promise<operations.ListInvoiceBatchesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/payments/bulk/invoice/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListInvoiceBatchesResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve all items from a specific bulk payable batch
     *
     * @remarks
     * Fetches and lists all individual payable items associated with a specified bulk payable batch. Useful for tracking and verifying batch details.
     */
    async listBatchItem(
        input: operations.ListPayableBatchItemsRequest,
        options?: RequestOptions
    ): Promise<operations.ListPayableBatchItemsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListPayableBatchItemsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListPayableBatchItemsResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve all bulk client batches
     *
     * @remarks
     * Provides an overview of all existing bulk client batches, allowing users to quickly ascertain and manage batches created for the purpose of client onboarding or import.
     */
    async listClient(options?: RequestOptions): Promise<operations.ListClientBatchesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/payments/bulk/client/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListClientBatchesResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve All Items from a Client Batch
     *
     * @remarks
     * Fetches all items present in the specified bulk client batch, providing a comprehensive view of all client data in the batch.
     */
    async listClientItem(
        input: operations.ListClientBatchItemsRequest,
        options?: RequestOptions
    ): Promise<operations.ListClientBatchItemsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListClientBatchItemsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/client/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListClientBatchItemsResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Fetch all bulk collaborator batches
     *
     * @remarks
     * Provides a list of all existing bulk collaborator batches, allowing users to view and manage batches that have been created for collaboration purposes.
     */
    async listCollaborator(
        options?: RequestOptions
    ): Promise<operations.ListCollaboratorBatchesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListCollaboratorBatchesResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve All Bulk Payable Batches
     *
     * @remarks
     * Fetches a list of all the batches created for bulk payables, providing an overview of the bulk payment operations.
     */
    async listPayable(options?: RequestOptions): Promise<operations.ListPayableBatchesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch")();

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListPayableBatchesResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retrieve all items from a specific collaborator batch
     *
     * @remarks
     * Provides a comprehensive list of items present within a specified batch of collaborators, identifiable through its unique batch identifier.
     */
    async listSpecificCollaboratorItem(
        input: operations.ListSpecificCollaboratorBatchItemsRequest,
        options?: RequestOptions
    ): Promise<operations.ListSpecificCollaboratorBatchItemsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.ListSpecificCollaboratorBatchItemsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ListSpecificCollaboratorBatchItemsResponse$.inboundSchema.parse({
                    ...responseFields$,
                    classes: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Fetch all items from a specific bulk invoice batch
     *
     * @remarks
     * Provides a list of all the items within a specified batch of bulk invoices, identified by its unique batch identifier.
     */
    async listSpecificInvoice(
        input: operations.ListSpecificInvoiceBatchesRequest,
        options?: RequestOptions
    ): Promise<operations.ListSpecificInvoiceBatchesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListSpecificInvoiceBatchesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/invoice/batch/{batchId}/item")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListSpecificInvoiceBatchesResponse$.inboundSchema.parse({
                ...responseFields$,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify the details of a specific bulk invoice batch
     *
     * @remarks
     * Enables the user to update or modify the attributes of a given batch of bulk invoices by specifying its unique batch identifier.
     */
    async update(
        input: operations.UpdateInvoiceBatchRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateInvoiceBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateInvoiceBatchRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkInvoiceBatchUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/invoice/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateInvoiceBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkInvoiceBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify Details of a Specific Item in a Client Batch
     *
     * @remarks
     * Allows modification of the details of a specific item within the bulk client batch, using the provided item and batch identifiers.
     */
    async updateClient(
        input: operations.UpdateClientBatchRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateClientBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateClientBatchRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkBatchUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/client/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateClientBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkClientBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify Details of a Specific Item in a Client Batch
     *
     * @remarks
     * Allows modification of the details of a specific item within the bulk client batch, using the provided item and batch identifiers.
     */
    async updateClientItem(
        input: operations.UpdateClientBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateClientBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateClientBatchItemRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkClientItemUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/client/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateClientBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkClientItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify Details of a Bulk Collaborator Batch
     *
     * @remarks
     * Allows for updating or altering the details and items within a specific bulk collaborator batch using the given batch ID.
     */
    async updateCollaborator(
        input: operations.UpdateCollaboratorBatchRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateCollaboratorBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateCollaboratorBatchRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkBatchUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/collaborator/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateCollaboratorBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkCollaboratorBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify a Specific Bulk Payable Batch
     *
     * @remarks
     * Updates the information or items of a specific bulk payable batch, given its unique batch ID.
     */
    async updatePayable(
        input: operations.UpdatePayableBatchRequest,
        options?: RequestOptions
    ): Promise<operations.UpdatePayableBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdatePayableBatchRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkPayableBatchUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/payments/bulk/payable/batch/{batchId}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdatePayableBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableBatch: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify a Specific Item in a Bulk Payable Batch
     *
     * @remarks
     * Updates the details or status of a specific item within a bulk payable batch, given both the batch ID and the item ID.
     */
    async updateSpecific(
        input: operations.UpdateSpecificPayableBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateSpecificPayableBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.UpdateSpecificPayableBatchItemRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkPayableItemUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/payable/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateSpecificPayableBatchItemResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkPayableItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify the details of a specific item within a collaborator batch
     *
     * @remarks
     * Provides the functionality to update or alter the attributes of an item present in a given collaborator batch using the unique identifiers for both the batch and the item.
     */
    async updateSpecificCollaboratorItem(
        input: operations.UpdateSpecificCollaboratorBatchItemRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateSpecificCollaboratorBatchItemResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.UpdateSpecificCollaboratorBatchItemRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkCollaboratorItemUpdate, {
            explode: true,
        });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/collaborator/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.UpdateSpecificCollaboratorBatchItemResponse$.inboundSchema.parse({
                    ...responseFields$,
                    BulkCollaboratorItem: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Modify a specific item within a bulk invoice batch
     *
     * @remarks
     * Allows for updates or edits to be made to a specific items details within an existing bulk invoice batch. Enhances the flexibility and management of invoice data.
     */
    async updateSpecificInvoice(
        input: operations.UpdateSpecificInvoiceBatchRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateSpecificInvoiceBatchResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateSpecificInvoiceBatchRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.BulkInvoiceItemUpdate, { explode: true });

        const pathParams$ = {
            batchId: enc$.encodeSimple("batchId", payload$.batchId, {
                explode: false,
                charEncoding: "percent",
            }),
            batchItemId: enc$.encodeSimple("batchItemId", payload$.batchItemId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/payments/bulk/invoice/batch/{batchId}/item/{batchItemId}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateSpecificInvoiceBatchResponse$.inboundSchema.parse({
                ...responseFields$,
                BulkInvoiceItem: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClientInvoice, ClientInvoice$ } from "./clientinvoice";
import { Frequency, Frequency$ } from "./frequency";
import { ScheduleDate, ScheduleDate$ } from "./scheduledate";
import { z } from "zod";

export enum ClientInvoiceTemplateStatus {
    Active = "Active",
    Draft = "Draft",
    Expired = "Expired",
    Cancelled = "Cancelled",
}

export type ClientInvoiceTemplate = {
    accountId?: string | null | undefined;
    clientId: string;
    createdAt: string;
    createdInvoiceId?: string | null | undefined;
    dueInDays?: number | null | undefined;
    frequency?: Frequency | null | undefined;
    invoiceData: ClientInvoice;
    invoiceTemplateId: string;
    memberId: string;
    nextInvoiceDate: string;
    paymentMethodId?: string | null | undefined;
    scheduleDates: Array<ScheduleDate>;
    status: ClientInvoiceTemplateStatus;
    updatedAt: string;
};

/** @internal */
export const ClientInvoiceTemplateStatus$ = z.nativeEnum(ClientInvoiceTemplateStatus);

/** @internal */
export namespace ClientInvoiceTemplate$ {
    export type Inbound = {
        accountId?: string | null | undefined;
        clientId: string;
        createdAt: string;
        createdInvoiceId?: string | null | undefined;
        dueInDays?: number | null | undefined;
        frequency?: Frequency$.Inbound | null | undefined;
        invoiceData: ClientInvoice$.Inbound;
        invoiceTemplateId: string;
        memberId: string;
        nextInvoiceDate: string;
        paymentMethodId?: string | null | undefined;
        scheduleDates: Array<ScheduleDate$.Inbound>;
        status: ClientInvoiceTemplateStatus;
        updatedAt: string;
    };

    export const inboundSchema: z.ZodType<ClientInvoiceTemplate, z.ZodTypeDef, Inbound> = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            clientId: z.string(),
            createdAt: z.string(),
            createdInvoiceId: z.nullable(z.string()).optional(),
            dueInDays: z.nullable(z.number()).optional(),
            frequency: z.nullable(Frequency$.inboundSchema).optional(),
            invoiceData: ClientInvoice$.inboundSchema,
            invoiceTemplateId: z.string(),
            memberId: z.string(),
            nextInvoiceDate: z.string(),
            paymentMethodId: z.nullable(z.string()).optional(),
            scheduleDates: z.array(ScheduleDate$.inboundSchema),
            status: ClientInvoiceTemplateStatus$,
            updatedAt: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                clientId: v.clientId,
                createdAt: v.createdAt,
                ...(v.createdInvoiceId === undefined
                    ? null
                    : { createdInvoiceId: v.createdInvoiceId }),
                ...(v.dueInDays === undefined ? null : { dueInDays: v.dueInDays }),
                ...(v.frequency === undefined ? null : { frequency: v.frequency }),
                invoiceData: v.invoiceData,
                invoiceTemplateId: v.invoiceTemplateId,
                memberId: v.memberId,
                nextInvoiceDate: v.nextInvoiceDate,
                ...(v.paymentMethodId === undefined
                    ? null
                    : { paymentMethodId: v.paymentMethodId }),
                scheduleDates: v.scheduleDates,
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        accountId?: string | null | undefined;
        clientId: string;
        createdAt: string;
        createdInvoiceId?: string | null | undefined;
        dueInDays?: number | null | undefined;
        frequency?: Frequency$.Outbound | null | undefined;
        invoiceData: ClientInvoice$.Outbound;
        invoiceTemplateId: string;
        memberId: string;
        nextInvoiceDate: string;
        paymentMethodId?: string | null | undefined;
        scheduleDates: Array<ScheduleDate$.Outbound>;
        status: ClientInvoiceTemplateStatus;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClientInvoiceTemplate> = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            clientId: z.string(),
            createdAt: z.string(),
            createdInvoiceId: z.nullable(z.string()).optional(),
            dueInDays: z.nullable(z.number()).optional(),
            frequency: z.nullable(Frequency$.outboundSchema).optional(),
            invoiceData: ClientInvoice$.outboundSchema,
            invoiceTemplateId: z.string(),
            memberId: z.string(),
            nextInvoiceDate: z.string(),
            paymentMethodId: z.nullable(z.string()).optional(),
            scheduleDates: z.array(ScheduleDate$.outboundSchema),
            status: ClientInvoiceTemplateStatus$,
            updatedAt: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                clientId: v.clientId,
                createdAt: v.createdAt,
                ...(v.createdInvoiceId === undefined
                    ? null
                    : { createdInvoiceId: v.createdInvoiceId }),
                ...(v.dueInDays === undefined ? null : { dueInDays: v.dueInDays }),
                ...(v.frequency === undefined ? null : { frequency: v.frequency }),
                invoiceData: v.invoiceData,
                invoiceTemplateId: v.invoiceTemplateId,
                memberId: v.memberId,
                nextInvoiceDate: v.nextInvoiceDate,
                ...(v.paymentMethodId === undefined
                    ? null
                    : { paymentMethodId: v.paymentMethodId }),
                scheduleDates: v.scheduleDates,
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum RequirementType {
    Signature = "Signature",
}

export type EligibilityRequirement = {
    clientId: string;
    eligibilityRequirementId: string;
    requirementType: RequirementType;
    templateId?: string | null | undefined;
    validFor?: number | null | undefined;
};

/** @internal */
export const RequirementType$ = z.nativeEnum(RequirementType);

/** @internal */
export namespace EligibilityRequirement$ {
    export type Inbound = {
        clientId: string;
        eligibilityRequirementId: string;
        requirementType: RequirementType;
        templateId?: string | null | undefined;
        validFor?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<EligibilityRequirement, z.ZodTypeDef, Inbound> = z
        .object({
            clientId: z.string(),
            eligibilityRequirementId: z.string(),
            requirementType: RequirementType$,
            templateId: z.string().nullable().optional(),
            validFor: z.number().nullable().optional(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                eligibilityRequirementId: v.eligibilityRequirementId,
                requirementType: v.requirementType,
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                ...(v.validFor === undefined ? null : { validFor: v.validFor }),
            };
        });

    export type Outbound = {
        clientId: string;
        eligibilityRequirementId: string;
        requirementType: RequirementType;
        templateId?: string | null | undefined;
        validFor?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EligibilityRequirement> = z
        .object({
            clientId: z.string(),
            eligibilityRequirementId: z.string(),
            requirementType: RequirementType$,
            templateId: z.string().nullable().optional(),
            validFor: z.number().nullable().optional(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                eligibilityRequirementId: v.eligibilityRequirementId,
                requirementType: v.requirementType,
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                ...(v.validFor === undefined ? null : { validFor: v.validFor }),
            };
        });
}

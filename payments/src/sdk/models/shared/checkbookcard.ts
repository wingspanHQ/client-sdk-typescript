/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

export const Brand = {
  AmericanExpress: "AmericanExpress",
  Visa: "Visa",
  Mastercard: "Mastercard",
  Discover: "Discover",
  DinersClub: "DinersClub",
  Jcb: "JCB",
} as const;
export type Brand = ClosedEnum<typeof Brand>;

export type CheckbookCard = {
  address: Address;
  brand: Brand;
  cardId: string;
  expirationMM: string;
  expirationYYYY: string;
  last4: string;
};

/** @internal */
export const Brand$inboundSchema: z.ZodNativeEnum<typeof Brand> = z.nativeEnum(
  Brand,
);

/** @internal */
export const Brand$outboundSchema: z.ZodNativeEnum<typeof Brand> =
  Brand$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Brand$ {
  /** @deprecated use `Brand$inboundSchema` instead. */
  export const inboundSchema = Brand$inboundSchema;
  /** @deprecated use `Brand$outboundSchema` instead. */
  export const outboundSchema = Brand$outboundSchema;
}

/** @internal */
export const CheckbookCard$inboundSchema: z.ZodType<
  CheckbookCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: Address$inboundSchema,
  brand: Brand$inboundSchema,
  cardId: z.string(),
  expirationMM: z.string(),
  expirationYYYY: z.string(),
  last4: z.string(),
});

/** @internal */
export type CheckbookCard$Outbound = {
  address: Address$Outbound;
  brand: string;
  cardId: string;
  expirationMM: string;
  expirationYYYY: string;
  last4: string;
};

/** @internal */
export const CheckbookCard$outboundSchema: z.ZodType<
  CheckbookCard$Outbound,
  z.ZodTypeDef,
  CheckbookCard
> = z.object({
  address: Address$outboundSchema,
  brand: Brand$outboundSchema,
  cardId: z.string(),
  expirationMM: z.string(),
  expirationYYYY: z.string(),
  last4: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckbookCard$ {
  /** @deprecated use `CheckbookCard$inboundSchema` instead. */
  export const inboundSchema = CheckbookCard$inboundSchema;
  /** @deprecated use `CheckbookCard$outboundSchema` instead. */
  export const outboundSchema = CheckbookCard$outboundSchema;
  /** @deprecated use `CheckbookCard$Outbound` instead. */
  export type Outbound = CheckbookCard$Outbound;
}

export function checkbookCardToJSON(checkbookCard: CheckbookCard): string {
  return JSON.stringify(CheckbookCard$outboundSchema.parse(checkbookCard));
}

export function checkbookCardFromJSON(
  jsonString: string,
): SafeParseResult<CheckbookCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckbookCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckbookCard' from JSON`,
  );
}

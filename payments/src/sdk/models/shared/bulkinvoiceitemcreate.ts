/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FeeHandlingConfig, FeeHandlingConfig$ } from "./feehandlingconfig";
import { z } from "zod";

export enum BulkInvoiceItemCreateAcceptedPaymentMethods {
    Credit = "Credit",
    Ach = "ACH",
    Manual = "Manual",
    LessThanNilGreaterThan = "<nil>",
}

export enum BulkInvoiceItemCreateInvoiceStatus {
    Draft = "Draft",
    Open = "Open",
    Approved = "Approved",
    Paid = "Paid",
    Cancelled = "Cancelled",
}

export type BulkInvoiceItemCreate = {
    acceptedPaymentMethods?: Array<BulkInvoiceItemCreateAcceptedPaymentMethods> | null | undefined;
    amount: number;
    bulkInvoiceBatchId: string;
    bulkInvoiceItemMergeKey?: string | null | undefined;
    bulkInvoiceItemReference?: string | null | undefined;
    clientEmail?: string | null | undefined;
    clientExternalId?: string | null | undefined;
    creditFeeHandling?: FeeHandlingConfig | null | undefined;
    dueDate: string;
    invoiceNotes?: string | null | undefined;
    invoiceStatus: BulkInvoiceItemCreateInvoiceStatus;
    labels?: Record<string, string> | null | undefined;
    lineItemDescription: string;
    lineItemDetail?: string | null | undefined;
    memberClientId?: string | null | undefined;
    paidDate?: string | null | undefined;
    projectName?: string | null | undefined;
    reimbursableExpense?: boolean | null | undefined;
    sendDate?: string | null | undefined;
};

/** @internal */
export const BulkInvoiceItemCreateAcceptedPaymentMethods$ = z.nativeEnum(
    BulkInvoiceItemCreateAcceptedPaymentMethods
);

/** @internal */
export const BulkInvoiceItemCreateInvoiceStatus$ = z.nativeEnum(BulkInvoiceItemCreateInvoiceStatus);

/** @internal */
export namespace BulkInvoiceItemCreate$ {
    export type Inbound = {
        acceptedPaymentMethods?:
            | Array<BulkInvoiceItemCreateAcceptedPaymentMethods>
            | null
            | undefined;
        amount: number;
        bulkInvoiceBatchId: string;
        bulkInvoiceItemMergeKey?: string | null | undefined;
        bulkInvoiceItemReference?: string | null | undefined;
        clientEmail?: string | null | undefined;
        clientExternalId?: string | null | undefined;
        creditFeeHandling?: FeeHandlingConfig$.Inbound | null | undefined;
        dueDate: string;
        invoiceNotes?: string | null | undefined;
        invoiceStatus: BulkInvoiceItemCreateInvoiceStatus;
        labels?: Record<string, string> | null | undefined;
        lineItemDescription: string;
        lineItemDetail?: string | null | undefined;
        memberClientId?: string | null | undefined;
        paidDate?: string | null | undefined;
        projectName?: string | null | undefined;
        reimbursableExpense?: boolean | null | undefined;
        sendDate?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<BulkInvoiceItemCreate, z.ZodTypeDef, Inbound> = z
        .object({
            acceptedPaymentMethods: z
                .nullable(z.array(BulkInvoiceItemCreateAcceptedPaymentMethods$))
                .optional(),
            amount: z.number(),
            bulkInvoiceBatchId: z.string(),
            bulkInvoiceItemMergeKey: z.nullable(z.string()).optional(),
            bulkInvoiceItemReference: z.nullable(z.string()).optional(),
            clientEmail: z.nullable(z.string()).optional(),
            clientExternalId: z.nullable(z.string()).optional(),
            creditFeeHandling: z.nullable(FeeHandlingConfig$.inboundSchema).optional(),
            dueDate: z.string(),
            invoiceNotes: z.nullable(z.string()).optional(),
            invoiceStatus: BulkInvoiceItemCreateInvoiceStatus$,
            labels: z.nullable(z.record(z.string())).optional(),
            lineItemDescription: z.string(),
            lineItemDetail: z.nullable(z.string()).optional(),
            memberClientId: z.nullable(z.string()).optional(),
            paidDate: z.nullable(z.string()).optional(),
            projectName: z.nullable(z.string()).optional(),
            reimbursableExpense: z.nullable(z.boolean()).optional(),
            sendDate: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.acceptedPaymentMethods === undefined
                    ? null
                    : { acceptedPaymentMethods: v.acceptedPaymentMethods }),
                amount: v.amount,
                bulkInvoiceBatchId: v.bulkInvoiceBatchId,
                ...(v.bulkInvoiceItemMergeKey === undefined
                    ? null
                    : { bulkInvoiceItemMergeKey: v.bulkInvoiceItemMergeKey }),
                ...(v.bulkInvoiceItemReference === undefined
                    ? null
                    : { bulkInvoiceItemReference: v.bulkInvoiceItemReference }),
                ...(v.clientEmail === undefined ? null : { clientEmail: v.clientEmail }),
                ...(v.clientExternalId === undefined
                    ? null
                    : { clientExternalId: v.clientExternalId }),
                ...(v.creditFeeHandling === undefined
                    ? null
                    : { creditFeeHandling: v.creditFeeHandling }),
                dueDate: v.dueDate,
                ...(v.invoiceNotes === undefined ? null : { invoiceNotes: v.invoiceNotes }),
                invoiceStatus: v.invoiceStatus,
                ...(v.labels === undefined ? null : { labels: v.labels }),
                lineItemDescription: v.lineItemDescription,
                ...(v.lineItemDetail === undefined ? null : { lineItemDetail: v.lineItemDetail }),
                ...(v.memberClientId === undefined ? null : { memberClientId: v.memberClientId }),
                ...(v.paidDate === undefined ? null : { paidDate: v.paidDate }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.reimbursableExpense === undefined
                    ? null
                    : { reimbursableExpense: v.reimbursableExpense }),
                ...(v.sendDate === undefined ? null : { sendDate: v.sendDate }),
            };
        });

    export type Outbound = {
        acceptedPaymentMethods?:
            | Array<BulkInvoiceItemCreateAcceptedPaymentMethods>
            | null
            | undefined;
        amount: number;
        bulkInvoiceBatchId: string;
        bulkInvoiceItemMergeKey?: string | null | undefined;
        bulkInvoiceItemReference?: string | null | undefined;
        clientEmail?: string | null | undefined;
        clientExternalId?: string | null | undefined;
        creditFeeHandling?: FeeHandlingConfig$.Outbound | null | undefined;
        dueDate: string;
        invoiceNotes?: string | null | undefined;
        invoiceStatus: BulkInvoiceItemCreateInvoiceStatus;
        labels?: Record<string, string> | null | undefined;
        lineItemDescription: string;
        lineItemDetail?: string | null | undefined;
        memberClientId?: string | null | undefined;
        paidDate?: string | null | undefined;
        projectName?: string | null | undefined;
        reimbursableExpense?: boolean | null | undefined;
        sendDate?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BulkInvoiceItemCreate> = z
        .object({
            acceptedPaymentMethods: z
                .nullable(z.array(BulkInvoiceItemCreateAcceptedPaymentMethods$))
                .optional(),
            amount: z.number(),
            bulkInvoiceBatchId: z.string(),
            bulkInvoiceItemMergeKey: z.nullable(z.string()).optional(),
            bulkInvoiceItemReference: z.nullable(z.string()).optional(),
            clientEmail: z.nullable(z.string()).optional(),
            clientExternalId: z.nullable(z.string()).optional(),
            creditFeeHandling: z.nullable(FeeHandlingConfig$.outboundSchema).optional(),
            dueDate: z.string(),
            invoiceNotes: z.nullable(z.string()).optional(),
            invoiceStatus: BulkInvoiceItemCreateInvoiceStatus$,
            labels: z.nullable(z.record(z.string())).optional(),
            lineItemDescription: z.string(),
            lineItemDetail: z.nullable(z.string()).optional(),
            memberClientId: z.nullable(z.string()).optional(),
            paidDate: z.nullable(z.string()).optional(),
            projectName: z.nullable(z.string()).optional(),
            reimbursableExpense: z.nullable(z.boolean()).optional(),
            sendDate: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.acceptedPaymentMethods === undefined
                    ? null
                    : { acceptedPaymentMethods: v.acceptedPaymentMethods }),
                amount: v.amount,
                bulkInvoiceBatchId: v.bulkInvoiceBatchId,
                ...(v.bulkInvoiceItemMergeKey === undefined
                    ? null
                    : { bulkInvoiceItemMergeKey: v.bulkInvoiceItemMergeKey }),
                ...(v.bulkInvoiceItemReference === undefined
                    ? null
                    : { bulkInvoiceItemReference: v.bulkInvoiceItemReference }),
                ...(v.clientEmail === undefined ? null : { clientEmail: v.clientEmail }),
                ...(v.clientExternalId === undefined
                    ? null
                    : { clientExternalId: v.clientExternalId }),
                ...(v.creditFeeHandling === undefined
                    ? null
                    : { creditFeeHandling: v.creditFeeHandling }),
                dueDate: v.dueDate,
                ...(v.invoiceNotes === undefined ? null : { invoiceNotes: v.invoiceNotes }),
                invoiceStatus: v.invoiceStatus,
                ...(v.labels === undefined ? null : { labels: v.labels }),
                lineItemDescription: v.lineItemDescription,
                ...(v.lineItemDetail === undefined ? null : { lineItemDetail: v.lineItemDetail }),
                ...(v.memberClientId === undefined ? null : { memberClientId: v.memberClientId }),
                ...(v.paidDate === undefined ? null : { paidDate: v.paidDate }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.reimbursableExpense === undefined
                    ? null
                    : { reimbursableExpense: v.reimbursableExpense }),
                ...(v.sendDate === undefined ? null : { sendDate: v.sendDate }),
            };
        });
}

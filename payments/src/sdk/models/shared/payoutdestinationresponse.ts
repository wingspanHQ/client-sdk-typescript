/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PayoutDestinationResponseDestinationType {
    Account = "Account",
    Card = "Card",
    WeGift = "WeGift",
}

export enum PayoutDestinationResponsePayoutMethod {
    Standard = "Standard",
    Instant = "Instant",
    Expedited = "Expedited",
    Check = "Check",
    ECheck = "ECheck",
}

export type PayoutDestinationResponse = {
    destinationId: string;
    destinationType: PayoutDestinationResponseDestinationType;
    last4?: string | null | undefined;
    name: string;
    payoutMethod: PayoutDestinationResponsePayoutMethod;
    percentage: number;
};

/** @internal */
export const PayoutDestinationResponseDestinationType$ = z.nativeEnum(
    PayoutDestinationResponseDestinationType
);

/** @internal */
export const PayoutDestinationResponsePayoutMethod$ = z.nativeEnum(
    PayoutDestinationResponsePayoutMethod
);

/** @internal */
export namespace PayoutDestinationResponse$ {
    export type Inbound = {
        destinationId: string;
        destinationType: PayoutDestinationResponseDestinationType;
        last4?: string | null | undefined;
        name: string;
        payoutMethod: PayoutDestinationResponsePayoutMethod;
        percentage: number;
    };

    export const inboundSchema: z.ZodType<PayoutDestinationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            destinationId: z.string(),
            destinationType: PayoutDestinationResponseDestinationType$,
            last4: z.string().nullable().optional(),
            name: z.string(),
            payoutMethod: PayoutDestinationResponsePayoutMethod$,
            percentage: z.number(),
        })
        .transform((v) => {
            return {
                destinationId: v.destinationId,
                destinationType: v.destinationType,
                ...(v.last4 === undefined ? null : { last4: v.last4 }),
                name: v.name,
                payoutMethod: v.payoutMethod,
                percentage: v.percentage,
            };
        });

    export type Outbound = {
        destinationId: string;
        destinationType: PayoutDestinationResponseDestinationType;
        last4?: string | null | undefined;
        name: string;
        payoutMethod: PayoutDestinationResponsePayoutMethod;
        percentage: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PayoutDestinationResponse> = z
        .object({
            destinationId: z.string(),
            destinationType: PayoutDestinationResponseDestinationType$,
            last4: z.string().nullable().optional(),
            name: z.string(),
            payoutMethod: PayoutDestinationResponsePayoutMethod$,
            percentage: z.number(),
        })
        .transform((v) => {
            return {
                destinationId: v.destinationId,
                destinationType: v.destinationType,
                ...(v.last4 === undefined ? null : { last4: v.last4 }),
                name: v.name,
                payoutMethod: v.payoutMethod,
                percentage: v.percentage,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum DeductionUpdateRequestCurrency {
    Usd = "USD",
    Cad = "CAD",
}

export enum DeductionUpdateRequestType {
    PrePayment = "PrePayment",
    PostPayment = "PostPayment",
}

export type DeductionUpdateRequest = {
    amount?: number | null | undefined;
    currency?: DeductionUpdateRequestCurrency | null | undefined;
    name?: string | null | undefined;
    priority?: number | null | undefined;
    sourceInvoiceId?: string | null | undefined;
    startDate?: string | null | undefined;
    type?: DeductionUpdateRequestType | null | undefined;
};

/** @internal */
export const DeductionUpdateRequestCurrency$ = z.nativeEnum(DeductionUpdateRequestCurrency);

/** @internal */
export const DeductionUpdateRequestType$ = z.nativeEnum(DeductionUpdateRequestType);

/** @internal */
export namespace DeductionUpdateRequest$ {
    export type Inbound = {
        amount?: number | null | undefined;
        currency?: DeductionUpdateRequestCurrency | null | undefined;
        name?: string | null | undefined;
        priority?: number | null | undefined;
        sourceInvoiceId?: string | null | undefined;
        startDate?: string | null | undefined;
        type?: DeductionUpdateRequestType | null | undefined;
    };

    export const inboundSchema: z.ZodType<DeductionUpdateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.nullable(z.number()).optional(),
            currency: z.nullable(DeductionUpdateRequestCurrency$).optional(),
            name: z.nullable(z.string()).optional(),
            priority: z.nullable(z.number()).optional(),
            sourceInvoiceId: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.string()).optional(),
            type: z.nullable(DeductionUpdateRequestType$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.sourceInvoiceId === undefined
                    ? null
                    : { sourceInvoiceId: v.sourceInvoiceId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        amount?: number | null | undefined;
        currency?: DeductionUpdateRequestCurrency | null | undefined;
        name?: string | null | undefined;
        priority?: number | null | undefined;
        sourceInvoiceId?: string | null | undefined;
        startDate?: string | null | undefined;
        type?: DeductionUpdateRequestType | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeductionUpdateRequest> = z
        .object({
            amount: z.nullable(z.number()).optional(),
            currency: z.nullable(DeductionUpdateRequestCurrency$).optional(),
            name: z.nullable(z.string()).optional(),
            priority: z.nullable(z.number()).optional(),
            sourceInvoiceId: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.string()).optional(),
            type: z.nullable(DeductionUpdateRequestType$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.sourceInvoiceId === undefined
                    ? null
                    : { sourceInvoiceId: v.sourceInvoiceId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

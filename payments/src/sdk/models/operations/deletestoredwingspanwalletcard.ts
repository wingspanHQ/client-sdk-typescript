/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type DeleteStoredWingspanWalletCardRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type DeleteStoredWingspanWalletCardResponse = {
  /**
   * A card summary
   */
  card?: shared.Card | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DeleteStoredWingspanWalletCardRequest$inboundSchema: z.ZodType<
  DeleteStoredWingspanWalletCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteStoredWingspanWalletCardRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteStoredWingspanWalletCardRequest$outboundSchema: z.ZodType<
  DeleteStoredWingspanWalletCardRequest$Outbound,
  z.ZodTypeDef,
  DeleteStoredWingspanWalletCardRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteStoredWingspanWalletCardRequest$ {
  /** @deprecated use `DeleteStoredWingspanWalletCardRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteStoredWingspanWalletCardRequest$inboundSchema;
  /** @deprecated use `DeleteStoredWingspanWalletCardRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteStoredWingspanWalletCardRequest$outboundSchema;
  /** @deprecated use `DeleteStoredWingspanWalletCardRequest$Outbound` instead. */
  export type Outbound = DeleteStoredWingspanWalletCardRequest$Outbound;
}

export function deleteStoredWingspanWalletCardRequestToJSON(
  deleteStoredWingspanWalletCardRequest: DeleteStoredWingspanWalletCardRequest,
): string {
  return JSON.stringify(
    DeleteStoredWingspanWalletCardRequest$outboundSchema.parse(
      deleteStoredWingspanWalletCardRequest,
    ),
  );
}

export function deleteStoredWingspanWalletCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteStoredWingspanWalletCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteStoredWingspanWalletCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteStoredWingspanWalletCardRequest' from JSON`,
  );
}

/** @internal */
export const DeleteStoredWingspanWalletCardResponse$inboundSchema: z.ZodType<
  DeleteStoredWingspanWalletCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Card: shared.Card$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "Card": "card",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteStoredWingspanWalletCardResponse$Outbound = {
  Card?: shared.Card$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DeleteStoredWingspanWalletCardResponse$outboundSchema: z.ZodType<
  DeleteStoredWingspanWalletCardResponse$Outbound,
  z.ZodTypeDef,
  DeleteStoredWingspanWalletCardResponse
> = z.object({
  card: shared.Card$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    card: "Card",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteStoredWingspanWalletCardResponse$ {
  /** @deprecated use `DeleteStoredWingspanWalletCardResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteStoredWingspanWalletCardResponse$inboundSchema;
  /** @deprecated use `DeleteStoredWingspanWalletCardResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteStoredWingspanWalletCardResponse$outboundSchema;
  /** @deprecated use `DeleteStoredWingspanWalletCardResponse$Outbound` instead. */
  export type Outbound = DeleteStoredWingspanWalletCardResponse$Outbound;
}

export function deleteStoredWingspanWalletCardResponseToJSON(
  deleteStoredWingspanWalletCardResponse:
    DeleteStoredWingspanWalletCardResponse,
): string {
  return JSON.stringify(
    DeleteStoredWingspanWalletCardResponse$outboundSchema.parse(
      deleteStoredWingspanWalletCardResponse,
    ),
  );
}

export function deleteStoredWingspanWalletCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteStoredWingspanWalletCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteStoredWingspanWalletCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteStoredWingspanWalletCardResponse' from JSON`,
  );
}

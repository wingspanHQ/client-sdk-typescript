/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum UserType {
    Member = "Member",
    Client = "Client",
}

export type PasswordResetRequest = {
    email: string;
    userType: UserType;
};

/** @internal */
export const UserType$ = z.nativeEnum(UserType);

/** @internal */
export namespace PasswordResetRequest$ {
    export type Inbound = {
        email: string;
        userType: UserType;
    };

    export const inboundSchema: z.ZodType<PasswordResetRequest, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            userType: UserType$,
        })
        .transform((v) => {
            return {
                email: v.email,
                userType: v.userType,
            };
        });

    export type Outbound = {
        email: string;
        userType: UserType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PasswordResetRequest> = z
        .object({
            email: z.string(),
            userType: UserType$,
        })
        .transform((v) => {
            return {
                email: v.email,
                userType: v.userType,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01,
  Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01$inboundSchema,
  Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01$Outbound,
  Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01$outboundSchema,
} from "./fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01.js";

export type InvoiceWithholdings = {
  tax?:
    | Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01
    | null
    | undefined;
};

/** @internal */
export const InvoiceWithholdings$inboundSchema: z.ZodType<
  InvoiceWithholdings,
  z.ZodTypeDef,
  unknown
> = z.object({
  tax: z.nullable(
    Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01$inboundSchema,
  ).optional(),
});

/** @internal */
export type InvoiceWithholdings$Outbound = {
  tax?:
    | Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01$Outbound
    | null
    | undefined;
};

/** @internal */
export const InvoiceWithholdings$outboundSchema: z.ZodType<
  InvoiceWithholdings$Outbound,
  z.ZodTypeDef,
  InvoiceWithholdings
> = z.object({
  tax: z.nullable(
    Fourteenabbd45a54a2847207e8ddfaeb5d4bc82ffb855d63772d79e0c5fe04e9b9b01$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceWithholdings$ {
  /** @deprecated use `InvoiceWithholdings$inboundSchema` instead. */
  export const inboundSchema = InvoiceWithholdings$inboundSchema;
  /** @deprecated use `InvoiceWithholdings$outboundSchema` instead. */
  export const outboundSchema = InvoiceWithholdings$outboundSchema;
  /** @deprecated use `InvoiceWithholdings$Outbound` instead. */
  export type Outbound = InvoiceWithholdings$Outbound;
}

export function invoiceWithholdingsToJSON(
  invoiceWithholdings: InvoiceWithholdings,
): string {
  return JSON.stringify(
    InvoiceWithholdings$outboundSchema.parse(invoiceWithholdings),
  );
}

export function invoiceWithholdingsFromJSON(
  jsonString: string,
): SafeParseResult<InvoiceWithholdings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvoiceWithholdings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvoiceWithholdings' from JSON`,
  );
}

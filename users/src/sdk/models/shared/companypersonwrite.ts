/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CompanyPersonWriteMember = {};

export type CompanyPersonWrite = {
    email: string;
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    member?: CompanyPersonWriteMember | null | undefined;
    memberId: string;
    ownershipPercentage?: number | null | undefined;
};

/** @internal */
export namespace CompanyPersonWriteMember$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<CompanyPersonWriteMember, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompanyPersonWriteMember> =
        z.object({});
}

/** @internal */
export namespace CompanyPersonWrite$ {
    export type Inbound = {
        email: string;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        member?: CompanyPersonWriteMember$.Inbound | null | undefined;
        memberId: string;
        ownershipPercentage?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<CompanyPersonWrite, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            member: z.nullable(z.lazy(() => CompanyPersonWriteMember$.inboundSchema)).optional(),
            memberId: z.string(),
            ownershipPercentage: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.member === undefined ? null : { member: v.member }),
                memberId: v.memberId,
                ...(v.ownershipPercentage === undefined
                    ? null
                    : { ownershipPercentage: v.ownershipPercentage }),
            };
        });

    export type Outbound = {
        email: string;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        member?: CompanyPersonWriteMember$.Outbound | null | undefined;
        memberId: string;
        ownershipPercentage?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompanyPersonWrite> = z
        .object({
            email: z.string(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            member: z.nullable(z.lazy(() => CompanyPersonWriteMember$.outboundSchema)).optional(),
            memberId: z.string(),
            ownershipPercentage: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.member === undefined ? null : { member: v.member }),
                memberId: v.memberId,
                ...(v.ownershipPercentage === undefined
                    ? null
                    : { ownershipPercentage: v.ownershipPercentage }),
            };
        });
}

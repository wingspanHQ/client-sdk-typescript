/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Ping = {
  code: number;
  message: string;
  status: string;
};

/** @internal */
export const Ping$inboundSchema: z.ZodType<Ping, z.ZodTypeDef, unknown> = z
  .object({
    code: z.number(),
    message: z.string(),
    status: z.string(),
  });

/** @internal */
export type Ping$Outbound = {
  code: number;
  message: string;
  status: string;
};

/** @internal */
export const Ping$outboundSchema: z.ZodType<Ping$Outbound, z.ZodTypeDef, Ping> =
  z.object({
    code: z.number(),
    message: z.string(),
    status: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ping$ {
  /** @deprecated use `Ping$inboundSchema` instead. */
  export const inboundSchema = Ping$inboundSchema;
  /** @deprecated use `Ping$outboundSchema` instead. */
  export const outboundSchema = Ping$outboundSchema;
  /** @deprecated use `Ping$Outbound` instead. */
  export type Outbound = Ping$Outbound;
}

export function pingToJSON(ping: Ping): string {
  return JSON.stringify(Ping$outboundSchema.parse(ping));
}

export function pingFromJSON(
  jsonString: string,
): SafeParseResult<Ping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ping' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum CompanyStructure {
    None = "None",
    SoleProprietorship = "SoleProprietorship",
    LlcSingleMember = "LlcSingleMember",
    LlcMultiMember = "LlcMultiMember",
    CorporationS = "CorporationS",
    LLCCorporationS = "LLCCorporationS",
    LLCCorporationC = "LLCCorporationC",
    LLCPartnership = "LLCPartnership",
    CorporationC = "CorporationC",
    Partnership = "Partnership",
}

export type CollaboratorV2FormW9Info = {
    addressLine1: string;
    addressLine2?: string | null | undefined;
    city: string;
    companyStructure: CompanyStructure;
    country: string;
    dob?: string | null | undefined;
    ein?: string | null | undefined;
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    legalBusinessName?: string | null | undefined;
    postalCode: string;
    ssnLastFour?: string | null | undefined;
    state: string;
};

/** @internal */
export const CompanyStructure$ = z.nativeEnum(CompanyStructure);

/** @internal */
export namespace CollaboratorV2FormW9Info$ {
    export type Inbound = {
        addressLine1: string;
        addressLine2?: string | null | undefined;
        city: string;
        companyStructure: CompanyStructure;
        country: string;
        dob?: string | null | undefined;
        ein?: string | null | undefined;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        legalBusinessName?: string | null | undefined;
        postalCode: string;
        ssnLastFour?: string | null | undefined;
        state: string;
    };

    export const inboundSchema: z.ZodType<CollaboratorV2FormW9Info, z.ZodTypeDef, Inbound> = z
        .object({
            addressLine1: z.string(),
            addressLine2: z.string().nullable().optional(),
            city: z.string(),
            companyStructure: CompanyStructure$,
            country: z.string(),
            dob: z.string().nullable().optional(),
            ein: z.string().nullable().optional(),
            firstName: z.string().nullable().optional(),
            lastName: z.string().nullable().optional(),
            legalBusinessName: z.string().nullable().optional(),
            postalCode: z.string(),
            ssnLastFour: z.string().nullable().optional(),
            state: z.string(),
        })
        .transform((v) => {
            return {
                addressLine1: v.addressLine1,
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                city: v.city,
                companyStructure: v.companyStructure,
                country: v.country,
                ...(v.dob === undefined ? null : { dob: v.dob }),
                ...(v.ein === undefined ? null : { ein: v.ein }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.legalBusinessName === undefined
                    ? null
                    : { legalBusinessName: v.legalBusinessName }),
                postalCode: v.postalCode,
                ...(v.ssnLastFour === undefined ? null : { ssnLastFour: v.ssnLastFour }),
                state: v.state,
            };
        });

    export type Outbound = {
        addressLine1: string;
        addressLine2?: string | null | undefined;
        city: string;
        companyStructure: CompanyStructure;
        country: string;
        dob?: string | null | undefined;
        ein?: string | null | undefined;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
        legalBusinessName?: string | null | undefined;
        postalCode: string;
        ssnLastFour?: string | null | undefined;
        state: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CollaboratorV2FormW9Info> = z
        .object({
            addressLine1: z.string(),
            addressLine2: z.string().nullable().optional(),
            city: z.string(),
            companyStructure: CompanyStructure$,
            country: z.string(),
            dob: z.string().nullable().optional(),
            ein: z.string().nullable().optional(),
            firstName: z.string().nullable().optional(),
            lastName: z.string().nullable().optional(),
            legalBusinessName: z.string().nullable().optional(),
            postalCode: z.string(),
            ssnLastFour: z.string().nullable().optional(),
            state: z.string(),
        })
        .transform((v) => {
            return {
                addressLine1: v.addressLine1,
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                city: v.city,
                companyStructure: v.companyStructure,
                country: v.country,
                ...(v.dob === undefined ? null : { dob: v.dob }),
                ...(v.ein === undefined ? null : { ein: v.ein }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.legalBusinessName === undefined
                    ? null
                    : { legalBusinessName: v.legalBusinessName }),
                postalCode: v.postalCode,
                ...(v.ssnLastFour === undefined ? null : { ssnLastFour: v.ssnLastFour }),
                state: v.state,
            };
        });
}

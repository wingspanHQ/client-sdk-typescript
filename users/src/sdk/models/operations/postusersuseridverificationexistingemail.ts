/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type PostUsersUserIdVerificationExistingEmailRequest = {
    beginExistingEmailVerificationRequest?:
        | shared.BeginExistingEmailVerificationRequest
        | undefined;
    /**
     * Unique identifier
     */
    id: string;
};

export type PostUsersUserIdVerificationExistingEmailResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Email Verification Status
     */
    emailVerificationResponse?: shared.EmailVerificationResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostUsersUserIdVerificationExistingEmailRequest$ {
    export type Inbound = {
        BeginExistingEmailVerificationRequest?:
            | shared.BeginExistingEmailVerificationRequest$.Inbound
            | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        PostUsersUserIdVerificationExistingEmailRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            BeginExistingEmailVerificationRequest:
                shared.BeginExistingEmailVerificationRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.BeginExistingEmailVerificationRequest === undefined
                    ? null
                    : {
                          beginExistingEmailVerificationRequest:
                              v.BeginExistingEmailVerificationRequest,
                      }),
                id: v.id,
            };
        });

    export type Outbound = {
        BeginExistingEmailVerificationRequest?:
            | shared.BeginExistingEmailVerificationRequest$.Outbound
            | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostUsersUserIdVerificationExistingEmailRequest
    > = z
        .object({
            beginExistingEmailVerificationRequest:
                shared.BeginExistingEmailVerificationRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.beginExistingEmailVerificationRequest === undefined
                    ? null
                    : {
                          BeginExistingEmailVerificationRequest:
                              v.beginExistingEmailVerificationRequest,
                      }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace PostUsersUserIdVerificationExistingEmailResponse$ {
    export type Inbound = {
        ContentType: string;
        EmailVerificationResponse?: shared.EmailVerificationResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostUsersUserIdVerificationExistingEmailResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            EmailVerificationResponse: shared.EmailVerificationResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.EmailVerificationResponse === undefined
                    ? null
                    : { emailVerificationResponse: v.EmailVerificationResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        EmailVerificationResponse?: shared.EmailVerificationResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostUsersUserIdVerificationExistingEmailResponse
    > = z
        .object({
            contentType: z.string(),
            emailVerificationResponse: shared.EmailVerificationResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.emailVerificationResponse === undefined
                    ? null
                    : { EmailVerificationResponse: v.emailVerificationResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

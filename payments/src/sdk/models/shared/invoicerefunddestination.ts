/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { InvoiceRefundEvents } from "./invoicerefundevents";
import { Expose, Type } from "class-transformer";

export enum InvoiceRefundDestinationDestinationType {
    Account = "Account",
    Card = "Card",
    InternalAccount = "InternalAccount",
    PaperCheck = "PaperCheck",
    WeGift = "WeGift",
}

export enum RefundType {
    Account = "Account",
    TaxWithholding = "TaxWithholding",
    Wallet = "Wallet",
    Card = "Card",
}

export class InvoiceRefundDestination extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount: number;

    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt: string;

    @SpeakeasyMetadata()
    @Expose({ name: "destinationId" })
    destinationId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "destinationType" })
    destinationType: InvoiceRefundDestinationDestinationType;

    @SpeakeasyMetadata()
    @Expose({ name: "events" })
    @Type(() => InvoiceRefundEvents)
    events: InvoiceRefundEvents;

    @SpeakeasyMetadata()
    @Expose({ name: "labels" })
    labels: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "refundType" })
    refundType: RefundType;

    @SpeakeasyMetadata()
    @Expose({ name: "stripeTransferId" })
    stripeTransferId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "transactionId" })
    transactionId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "transferId" })
    transferId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    updatedAt: string;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ExecuteClientInvoicePaymentRequest = {
  payRequest?: shared.PayRequest | undefined;
  /**
   * Unique identifier of an invoice
   */
  invoiceId: string;
};

export type ExecuteClientInvoicePaymentResponse = {
  /**
   * A client created invoice
   */
  clientInvoice?: shared.ClientInvoice | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ExecuteClientInvoicePaymentRequest$inboundSchema: z.ZodType<
  ExecuteClientInvoicePaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PayRequest: shared.PayRequest$inboundSchema.optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "PayRequest": "payRequest",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type ExecuteClientInvoicePaymentRequest$Outbound = {
  PayRequest?: shared.PayRequest$Outbound | undefined;
  invoice_id: string;
};

/** @internal */
export const ExecuteClientInvoicePaymentRequest$outboundSchema: z.ZodType<
  ExecuteClientInvoicePaymentRequest$Outbound,
  z.ZodTypeDef,
  ExecuteClientInvoicePaymentRequest
> = z.object({
  payRequest: shared.PayRequest$outboundSchema.optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    payRequest: "PayRequest",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteClientInvoicePaymentRequest$ {
  /** @deprecated use `ExecuteClientInvoicePaymentRequest$inboundSchema` instead. */
  export const inboundSchema = ExecuteClientInvoicePaymentRequest$inboundSchema;
  /** @deprecated use `ExecuteClientInvoicePaymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    ExecuteClientInvoicePaymentRequest$outboundSchema;
  /** @deprecated use `ExecuteClientInvoicePaymentRequest$Outbound` instead. */
  export type Outbound = ExecuteClientInvoicePaymentRequest$Outbound;
}

export function executeClientInvoicePaymentRequestToJSON(
  executeClientInvoicePaymentRequest: ExecuteClientInvoicePaymentRequest,
): string {
  return JSON.stringify(
    ExecuteClientInvoicePaymentRequest$outboundSchema.parse(
      executeClientInvoicePaymentRequest,
    ),
  );
}

export function executeClientInvoicePaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteClientInvoicePaymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExecuteClientInvoicePaymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteClientInvoicePaymentRequest' from JSON`,
  );
}

/** @internal */
export const ExecuteClientInvoicePaymentResponse$inboundSchema: z.ZodType<
  ExecuteClientInvoicePaymentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientInvoice: shared.ClientInvoice$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ClientInvoice": "clientInvoice",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ExecuteClientInvoicePaymentResponse$Outbound = {
  ClientInvoice?: shared.ClientInvoice$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ExecuteClientInvoicePaymentResponse$outboundSchema: z.ZodType<
  ExecuteClientInvoicePaymentResponse$Outbound,
  z.ZodTypeDef,
  ExecuteClientInvoicePaymentResponse
> = z.object({
  clientInvoice: shared.ClientInvoice$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    clientInvoice: "ClientInvoice",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteClientInvoicePaymentResponse$ {
  /** @deprecated use `ExecuteClientInvoicePaymentResponse$inboundSchema` instead. */
  export const inboundSchema =
    ExecuteClientInvoicePaymentResponse$inboundSchema;
  /** @deprecated use `ExecuteClientInvoicePaymentResponse$outboundSchema` instead. */
  export const outboundSchema =
    ExecuteClientInvoicePaymentResponse$outboundSchema;
  /** @deprecated use `ExecuteClientInvoicePaymentResponse$Outbound` instead. */
  export type Outbound = ExecuteClientInvoicePaymentResponse$Outbound;
}

export function executeClientInvoicePaymentResponseToJSON(
  executeClientInvoicePaymentResponse: ExecuteClientInvoicePaymentResponse,
): string {
  return JSON.stringify(
    ExecuteClientInvoicePaymentResponse$outboundSchema.parse(
      executeClientInvoicePaymentResponse,
    ),
  );
}

export function executeClientInvoicePaymentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteClientInvoicePaymentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExecuteClientInvoicePaymentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteClientInvoicePaymentResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateMemberClientAssociationRequest = {
    memberClientUpdateRequest?: shared.MemberClientUpdateRequest | undefined;
    /**
     * Unique identifier
     */
    id: string;
};

export type UpdateMemberClientAssociationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Describes details of member and client
     */
    memberClientSchema?: shared.MemberClientSchema | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateMemberClientAssociationRequest$ {
    export type Inbound = {
        MemberClientUpdateRequest?: shared.MemberClientUpdateRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        UpdateMemberClientAssociationRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            MemberClientUpdateRequest: shared.MemberClientUpdateRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.MemberClientUpdateRequest === undefined
                    ? null
                    : { memberClientUpdateRequest: v.MemberClientUpdateRequest }),
                id: v.id,
            };
        });

    export type Outbound = {
        MemberClientUpdateRequest?: shared.MemberClientUpdateRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateMemberClientAssociationRequest
    > = z
        .object({
            memberClientUpdateRequest: shared.MemberClientUpdateRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.memberClientUpdateRequest === undefined
                    ? null
                    : { MemberClientUpdateRequest: v.memberClientUpdateRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace UpdateMemberClientAssociationResponse$ {
    export type Inbound = {
        ContentType: string;
        MemberClientSchema?: shared.MemberClientSchema$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        UpdateMemberClientAssociationResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            MemberClientSchema: shared.MemberClientSchema$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.MemberClientSchema === undefined
                    ? null
                    : { memberClientSchema: v.MemberClientSchema }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        MemberClientSchema?: shared.MemberClientSchema$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateMemberClientAssociationResponse
    > = z
        .object({
            contentType: z.string(),
            memberClientSchema: shared.MemberClientSchema$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.memberClientSchema === undefined
                    ? null
                    : { MemberClientSchema: v.memberClientSchema }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

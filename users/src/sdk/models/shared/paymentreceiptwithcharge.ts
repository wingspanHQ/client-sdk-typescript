/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Charge, Charge$ } from "./charge";
import { z } from "zod";

export enum InvoiceStatus {
    Draft = "draft",
    Open = "open",
    Paid = "paid",
    Uncollectible = "uncollectible",
    Void = "void",
}

export type PaymentReceiptWithCharge = {
    amountPaid: number;
    charge: Charge;
    invoiceId: string;
    invoicePdf: string;
    invoiceStatus: InvoiceStatus;
    nextPaymentAttempt: string;
    paidAt: string;
    periodEnd: string;
    periodStart: string;
    startingBalance: number;
};

/** @internal */
export const InvoiceStatus$ = z.nativeEnum(InvoiceStatus);

/** @internal */
export namespace PaymentReceiptWithCharge$ {
    export type Inbound = {
        amountPaid: number;
        charge: Charge$.Inbound;
        invoiceId: string;
        invoicePdf: string;
        invoiceStatus: InvoiceStatus;
        nextPaymentAttempt: string;
        paidAt: string;
        periodEnd: string;
        periodStart: string;
        startingBalance: number;
    };

    export const inboundSchema: z.ZodType<PaymentReceiptWithCharge, z.ZodTypeDef, Inbound> = z
        .object({
            amountPaid: z.number(),
            charge: Charge$.inboundSchema,
            invoiceId: z.string(),
            invoicePdf: z.string(),
            invoiceStatus: InvoiceStatus$,
            nextPaymentAttempt: z.string(),
            paidAt: z.string(),
            periodEnd: z.string(),
            periodStart: z.string(),
            startingBalance: z.number(),
        })
        .transform((v) => {
            return {
                amountPaid: v.amountPaid,
                charge: v.charge,
                invoiceId: v.invoiceId,
                invoicePdf: v.invoicePdf,
                invoiceStatus: v.invoiceStatus,
                nextPaymentAttempt: v.nextPaymentAttempt,
                paidAt: v.paidAt,
                periodEnd: v.periodEnd,
                periodStart: v.periodStart,
                startingBalance: v.startingBalance,
            };
        });

    export type Outbound = {
        amountPaid: number;
        charge: Charge$.Outbound;
        invoiceId: string;
        invoicePdf: string;
        invoiceStatus: InvoiceStatus;
        nextPaymentAttempt: string;
        paidAt: string;
        periodEnd: string;
        periodStart: string;
        startingBalance: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentReceiptWithCharge> = z
        .object({
            amountPaid: z.number(),
            charge: Charge$.outboundSchema,
            invoiceId: z.string(),
            invoicePdf: z.string(),
            invoiceStatus: InvoiceStatus$,
            nextPaymentAttempt: z.string(),
            paidAt: z.string(),
            periodEnd: z.string(),
            periodStart: z.string(),
            startingBalance: z.number(),
        })
        .transform((v) => {
            return {
                amountPaid: v.amountPaid,
                charge: v.charge,
                invoiceId: v.invoiceId,
                invoicePdf: v.invoicePdf,
                invoiceStatus: v.invoiceStatus,
                nextPaymentAttempt: v.nextPaymentAttempt,
                paidAt: v.paidAt,
                periodEnd: v.periodEnd,
                periodStart: v.periodStart,
                startingBalance: v.startingBalance,
            };
        });
}

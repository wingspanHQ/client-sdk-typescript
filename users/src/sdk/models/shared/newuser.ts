/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EmailVerificationState, EmailVerificationState$ } from "./emailverificationstate";
import { NewUserSettings, NewUserSettings$ } from "./newusersettings";
import { OrganizationAccount, OrganizationAccount$ } from "./organizationaccount";
import { Phone, Phone$ } from "./phone";
import { UserNotificationSettings, UserNotificationSettings$ } from "./usernotificationsettings";
import { UserProfile, UserProfile$ } from "./userprofile";
import { UserRoles, UserRoles$ } from "./userroles";
import * as z from "zod";

export enum NewUserStatus {
    Pending = "Pending",
    Active = "Active",
    Disabled = "Disabled",
}

export type NewUser = {
    createdAt: string;
    email: string;
    emailVerificationState?: EmailVerificationState | null | undefined;
    eventActors: Record<string, string>;
    intercomUserHash: string;
    isPasswordSet?: boolean | null | undefined;
    labels: Record<string, string>;
    notificationSettings: UserNotificationSettings;
    organizationAssociation?: OrganizationAccount | null | undefined;
    phone: Phone;
    profile: UserProfile;
    settings?: NewUserSettings | null | undefined;
    status: NewUserStatus;
    tag: string;
    updatedAt: string;
    userId: string;
    userRoles: UserRoles;
};

/** @internal */
export const NewUserStatus$ = z.nativeEnum(NewUserStatus);

/** @internal */
export namespace NewUser$ {
    export type Inbound = {
        createdAt: string;
        email: string;
        emailVerificationState?: EmailVerificationState$.Inbound | null | undefined;
        eventActors: Record<string, string>;
        intercomUserHash: string;
        isPasswordSet?: boolean | null | undefined;
        labels: Record<string, string>;
        notificationSettings: UserNotificationSettings$.Inbound;
        organizationAssociation?: OrganizationAccount$.Inbound | null | undefined;
        phone: Phone$.Inbound;
        profile: UserProfile$.Inbound;
        settings?: NewUserSettings$.Inbound | null | undefined;
        status: NewUserStatus;
        tag: string;
        updatedAt: string;
        userId: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<NewUser, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z.string(),
            email: z.string(),
            emailVerificationState: z.nullable(EmailVerificationState$.inboundSchema).optional(),
            eventActors: z.record(z.string()),
            intercomUserHash: z.string(),
            isPasswordSet: z.nullable(z.boolean()).optional(),
            labels: z.record(z.string()),
            notificationSettings: UserNotificationSettings$.inboundSchema,
            organizationAssociation: z.nullable(OrganizationAccount$.inboundSchema).optional(),
            phone: Phone$.inboundSchema,
            profile: UserProfile$.inboundSchema,
            settings: z.nullable(NewUserSettings$.inboundSchema).optional(),
            status: NewUserStatus$,
            tag: z.string(),
            updatedAt: z.string(),
            userId: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                email: v.email,
                ...(v.emailVerificationState === undefined
                    ? null
                    : { emailVerificationState: v.emailVerificationState }),
                eventActors: v.eventActors,
                intercomUserHash: v.intercomUserHash,
                ...(v.isPasswordSet === undefined ? null : { isPasswordSet: v.isPasswordSet }),
                labels: v.labels,
                notificationSettings: v.notificationSettings,
                ...(v.organizationAssociation === undefined
                    ? null
                    : { organizationAssociation: v.organizationAssociation }),
                phone: v.phone,
                profile: v.profile,
                ...(v.settings === undefined ? null : { settings: v.settings }),
                status: v.status,
                tag: v.tag,
                updatedAt: v.updatedAt,
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        createdAt: string;
        email: string;
        emailVerificationState?: EmailVerificationState$.Outbound | null | undefined;
        eventActors: Record<string, string>;
        intercomUserHash: string;
        isPasswordSet?: boolean | null | undefined;
        labels: Record<string, string>;
        notificationSettings: UserNotificationSettings$.Outbound;
        organizationAssociation?: OrganizationAccount$.Outbound | null | undefined;
        phone: Phone$.Outbound;
        profile: UserProfile$.Outbound;
        settings?: NewUserSettings$.Outbound | null | undefined;
        status: NewUserStatus;
        tag: string;
        updatedAt: string;
        userId: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewUser> = z
        .object({
            createdAt: z.string(),
            email: z.string(),
            emailVerificationState: z.nullable(EmailVerificationState$.outboundSchema).optional(),
            eventActors: z.record(z.string()),
            intercomUserHash: z.string(),
            isPasswordSet: z.nullable(z.boolean()).optional(),
            labels: z.record(z.string()),
            notificationSettings: UserNotificationSettings$.outboundSchema,
            organizationAssociation: z.nullable(OrganizationAccount$.outboundSchema).optional(),
            phone: Phone$.outboundSchema,
            profile: UserProfile$.outboundSchema,
            settings: z.nullable(NewUserSettings$.outboundSchema).optional(),
            status: NewUserStatus$,
            tag: z.string(),
            updatedAt: z.string(),
            userId: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                email: v.email,
                ...(v.emailVerificationState === undefined
                    ? null
                    : { emailVerificationState: v.emailVerificationState }),
                eventActors: v.eventActors,
                intercomUserHash: v.intercomUserHash,
                ...(v.isPasswordSet === undefined ? null : { isPasswordSet: v.isPasswordSet }),
                labels: v.labels,
                notificationSettings: v.notificationSettings,
                ...(v.organizationAssociation === undefined
                    ? null
                    : { organizationAssociation: v.organizationAssociation }),
                phone: v.phone,
                profile: v.profile,
                ...(v.settings === undefined ? null : { settings: v.settings }),
                status: v.status,
                tag: v.tag,
                updatedAt: v.updatedAt,
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountNumbers, AccountNumbers$ } from "./accountnumbers";
import { AccountPurpose, AccountPurpose$ } from "./accountpurpose";
import {
    AccountVerificationRequest,
    AccountVerificationRequest$,
} from "./accountverificationrequest";
import * as z from "zod";

export enum AccountCreateRequestStatus {
    Active = "Active",
    Inactive = "Inactive",
    Pending = "Pending",
    Disconnected = "Disconnected",
    Ephemeral = "Ephemeral",
}

export enum AccountCreateRequestSubType {
    Paypal = "Paypal",
    Checking = "Checking",
    Savings = "Savings",
    CreditCard = "CreditCard",
}

export enum AccountCreateRequestType {
    Depository = "Depository",
    Credit = "Credit",
}

export enum AccountCreateRequestUsage {
    Business = "Business",
    Personal = "Personal",
    Mixed = "Mixed",
}

export type AccountCreateRequest = {
    accountVerification?: AccountVerificationRequest | null | undefined;
    canBeUsedFor?: AccountPurpose | null | undefined;
    country?: string | null | undefined;
    currency?: string | null | undefined;
    institution?: string | null | undefined;
    mask?: string | null | undefined;
    name?: string | null | undefined;
    numbers?: AccountNumbers | null | undefined;
    owners?: Array<string> | null | undefined;
    publicToken?: string | null | undefined;
    status?: AccountCreateRequestStatus | null | undefined;
    subType?: AccountCreateRequestSubType | null | undefined;
    type?: AccountCreateRequestType | null | undefined;
    usage?: AccountCreateRequestUsage | null | undefined;
    usedFor?: AccountPurpose | null | undefined;
};

/** @internal */
export const AccountCreateRequestStatus$ = z.nativeEnum(AccountCreateRequestStatus);

/** @internal */
export const AccountCreateRequestSubType$ = z.nativeEnum(AccountCreateRequestSubType);

/** @internal */
export const AccountCreateRequestType$ = z.nativeEnum(AccountCreateRequestType);

/** @internal */
export const AccountCreateRequestUsage$ = z.nativeEnum(AccountCreateRequestUsage);

/** @internal */
export namespace AccountCreateRequest$ {
    export type Inbound = {
        accountVerification?: AccountVerificationRequest$.Inbound | null | undefined;
        canBeUsedFor?: AccountPurpose$.Inbound | null | undefined;
        country?: string | null | undefined;
        currency?: string | null | undefined;
        institution?: string | null | undefined;
        mask?: string | null | undefined;
        name?: string | null | undefined;
        numbers?: AccountNumbers$.Inbound | null | undefined;
        owners?: Array<string> | null | undefined;
        publicToken?: string | null | undefined;
        status?: AccountCreateRequestStatus | null | undefined;
        subType?: AccountCreateRequestSubType | null | undefined;
        type?: AccountCreateRequestType | null | undefined;
        usage?: AccountCreateRequestUsage | null | undefined;
        usedFor?: AccountPurpose$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<AccountCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            accountVerification: z.nullable(AccountVerificationRequest$.inboundSchema).optional(),
            canBeUsedFor: z.nullable(AccountPurpose$.inboundSchema).optional(),
            country: z.nullable(z.string()).optional(),
            currency: z.nullable(z.string()).optional(),
            institution: z.nullable(z.string()).optional(),
            mask: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            numbers: z.nullable(AccountNumbers$.inboundSchema).optional(),
            owners: z.nullable(z.array(z.string())).optional(),
            publicToken: z.nullable(z.string()).optional(),
            status: z.nullable(AccountCreateRequestStatus$).optional(),
            subType: z.nullable(AccountCreateRequestSubType$).optional(),
            type: z.nullable(AccountCreateRequestType$).optional(),
            usage: z.nullable(AccountCreateRequestUsage$).optional(),
            usedFor: z.nullable(AccountPurpose$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountVerification === undefined
                    ? null
                    : { accountVerification: v.accountVerification }),
                ...(v.canBeUsedFor === undefined ? null : { canBeUsedFor: v.canBeUsedFor }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.mask === undefined ? null : { mask: v.mask }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.numbers === undefined ? null : { numbers: v.numbers }),
                ...(v.owners === undefined ? null : { owners: v.owners }),
                ...(v.publicToken === undefined ? null : { publicToken: v.publicToken }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subType === undefined ? null : { subType: v.subType }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.usage === undefined ? null : { usage: v.usage }),
                ...(v.usedFor === undefined ? null : { usedFor: v.usedFor }),
            };
        });

    export type Outbound = {
        accountVerification?: AccountVerificationRequest$.Outbound | null | undefined;
        canBeUsedFor?: AccountPurpose$.Outbound | null | undefined;
        country?: string | null | undefined;
        currency?: string | null | undefined;
        institution?: string | null | undefined;
        mask?: string | null | undefined;
        name?: string | null | undefined;
        numbers?: AccountNumbers$.Outbound | null | undefined;
        owners?: Array<string> | null | undefined;
        publicToken?: string | null | undefined;
        status?: AccountCreateRequestStatus | null | undefined;
        subType?: AccountCreateRequestSubType | null | undefined;
        type?: AccountCreateRequestType | null | undefined;
        usage?: AccountCreateRequestUsage | null | undefined;
        usedFor?: AccountPurpose$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountCreateRequest> = z
        .object({
            accountVerification: z.nullable(AccountVerificationRequest$.outboundSchema).optional(),
            canBeUsedFor: z.nullable(AccountPurpose$.outboundSchema).optional(),
            country: z.nullable(z.string()).optional(),
            currency: z.nullable(z.string()).optional(),
            institution: z.nullable(z.string()).optional(),
            mask: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            numbers: z.nullable(AccountNumbers$.outboundSchema).optional(),
            owners: z.nullable(z.array(z.string())).optional(),
            publicToken: z.nullable(z.string()).optional(),
            status: z.nullable(AccountCreateRequestStatus$).optional(),
            subType: z.nullable(AccountCreateRequestSubType$).optional(),
            type: z.nullable(AccountCreateRequestType$).optional(),
            usage: z.nullable(AccountCreateRequestUsage$).optional(),
            usedFor: z.nullable(AccountPurpose$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountVerification === undefined
                    ? null
                    : { accountVerification: v.accountVerification }),
                ...(v.canBeUsedFor === undefined ? null : { canBeUsedFor: v.canBeUsedFor }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.mask === undefined ? null : { mask: v.mask }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.numbers === undefined ? null : { numbers: v.numbers }),
                ...(v.owners === undefined ? null : { owners: v.owners }),
                ...(v.publicToken === undefined ? null : { publicToken: v.publicToken }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subType === undefined ? null : { subType: v.subType }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.usage === undefined ? null : { usage: v.usage }),
                ...(v.usedFor === undefined ? null : { usedFor: v.usedFor }),
            };
        });
}

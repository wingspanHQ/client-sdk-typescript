/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type DeleteDebitCardRequest = {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Unique identifier of a member
   */
  memberId: string;
};

export type DeleteDebitCardResponse = {
  /**
   * A payout debit card
   */
  checkbookCard?: shared.CheckbookCard | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DeleteDebitCardRequest$inboundSchema: z.ZodType<
  DeleteDebitCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  memberId: z.string(),
});

/** @internal */
export type DeleteDebitCardRequest$Outbound = {
  id: string;
  memberId: string;
};

/** @internal */
export const DeleteDebitCardRequest$outboundSchema: z.ZodType<
  DeleteDebitCardRequest$Outbound,
  z.ZodTypeDef,
  DeleteDebitCardRequest
> = z.object({
  id: z.string(),
  memberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDebitCardRequest$ {
  /** @deprecated use `DeleteDebitCardRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDebitCardRequest$inboundSchema;
  /** @deprecated use `DeleteDebitCardRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDebitCardRequest$outboundSchema;
  /** @deprecated use `DeleteDebitCardRequest$Outbound` instead. */
  export type Outbound = DeleteDebitCardRequest$Outbound;
}

export function deleteDebitCardRequestToJSON(
  deleteDebitCardRequest: DeleteDebitCardRequest,
): string {
  return JSON.stringify(
    DeleteDebitCardRequest$outboundSchema.parse(deleteDebitCardRequest),
  );
}

export function deleteDebitCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDebitCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDebitCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDebitCardRequest' from JSON`,
  );
}

/** @internal */
export const DeleteDebitCardResponse$inboundSchema: z.ZodType<
  DeleteDebitCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CheckbookCard: shared.CheckbookCard$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CheckbookCard": "checkbookCard",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteDebitCardResponse$Outbound = {
  CheckbookCard?: shared.CheckbookCard$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DeleteDebitCardResponse$outboundSchema: z.ZodType<
  DeleteDebitCardResponse$Outbound,
  z.ZodTypeDef,
  DeleteDebitCardResponse
> = z.object({
  checkbookCard: shared.CheckbookCard$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    checkbookCard: "CheckbookCard",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDebitCardResponse$ {
  /** @deprecated use `DeleteDebitCardResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteDebitCardResponse$inboundSchema;
  /** @deprecated use `DeleteDebitCardResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteDebitCardResponse$outboundSchema;
  /** @deprecated use `DeleteDebitCardResponse$Outbound` instead. */
  export type Outbound = DeleteDebitCardResponse$Outbound;
}

export function deleteDebitCardResponseToJSON(
  deleteDebitCardResponse: DeleteDebitCardResponse,
): string {
  return JSON.stringify(
    DeleteDebitCardResponse$outboundSchema.parse(deleteDebitCardResponse),
  );
}

export function deleteDebitCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDebitCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDebitCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDebitCardResponse' from JSON`,
  );
}

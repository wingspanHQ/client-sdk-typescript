/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateInvoiceTemplateRequest = {
    invoiceTemplateUpdateRequest?: shared.InvoiceTemplateUpdateRequest | undefined;
    /**
     * Unique identifier
     */
    id: string;
};

export type UpdateInvoiceTemplateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * A recurring invoice
     */
    invoiceTemplate?: shared.InvoiceTemplate | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const UpdateInvoiceTemplateRequest$inboundSchema: z.ZodType<
    UpdateInvoiceTemplateRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        InvoiceTemplateUpdateRequest: shared.InvoiceTemplateUpdateRequest$inboundSchema.optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            InvoiceTemplateUpdateRequest: "invoiceTemplateUpdateRequest",
        });
    });

/** @internal */
export type UpdateInvoiceTemplateRequest$Outbound = {
    InvoiceTemplateUpdateRequest?: shared.InvoiceTemplateUpdateRequest$Outbound | undefined;
    id: string;
};

/** @internal */
export const UpdateInvoiceTemplateRequest$outboundSchema: z.ZodType<
    UpdateInvoiceTemplateRequest$Outbound,
    z.ZodTypeDef,
    UpdateInvoiceTemplateRequest
> = z
    .object({
        invoiceTemplateUpdateRequest: shared.InvoiceTemplateUpdateRequest$outboundSchema.optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            invoiceTemplateUpdateRequest: "InvoiceTemplateUpdateRequest",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceTemplateRequest$ {
    /** @deprecated use `UpdateInvoiceTemplateRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateInvoiceTemplateRequest$inboundSchema;
    /** @deprecated use `UpdateInvoiceTemplateRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateInvoiceTemplateRequest$outboundSchema;
    /** @deprecated use `UpdateInvoiceTemplateRequest$Outbound` instead. */
    export type Outbound = UpdateInvoiceTemplateRequest$Outbound;
}

/** @internal */
export const UpdateInvoiceTemplateResponse$inboundSchema: z.ZodType<
    UpdateInvoiceTemplateResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        InvoiceTemplate: shared.InvoiceTemplate$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            InvoiceTemplate: "invoiceTemplate",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type UpdateInvoiceTemplateResponse$Outbound = {
    ContentType: string;
    InvoiceTemplate?: shared.InvoiceTemplate$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const UpdateInvoiceTemplateResponse$outboundSchema: z.ZodType<
    UpdateInvoiceTemplateResponse$Outbound,
    z.ZodTypeDef,
    UpdateInvoiceTemplateResponse
> = z
    .object({
        contentType: z.string(),
        invoiceTemplate: shared.InvoiceTemplate$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            invoiceTemplate: "InvoiceTemplate",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceTemplateResponse$ {
    /** @deprecated use `UpdateInvoiceTemplateResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateInvoiceTemplateResponse$inboundSchema;
    /** @deprecated use `UpdateInvoiceTemplateResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateInvoiceTemplateResponse$outboundSchema;
    /** @deprecated use `UpdateInvoiceTemplateResponse$Outbound` instead. */
    export type Outbound = UpdateInvoiceTemplateResponse$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserRoles } from "./userroles";
import { Expose, Type } from "class-transformer";

export enum MemberPublicFileResponseFileAccessScope {
    Private = "Private",
    Public = "Public",
    Internal = "Internal",
}

export class MemberPublicFileResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt: string;

    @SpeakeasyMetadata()
    @Expose({ name: "encoding" })
    encoding?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "eventActors" })
    eventActors: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "fileAccessScope" })
    fileAccessScope: MemberPublicFileResponseFileAccessScope;

    @SpeakeasyMetadata()
    @Expose({ name: "fileId" })
    fileId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "filename" })
    filename: string;

    @SpeakeasyMetadata()
    @Expose({ name: "gcsBucketName" })
    gcsBucketName: string;

    @SpeakeasyMetadata()
    @Expose({ name: "hidden" })
    hidden: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "labels" })
    labels: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "memberId" })
    memberId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "mimetype" })
    mimetype?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    updatedAt: string;

    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url: string;

    @SpeakeasyMetadata()
    @Expose({ name: "userRoles" })
    @Type(() => UserRoles)
    userRoles: UserRoles;
}

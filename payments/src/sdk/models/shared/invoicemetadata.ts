/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PayoutPendingReason {
    Admin = "Admin",
    PaymentNotClearedCard = "PaymentNotClearedCard",
    PaymentNotCleared = "PaymentNotCleared",
    PaymentNotClearedCollaborator = "PaymentNotClearedCollaborator",
    PaymentNotClearedFuture = "PaymentNotClearedFuture",
    PlatformErrorCard = "PlatformErrorCard",
    PlatformErrorGeneric = "PlatformErrorGeneric",
    PayoutNotEligibleYet = "PayoutNotEligibleYet",
    PayoutMethodNotSelected = "PayoutMethodNotSelected",
    PayoutMethodError = "PayoutMethodError",
    PlatformErrorGiftCard = "PlatformErrorGiftCard",
    PayoutGiftCardLinkPending = "PayoutGiftCardLinkPending",
    InstantPayoutMethodNotSelected = "InstantPayoutMethodNotSelected",
    PlatformErrorInstantPayout = "PlatformErrorInstantPayout",
    InstantPayoutNotEligibleYet = "InstantPayoutNotEligibleYet",
    PlatformErrorCurrencyCloud = "PlatformErrorCurrencyCloud",
}

export enum PendingStatusReason {
    CollaboratorMissingCustomEligibilityRequirement = "CollaboratorMissingCustomEligibilityRequirement",
    CollaboratorMissingEligibilityRequirement = "CollaboratorMissingEligibilityRequirement",
    MemberPayoutMethodNotSelected = "MemberPayoutMethodNotSelected",
    MemberTaxDocumentationNotVerified = "MemberTaxDocumentationNotVerified",
}

export type InvoiceMetadata = {
    depositNote?: string | null | undefined;
    invoiceDate?: string | null | undefined;
    payoutPendingReason?: PayoutPendingReason | null | undefined;
    pendingStatusReason?: PendingStatusReason | null | undefined;
    purchaseOrderNumber?: string | null | undefined;
};

/** @internal */
export const PayoutPendingReason$ = z.nativeEnum(PayoutPendingReason);

/** @internal */
export const PendingStatusReason$ = z.nativeEnum(PendingStatusReason);

/** @internal */
export namespace InvoiceMetadata$ {
    export type Inbound = {
        depositNote?: string | null | undefined;
        invoiceDate?: string | null | undefined;
        payoutPendingReason?: PayoutPendingReason | null | undefined;
        pendingStatusReason?: PendingStatusReason | null | undefined;
        purchaseOrderNumber?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<InvoiceMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            depositNote: z.nullable(z.string()).optional(),
            invoiceDate: z.nullable(z.string()).optional(),
            payoutPendingReason: z.nullable(PayoutPendingReason$).optional(),
            pendingStatusReason: z.nullable(PendingStatusReason$).optional(),
            purchaseOrderNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.depositNote === undefined ? null : { depositNote: v.depositNote }),
                ...(v.invoiceDate === undefined ? null : { invoiceDate: v.invoiceDate }),
                ...(v.payoutPendingReason === undefined
                    ? null
                    : { payoutPendingReason: v.payoutPendingReason }),
                ...(v.pendingStatusReason === undefined
                    ? null
                    : { pendingStatusReason: v.pendingStatusReason }),
                ...(v.purchaseOrderNumber === undefined
                    ? null
                    : { purchaseOrderNumber: v.purchaseOrderNumber }),
            };
        });

    export type Outbound = {
        depositNote?: string | null | undefined;
        invoiceDate?: string | null | undefined;
        payoutPendingReason?: PayoutPendingReason | null | undefined;
        pendingStatusReason?: PendingStatusReason | null | undefined;
        purchaseOrderNumber?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceMetadata> = z
        .object({
            depositNote: z.nullable(z.string()).optional(),
            invoiceDate: z.nullable(z.string()).optional(),
            payoutPendingReason: z.nullable(PayoutPendingReason$).optional(),
            pendingStatusReason: z.nullable(PendingStatusReason$).optional(),
            purchaseOrderNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.depositNote === undefined ? null : { depositNote: v.depositNote }),
                ...(v.invoiceDate === undefined ? null : { invoiceDate: v.invoiceDate }),
                ...(v.payoutPendingReason === undefined
                    ? null
                    : { payoutPendingReason: v.payoutPendingReason }),
                ...(v.pendingStatusReason === undefined
                    ? null
                    : { pendingStatusReason: v.pendingStatusReason }),
                ...(v.purchaseOrderNumber === undefined
                    ? null
                    : { purchaseOrderNumber: v.purchaseOrderNumber }),
            };
        });
}

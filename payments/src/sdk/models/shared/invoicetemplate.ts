/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  Frequency,
  Frequency$inboundSchema,
  Frequency$Outbound,
  Frequency$outboundSchema,
} from "./frequency.js";
import {
  Invoice,
  Invoice$inboundSchema,
  Invoice$Outbound,
  Invoice$outboundSchema,
} from "./invoice.js";
import {
  ScheduleDate,
  ScheduleDate$inboundSchema,
  ScheduleDate$Outbound,
  ScheduleDate$outboundSchema,
} from "./scheduledate.js";
import {
  UserRoles,
  UserRoles$inboundSchema,
  UserRoles$Outbound,
  UserRoles$outboundSchema,
} from "./userroles.js";

export const InvoiceTemplateStatus = {
  Active: "Active",
  Draft: "Draft",
  Expired: "Expired",
  Cancelled: "Cancelled",
} as const;
export type InvoiceTemplateStatus = ClosedEnum<typeof InvoiceTemplateStatus>;

export type InvoiceTemplate = {
  accountId?: string | null | undefined;
  autoPaymentRequired?: boolean | null | undefined;
  createdAt: string;
  createdInvoiceId?: string | null | undefined;
  dueInDays?: number | null | undefined;
  eventActors: { [k: string]: string };
  frequency?: Frequency | null | undefined;
  invoiceData: Invoice;
  invoiceTemplateId: string;
  isSchedulingOnly?: boolean | null | undefined;
  labels: { [k: string]: string };
  lastInvoiceDate?: string | null | undefined;
  memberId: string;
  nextInvoiceDate?: string | null | undefined;
  paymentMethodId?: string | null | undefined;
  scheduleDates?: Array<ScheduleDate> | null | undefined;
  status: InvoiceTemplateStatus;
  updatedAt: string;
  userRoles: UserRoles;
};

/** @internal */
export const InvoiceTemplateStatus$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceTemplateStatus
> = z.nativeEnum(InvoiceTemplateStatus);

/** @internal */
export const InvoiceTemplateStatus$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceTemplateStatus
> = InvoiceTemplateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceTemplateStatus$ {
  /** @deprecated use `InvoiceTemplateStatus$inboundSchema` instead. */
  export const inboundSchema = InvoiceTemplateStatus$inboundSchema;
  /** @deprecated use `InvoiceTemplateStatus$outboundSchema` instead. */
  export const outboundSchema = InvoiceTemplateStatus$outboundSchema;
}

/** @internal */
export const InvoiceTemplate$inboundSchema: z.ZodType<
  InvoiceTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  autoPaymentRequired: z.nullable(z.boolean()).optional(),
  createdAt: z.string(),
  createdInvoiceId: z.nullable(z.string()).optional(),
  dueInDays: z.nullable(z.number()).optional(),
  eventActors: z.record(z.string()),
  frequency: z.nullable(Frequency$inboundSchema).optional(),
  invoiceData: Invoice$inboundSchema,
  invoiceTemplateId: z.string(),
  isSchedulingOnly: z.nullable(z.boolean()).optional(),
  labels: z.record(z.string()),
  lastInvoiceDate: z.nullable(z.string()).optional(),
  memberId: z.string(),
  nextInvoiceDate: z.nullable(z.string()).optional(),
  paymentMethodId: z.nullable(z.string()).optional(),
  scheduleDates: z.nullable(z.array(ScheduleDate$inboundSchema)).optional(),
  status: InvoiceTemplateStatus$inboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$inboundSchema,
});

/** @internal */
export type InvoiceTemplate$Outbound = {
  accountId?: string | null | undefined;
  autoPaymentRequired?: boolean | null | undefined;
  createdAt: string;
  createdInvoiceId?: string | null | undefined;
  dueInDays?: number | null | undefined;
  eventActors: { [k: string]: string };
  frequency?: Frequency$Outbound | null | undefined;
  invoiceData: Invoice$Outbound;
  invoiceTemplateId: string;
  isSchedulingOnly?: boolean | null | undefined;
  labels: { [k: string]: string };
  lastInvoiceDate?: string | null | undefined;
  memberId: string;
  nextInvoiceDate?: string | null | undefined;
  paymentMethodId?: string | null | undefined;
  scheduleDates?: Array<ScheduleDate$Outbound> | null | undefined;
  status: string;
  updatedAt: string;
  userRoles: UserRoles$Outbound;
};

/** @internal */
export const InvoiceTemplate$outboundSchema: z.ZodType<
  InvoiceTemplate$Outbound,
  z.ZodTypeDef,
  InvoiceTemplate
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  autoPaymentRequired: z.nullable(z.boolean()).optional(),
  createdAt: z.string(),
  createdInvoiceId: z.nullable(z.string()).optional(),
  dueInDays: z.nullable(z.number()).optional(),
  eventActors: z.record(z.string()),
  frequency: z.nullable(Frequency$outboundSchema).optional(),
  invoiceData: Invoice$outboundSchema,
  invoiceTemplateId: z.string(),
  isSchedulingOnly: z.nullable(z.boolean()).optional(),
  labels: z.record(z.string()),
  lastInvoiceDate: z.nullable(z.string()).optional(),
  memberId: z.string(),
  nextInvoiceDate: z.nullable(z.string()).optional(),
  paymentMethodId: z.nullable(z.string()).optional(),
  scheduleDates: z.nullable(z.array(ScheduleDate$outboundSchema)).optional(),
  status: InvoiceTemplateStatus$outboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceTemplate$ {
  /** @deprecated use `InvoiceTemplate$inboundSchema` instead. */
  export const inboundSchema = InvoiceTemplate$inboundSchema;
  /** @deprecated use `InvoiceTemplate$outboundSchema` instead. */
  export const outboundSchema = InvoiceTemplate$outboundSchema;
  /** @deprecated use `InvoiceTemplate$Outbound` instead. */
  export type Outbound = InvoiceTemplate$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum DestinationType {
    Account = "Account",
    Card = "Card",
    InternalAccount = "InternalAccount",
    PaperCheck = "PaperCheck",
    WeGift = "WeGift",
}

export enum PayoutMethod {
    Standard = "Standard",
    Instant = "Instant",
    Expedited = "Expedited",
    Check = "Check",
    ECheck = "ECheck",
}

export type InvoicePayoutDestination = {
    amount: number;
    brand?: string | null | undefined;
    description: string;
    destinationId?: string | null | undefined;
    destinationType: DestinationType;
    last4?: string | null | undefined;
    payoutMethod: PayoutMethod;
    percentage: number;
    transferId: string;
};

/** @internal */
export const DestinationType$ = z.nativeEnum(DestinationType);

/** @internal */
export const PayoutMethod$ = z.nativeEnum(PayoutMethod);

/** @internal */
export namespace InvoicePayoutDestination$ {
    export type Inbound = {
        amount: number;
        brand?: string | null | undefined;
        description: string;
        destinationId?: string | null | undefined;
        destinationType: DestinationType;
        last4?: string | null | undefined;
        payoutMethod: PayoutMethod;
        percentage: number;
        transferId: string;
    };

    export const inboundSchema: z.ZodType<InvoicePayoutDestination, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            brand: z.nullable(z.string()).optional(),
            description: z.string(),
            destinationId: z.nullable(z.string()).optional(),
            destinationType: DestinationType$,
            last4: z.nullable(z.string()).optional(),
            payoutMethod: PayoutMethod$,
            percentage: z.number(),
            transferId: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.brand === undefined ? null : { brand: v.brand }),
                description: v.description,
                ...(v.destinationId === undefined ? null : { destinationId: v.destinationId }),
                destinationType: v.destinationType,
                ...(v.last4 === undefined ? null : { last4: v.last4 }),
                payoutMethod: v.payoutMethod,
                percentage: v.percentage,
                transferId: v.transferId,
            };
        });

    export type Outbound = {
        amount: number;
        brand?: string | null | undefined;
        description: string;
        destinationId?: string | null | undefined;
        destinationType: DestinationType;
        last4?: string | null | undefined;
        payoutMethod: PayoutMethod;
        percentage: number;
        transferId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoicePayoutDestination> = z
        .object({
            amount: z.number(),
            brand: z.nullable(z.string()).optional(),
            description: z.string(),
            destinationId: z.nullable(z.string()).optional(),
            destinationType: DestinationType$,
            last4: z.nullable(z.string()).optional(),
            payoutMethod: PayoutMethod$,
            percentage: z.number(),
            transferId: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.brand === undefined ? null : { brand: v.brand }),
                description: v.description,
                ...(v.destinationId === undefined ? null : { destinationId: v.destinationId }),
                destinationType: v.destinationType,
                ...(v.last4 === undefined ? null : { last4: v.last4 }),
                payoutMethod: v.payoutMethod,
                percentage: v.percentage,
                transferId: v.transferId,
            };
        });
}

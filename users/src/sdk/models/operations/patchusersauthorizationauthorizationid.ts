/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

export type PatchUsersAuthorizationAuthorizationIdRequest = {
    authorizationUpdateRequest?: shared.AuthorizationUpdateRequest | undefined;
    /**
     * Authorization Id
     */
    authorizationId: string;
};

export type PatchUsersAuthorizationAuthorizationIdResponse = {
    /**
     * Authorized scopes on member
     */
    authorizationResponse?: shared.AuthorizationResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PatchUsersAuthorizationAuthorizationIdRequest$ {
    export type Inbound = {
        AuthorizationUpdateRequest?: shared.AuthorizationUpdateRequest$.Inbound | undefined;
        authorizationId: string;
    };

    export const inboundSchema: z.ZodType<
        PatchUsersAuthorizationAuthorizationIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            AuthorizationUpdateRequest: shared.AuthorizationUpdateRequest$.inboundSchema.optional(),
            authorizationId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.AuthorizationUpdateRequest === undefined
                    ? null
                    : { authorizationUpdateRequest: v.AuthorizationUpdateRequest }),
                authorizationId: v.authorizationId,
            };
        });

    export type Outbound = {
        AuthorizationUpdateRequest?: shared.AuthorizationUpdateRequest$.Outbound | undefined;
        authorizationId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchUsersAuthorizationAuthorizationIdRequest
    > = z
        .object({
            authorizationUpdateRequest:
                shared.AuthorizationUpdateRequest$.outboundSchema.optional(),
            authorizationId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.authorizationUpdateRequest === undefined
                    ? null
                    : { AuthorizationUpdateRequest: v.authorizationUpdateRequest }),
                authorizationId: v.authorizationId,
            };
        });
}

/** @internal */
export namespace PatchUsersAuthorizationAuthorizationIdResponse$ {
    export type Inbound = {
        AuthorizationResponse?: shared.AuthorizationResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PatchUsersAuthorizationAuthorizationIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            AuthorizationResponse: shared.AuthorizationResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.AuthorizationResponse === undefined
                    ? null
                    : { authorizationResponse: v.AuthorizationResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        AuthorizationResponse?: shared.AuthorizationResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchUsersAuthorizationAuthorizationIdResponse
    > = z
        .object({
            authorizationResponse: shared.AuthorizationResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.authorizationResponse === undefined
                    ? null
                    : { AuthorizationResponse: v.authorizationResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

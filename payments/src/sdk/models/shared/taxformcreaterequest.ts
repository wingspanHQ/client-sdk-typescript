/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Data = {};

export type TaxFormCreateRequest = {
  clientId: string;
  data: Data;
  memberId: string;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const TaxFormCreateRequest$inboundSchema: z.ZodType<
  TaxFormCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  data: z.lazy(() => Data$inboundSchema),
  memberId: z.string(),
});

/** @internal */
export type TaxFormCreateRequest$Outbound = {
  clientId: string;
  data: Data$Outbound;
  memberId: string;
};

/** @internal */
export const TaxFormCreateRequest$outboundSchema: z.ZodType<
  TaxFormCreateRequest$Outbound,
  z.ZodTypeDef,
  TaxFormCreateRequest
> = z.object({
  clientId: z.string(),
  data: z.lazy(() => Data$outboundSchema),
  memberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxFormCreateRequest$ {
  /** @deprecated use `TaxFormCreateRequest$inboundSchema` instead. */
  export const inboundSchema = TaxFormCreateRequest$inboundSchema;
  /** @deprecated use `TaxFormCreateRequest$outboundSchema` instead. */
  export const outboundSchema = TaxFormCreateRequest$outboundSchema;
  /** @deprecated use `TaxFormCreateRequest$Outbound` instead. */
  export type Outbound = TaxFormCreateRequest$Outbound;
}

export function taxFormCreateRequestToJSON(
  taxFormCreateRequest: TaxFormCreateRequest,
): string {
  return JSON.stringify(
    TaxFormCreateRequest$outboundSchema.parse(taxFormCreateRequest),
  );
}

export function taxFormCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TaxFormCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxFormCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxFormCreateRequest' from JSON`,
  );
}

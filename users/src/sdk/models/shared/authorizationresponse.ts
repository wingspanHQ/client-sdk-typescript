/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RedactedMember, RedactedMember$ } from "./redactedmember";
import { RedactedUser, RedactedUser$ } from "./redacteduser";
import { ScopeModificationsMap, ScopeModificationsMap$ } from "./scopemodificationsmap";
import { UserRoles, UserRoles$ } from "./userroles";
import * as z from "zod";

export enum AuthorizationResponseAllowedAction {
    Read = "Read",
    Write = "Write",
}

export type AuthorizationResponse = {
    allowedAction?: AuthorizationResponseAllowedAction | null | undefined;
    allowedScope?: string | null | undefined;
    allowedScopeGroupId?: string | null | undefined;
    authorizationId?: string | null | undefined;
    createdAt: string;
    eventActors: Record<string, string>;
    labels: Record<string, string>;
    principalMember: RedactedMember;
    principalUser: RedactedUser;
    requestingMember: RedactedMember;
    requestingUser: RedactedUser;
    requestingUserId?: string | null | undefined;
    scopeModifications?: ScopeModificationsMap | null | undefined;
    updatedAt: string;
    userId: string;
    userRoles: UserRoles;
};

/** @internal */
export const AuthorizationResponseAllowedAction$ = z.nativeEnum(AuthorizationResponseAllowedAction);

/** @internal */
export namespace AuthorizationResponse$ {
    export type Inbound = {
        allowedAction?: AuthorizationResponseAllowedAction | null | undefined;
        allowedScope?: string | null | undefined;
        allowedScopeGroupId?: string | null | undefined;
        authorizationId?: string | null | undefined;
        createdAt: string;
        eventActors: Record<string, string>;
        labels: Record<string, string>;
        principalMember: RedactedMember$.Inbound;
        principalUser: RedactedUser$.Inbound;
        requestingMember: RedactedMember$.Inbound;
        requestingUser: RedactedUser$.Inbound;
        requestingUserId?: string | null | undefined;
        scopeModifications?: ScopeModificationsMap$.Inbound | null | undefined;
        updatedAt: string;
        userId: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<AuthorizationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            allowedAction: z.nullable(AuthorizationResponseAllowedAction$).optional(),
            allowedScope: z.nullable(z.string()).optional(),
            allowedScopeGroupId: z.nullable(z.string()).optional(),
            authorizationId: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            eventActors: z.record(z.string()),
            labels: z.record(z.string()),
            principalMember: RedactedMember$.inboundSchema,
            principalUser: RedactedUser$.inboundSchema,
            requestingMember: RedactedMember$.inboundSchema,
            requestingUser: RedactedUser$.inboundSchema,
            requestingUserId: z.nullable(z.string()).optional(),
            scopeModifications: z.nullable(ScopeModificationsMap$.inboundSchema).optional(),
            updatedAt: z.string(),
            userId: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.allowedAction === undefined ? null : { allowedAction: v.allowedAction }),
                ...(v.allowedScope === undefined ? null : { allowedScope: v.allowedScope }),
                ...(v.allowedScopeGroupId === undefined
                    ? null
                    : { allowedScopeGroupId: v.allowedScopeGroupId }),
                ...(v.authorizationId === undefined
                    ? null
                    : { authorizationId: v.authorizationId }),
                createdAt: v.createdAt,
                eventActors: v.eventActors,
                labels: v.labels,
                principalMember: v.principalMember,
                principalUser: v.principalUser,
                requestingMember: v.requestingMember,
                requestingUser: v.requestingUser,
                ...(v.requestingUserId === undefined
                    ? null
                    : { requestingUserId: v.requestingUserId }),
                ...(v.scopeModifications === undefined
                    ? null
                    : { scopeModifications: v.scopeModifications }),
                updatedAt: v.updatedAt,
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        allowedAction?: AuthorizationResponseAllowedAction | null | undefined;
        allowedScope?: string | null | undefined;
        allowedScopeGroupId?: string | null | undefined;
        authorizationId?: string | null | undefined;
        createdAt: string;
        eventActors: Record<string, string>;
        labels: Record<string, string>;
        principalMember: RedactedMember$.Outbound;
        principalUser: RedactedUser$.Outbound;
        requestingMember: RedactedMember$.Outbound;
        requestingUser: RedactedUser$.Outbound;
        requestingUserId?: string | null | undefined;
        scopeModifications?: ScopeModificationsMap$.Outbound | null | undefined;
        updatedAt: string;
        userId: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorizationResponse> = z
        .object({
            allowedAction: z.nullable(AuthorizationResponseAllowedAction$).optional(),
            allowedScope: z.nullable(z.string()).optional(),
            allowedScopeGroupId: z.nullable(z.string()).optional(),
            authorizationId: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            eventActors: z.record(z.string()),
            labels: z.record(z.string()),
            principalMember: RedactedMember$.outboundSchema,
            principalUser: RedactedUser$.outboundSchema,
            requestingMember: RedactedMember$.outboundSchema,
            requestingUser: RedactedUser$.outboundSchema,
            requestingUserId: z.nullable(z.string()).optional(),
            scopeModifications: z.nullable(ScopeModificationsMap$.outboundSchema).optional(),
            updatedAt: z.string(),
            userId: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.allowedAction === undefined ? null : { allowedAction: v.allowedAction }),
                ...(v.allowedScope === undefined ? null : { allowedScope: v.allowedScope }),
                ...(v.allowedScopeGroupId === undefined
                    ? null
                    : { allowedScopeGroupId: v.allowedScopeGroupId }),
                ...(v.authorizationId === undefined
                    ? null
                    : { authorizationId: v.authorizationId }),
                createdAt: v.createdAt,
                eventActors: v.eventActors,
                labels: v.labels,
                principalMember: v.principalMember,
                principalUser: v.principalUser,
                requestingMember: v.requestingMember,
                requestingUser: v.requestingUser,
                ...(v.requestingUserId === undefined
                    ? null
                    : { requestingUserId: v.requestingUserId }),
                ...(v.scopeModifications === undefined
                    ? null
                    : { scopeModifications: v.scopeModifications }),
                updatedAt: v.updatedAt,
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });
}

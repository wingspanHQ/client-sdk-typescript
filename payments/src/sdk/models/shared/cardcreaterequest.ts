/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Address, Address$ } from "./address";
import { z } from "zod";

export type CardCreateRequest = {
    requestPhysicalCard?: boolean | null | undefined;
    shippingAddress?: Address | null | undefined;
};

/** @internal */
export namespace CardCreateRequest$ {
    export type Inbound = {
        requestPhysicalCard?: boolean | null | undefined;
        shippingAddress?: Address$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<CardCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            requestPhysicalCard: z.boolean().nullable().optional(),
            shippingAddress: Address$.inboundSchema.nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.requestPhysicalCard === undefined
                    ? null
                    : { requestPhysicalCard: v.requestPhysicalCard }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
            };
        });

    export type Outbound = {
        requestPhysicalCard?: boolean | null | undefined;
        shippingAddress?: Address$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CardCreateRequest> = z
        .object({
            requestPhysicalCard: z.boolean().nullable().optional(),
            shippingAddress: Address$.outboundSchema.nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.requestPhysicalCard === undefined
                    ? null
                    : { requestPhysicalCard: v.requestPhysicalCard }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
            };
        });
}

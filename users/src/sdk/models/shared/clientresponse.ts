/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClientProfile, ClientProfile$ } from "./clientprofile";
import { NewUser, NewUser$ } from "./newuser";
import { UserRoles, UserRoles$ } from "./userroles";
import * as z from "zod";

export type ClientResponse = {
    clientId: string;
    createdAt: string;
    enabledServices: Record<string, boolean>;
    eventActors: Record<string, string>;
    labels: Record<string, string>;
    profile: ClientProfile;
    updatedAt: string;
    user: NewUser;
    userRoles: UserRoles;
};

/** @internal */
export namespace ClientResponse$ {
    export type Inbound = {
        clientId: string;
        createdAt: string;
        enabledServices: Record<string, boolean>;
        eventActors: Record<string, string>;
        labels: Record<string, string>;
        profile: ClientProfile$.Inbound;
        updatedAt: string;
        user: NewUser$.Inbound;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<ClientResponse, z.ZodTypeDef, Inbound> = z
        .object({
            clientId: z.string(),
            createdAt: z.string(),
            enabledServices: z.record(z.boolean()),
            eventActors: z.record(z.string()),
            labels: z.record(z.string()),
            profile: ClientProfile$.inboundSchema,
            updatedAt: z.string(),
            user: NewUser$.inboundSchema,
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                createdAt: v.createdAt,
                enabledServices: v.enabledServices,
                eventActors: v.eventActors,
                labels: v.labels,
                profile: v.profile,
                updatedAt: v.updatedAt,
                user: v.user,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        clientId: string;
        createdAt: string;
        enabledServices: Record<string, boolean>;
        eventActors: Record<string, string>;
        labels: Record<string, string>;
        profile: ClientProfile$.Outbound;
        updatedAt: string;
        user: NewUser$.Outbound;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClientResponse> = z
        .object({
            clientId: z.string(),
            createdAt: z.string(),
            enabledServices: z.record(z.boolean()),
            eventActors: z.record(z.string()),
            labels: z.record(z.string()),
            profile: ClientProfile$.outboundSchema,
            updatedAt: z.string(),
            user: NewUser$.outboundSchema,
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                createdAt: v.createdAt,
                enabledServices: v.enabledServices,
                eventActors: v.eventActors,
                labels: v.labels,
                profile: v.profile,
                updatedAt: v.updatedAt,
                user: v.user,
                userRoles: v.userRoles,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type GetCollaboratorGroupConfigurationRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetCollaboratorGroupConfigurationResponse = {
  /**
   * Collaborator Configuration Per Group
   */
  collaboratorGroupResponse?: shared.CollaboratorGroupResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetCollaboratorGroupConfigurationRequest$inboundSchema: z.ZodType<
  GetCollaboratorGroupConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetCollaboratorGroupConfigurationRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetCollaboratorGroupConfigurationRequest$outboundSchema: z.ZodType<
  GetCollaboratorGroupConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetCollaboratorGroupConfigurationRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollaboratorGroupConfigurationRequest$ {
  /** @deprecated use `GetCollaboratorGroupConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetCollaboratorGroupConfigurationRequest$inboundSchema;
  /** @deprecated use `GetCollaboratorGroupConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetCollaboratorGroupConfigurationRequest$outboundSchema;
  /** @deprecated use `GetCollaboratorGroupConfigurationRequest$Outbound` instead. */
  export type Outbound = GetCollaboratorGroupConfigurationRequest$Outbound;
}

/** @internal */
export const GetCollaboratorGroupConfigurationResponse$inboundSchema: z.ZodType<
  GetCollaboratorGroupConfigurationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CollaboratorGroupResponse: shared.CollaboratorGroupResponse$inboundSchema
    .optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CollaboratorGroupResponse": "collaboratorGroupResponse",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetCollaboratorGroupConfigurationResponse$Outbound = {
  CollaboratorGroupResponse?:
    | shared.CollaboratorGroupResponse$Outbound
    | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetCollaboratorGroupConfigurationResponse$outboundSchema:
  z.ZodType<
    GetCollaboratorGroupConfigurationResponse$Outbound,
    z.ZodTypeDef,
    GetCollaboratorGroupConfigurationResponse
  > = z.object({
    collaboratorGroupResponse: shared.CollaboratorGroupResponse$outboundSchema
      .optional(),
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      collaboratorGroupResponse: "CollaboratorGroupResponse",
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollaboratorGroupConfigurationResponse$ {
  /** @deprecated use `GetCollaboratorGroupConfigurationResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetCollaboratorGroupConfigurationResponse$inboundSchema;
  /** @deprecated use `GetCollaboratorGroupConfigurationResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetCollaboratorGroupConfigurationResponse$outboundSchema;
  /** @deprecated use `GetCollaboratorGroupConfigurationResponse$Outbound` instead. */
  export type Outbound = GetCollaboratorGroupConfigurationResponse$Outbound;
}

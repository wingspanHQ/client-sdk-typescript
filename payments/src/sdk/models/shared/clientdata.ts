/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum AutoPayStrategy {
    All = "All",
    None = "None",
    LessThanNilGreaterThan = "<nil>",
}

export enum VerificationStratgy {
    None = "None",
    All = "All",
    LessThanNilGreaterThan = "<nil>",
}

export type ClientData = {
    autoPayStrategy?: AutoPayStrategy | null | undefined;
    externalId?: string | null | undefined;
    verificationStratgy?: VerificationStratgy | null | undefined;
};

/** @internal */
export const AutoPayStrategy$ = z.nativeEnum(AutoPayStrategy);

/** @internal */
export const VerificationStratgy$ = z.nativeEnum(VerificationStratgy);

/** @internal */
export namespace ClientData$ {
    export type Inbound = {
        autoPayStrategy?: AutoPayStrategy | null | undefined;
        externalId?: string | null | undefined;
        verificationStratgy?: VerificationStratgy | null | undefined;
    };

    export const inboundSchema: z.ZodType<ClientData, z.ZodTypeDef, Inbound> = z
        .object({
            autoPayStrategy: z.nullable(AutoPayStrategy$).optional(),
            externalId: z.nullable(z.string()).optional(),
            verificationStratgy: z.nullable(VerificationStratgy$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.autoPayStrategy === undefined
                    ? null
                    : { autoPayStrategy: v.autoPayStrategy }),
                ...(v.externalId === undefined ? null : { externalId: v.externalId }),
                ...(v.verificationStratgy === undefined
                    ? null
                    : { verificationStratgy: v.verificationStratgy }),
            };
        });

    export type Outbound = {
        autoPayStrategy?: AutoPayStrategy | null | undefined;
        externalId?: string | null | undefined;
        verificationStratgy?: VerificationStratgy | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClientData> = z
        .object({
            autoPayStrategy: z.nullable(AutoPayStrategy$).optional(),
            externalId: z.nullable(z.string()).optional(),
            verificationStratgy: z.nullable(VerificationStratgy$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.autoPayStrategy === undefined
                    ? null
                    : { autoPayStrategy: v.autoPayStrategy }),
                ...(v.externalId === undefined ? null : { externalId: v.externalId }),
                ...(v.verificationStratgy === undefined
                    ? null
                    : { verificationStratgy: v.verificationStratgy }),
            };
        });
}

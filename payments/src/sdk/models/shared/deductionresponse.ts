/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DeductionApplication,
  DeductionApplication$inboundSchema,
  DeductionApplication$Outbound,
  DeductionApplication$outboundSchema,
} from "./deductionapplication.js";
import {
  PostPaymentDeductionDisbursement,
  PostPaymentDeductionDisbursement$inboundSchema,
  PostPaymentDeductionDisbursement$Outbound,
  PostPaymentDeductionDisbursement$outboundSchema,
} from "./postpaymentdeductiondisbursement.js";
import {
  UserRoles,
  UserRoles$inboundSchema,
  UserRoles$Outbound,
  UserRoles$outboundSchema,
} from "./userroles.js";

export const DeductionResponseCurrency = {
  Usd: "USD",
  Cad: "CAD",
} as const;
export type DeductionResponseCurrency = ClosedEnum<
  typeof DeductionResponseCurrency
>;

export const DeductionResponseStatus = {
  Pending: "Pending",
  PartiallyApplied: "PartiallyApplied",
  Complete: "Complete",
} as const;
export type DeductionResponseStatus = ClosedEnum<
  typeof DeductionResponseStatus
>;

export const DeductionResponseType = {
  PrePayment: "PrePayment",
  PostPayment: "PostPayment",
} as const;
export type DeductionResponseType = ClosedEnum<typeof DeductionResponseType>;

export type DeductionResponse = {
  amount: number;
  application: Array<DeductionApplication>;
  clientId: string;
  createdAt: string;
  currency: DeductionResponseCurrency;
  deductionId: string;
  deductionTemplateId?: string | null | undefined;
  disbursement?: PostPaymentDeductionDisbursement | null | undefined;
  eventActors: { [k: string]: string };
  labels: { [k: string]: string };
  memberId: string;
  name: string;
  priority: number;
  sourceInvoiceId?: string | null | undefined;
  startDate: string;
  status: DeductionResponseStatus;
  type: DeductionResponseType;
  updatedAt: string;
  userRoles: UserRoles;
};

/** @internal */
export const DeductionResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof DeductionResponseCurrency
> = z.nativeEnum(DeductionResponseCurrency);

/** @internal */
export const DeductionResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof DeductionResponseCurrency
> = DeductionResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionResponseCurrency$ {
  /** @deprecated use `DeductionResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = DeductionResponseCurrency$inboundSchema;
  /** @deprecated use `DeductionResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = DeductionResponseCurrency$outboundSchema;
}

/** @internal */
export const DeductionResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeductionResponseStatus
> = z.nativeEnum(DeductionResponseStatus);

/** @internal */
export const DeductionResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeductionResponseStatus
> = DeductionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionResponseStatus$ {
  /** @deprecated use `DeductionResponseStatus$inboundSchema` instead. */
  export const inboundSchema = DeductionResponseStatus$inboundSchema;
  /** @deprecated use `DeductionResponseStatus$outboundSchema` instead. */
  export const outboundSchema = DeductionResponseStatus$outboundSchema;
}

/** @internal */
export const DeductionResponseType$inboundSchema: z.ZodNativeEnum<
  typeof DeductionResponseType
> = z.nativeEnum(DeductionResponseType);

/** @internal */
export const DeductionResponseType$outboundSchema: z.ZodNativeEnum<
  typeof DeductionResponseType
> = DeductionResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionResponseType$ {
  /** @deprecated use `DeductionResponseType$inboundSchema` instead. */
  export const inboundSchema = DeductionResponseType$inboundSchema;
  /** @deprecated use `DeductionResponseType$outboundSchema` instead. */
  export const outboundSchema = DeductionResponseType$outboundSchema;
}

/** @internal */
export const DeductionResponse$inboundSchema: z.ZodType<
  DeductionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  application: z.array(DeductionApplication$inboundSchema),
  clientId: z.string(),
  createdAt: z.string(),
  currency: DeductionResponseCurrency$inboundSchema,
  deductionId: z.string(),
  deductionTemplateId: z.nullable(z.string()).optional(),
  disbursement: z.nullable(PostPaymentDeductionDisbursement$inboundSchema)
    .optional(),
  eventActors: z.record(z.string()),
  labels: z.record(z.string()),
  memberId: z.string(),
  name: z.string(),
  priority: z.number(),
  sourceInvoiceId: z.nullable(z.string()).optional(),
  startDate: z.string(),
  status: DeductionResponseStatus$inboundSchema,
  type: DeductionResponseType$inboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$inboundSchema,
});

/** @internal */
export type DeductionResponse$Outbound = {
  amount: number;
  application: Array<DeductionApplication$Outbound>;
  clientId: string;
  createdAt: string;
  currency: string;
  deductionId: string;
  deductionTemplateId?: string | null | undefined;
  disbursement?: PostPaymentDeductionDisbursement$Outbound | null | undefined;
  eventActors: { [k: string]: string };
  labels: { [k: string]: string };
  memberId: string;
  name: string;
  priority: number;
  sourceInvoiceId?: string | null | undefined;
  startDate: string;
  status: string;
  type: string;
  updatedAt: string;
  userRoles: UserRoles$Outbound;
};

/** @internal */
export const DeductionResponse$outboundSchema: z.ZodType<
  DeductionResponse$Outbound,
  z.ZodTypeDef,
  DeductionResponse
> = z.object({
  amount: z.number(),
  application: z.array(DeductionApplication$outboundSchema),
  clientId: z.string(),
  createdAt: z.string(),
  currency: DeductionResponseCurrency$outboundSchema,
  deductionId: z.string(),
  deductionTemplateId: z.nullable(z.string()).optional(),
  disbursement: z.nullable(PostPaymentDeductionDisbursement$outboundSchema)
    .optional(),
  eventActors: z.record(z.string()),
  labels: z.record(z.string()),
  memberId: z.string(),
  name: z.string(),
  priority: z.number(),
  sourceInvoiceId: z.nullable(z.string()).optional(),
  startDate: z.string(),
  status: DeductionResponseStatus$outboundSchema,
  type: DeductionResponseType$outboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionResponse$ {
  /** @deprecated use `DeductionResponse$inboundSchema` instead. */
  export const inboundSchema = DeductionResponse$inboundSchema;
  /** @deprecated use `DeductionResponse$outboundSchema` instead. */
  export const outboundSchema = DeductionResponse$outboundSchema;
  /** @deprecated use `DeductionResponse$Outbound` instead. */
  export type Outbound = DeductionResponse$Outbound;
}

export function deductionResponseToJSON(
  deductionResponse: DeductionResponse,
): string {
  return JSON.stringify(
    DeductionResponse$outboundSchema.parse(deductionResponse),
  );
}

export function deductionResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeductionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeductionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeductionResponse' from JSON`,
  );
}

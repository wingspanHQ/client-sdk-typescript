/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Interval = {
    Week: "Week",
    Month: "Month",
} as const;
export type Interval = ClosedEnum<typeof Interval>;

export type Frequency = {
    daily?: boolean | null | undefined;
    dayInInterval?: number | null | undefined;
    endDate?: string | null | undefined;
    every?: number | null | undefined;
    interval?: Interval | null | undefined;
    startDate: string;
    twicePerMonth?: boolean | null | undefined;
};

/** @internal */
export const Interval$inboundSchema: z.ZodNativeEnum<typeof Interval> = z.nativeEnum(Interval);

/** @internal */
export const Interval$outboundSchema: z.ZodNativeEnum<typeof Interval> = Interval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Interval$ {
    /** @deprecated use `Interval$inboundSchema` instead. */
    export const inboundSchema = Interval$inboundSchema;
    /** @deprecated use `Interval$outboundSchema` instead. */
    export const outboundSchema = Interval$outboundSchema;
}

/** @internal */
export const Frequency$inboundSchema: z.ZodType<Frequency, z.ZodTypeDef, unknown> = z.object({
    daily: z.nullable(z.boolean()).optional(),
    dayInInterval: z.nullable(z.number()).optional(),
    endDate: z.nullable(z.string()).optional(),
    every: z.nullable(z.number()).optional(),
    interval: z.nullable(Interval$inboundSchema).optional(),
    startDate: z.string(),
    twicePerMonth: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type Frequency$Outbound = {
    daily?: boolean | null | undefined;
    dayInInterval?: number | null | undefined;
    endDate?: string | null | undefined;
    every?: number | null | undefined;
    interval?: string | null | undefined;
    startDate: string;
    twicePerMonth?: boolean | null | undefined;
};

/** @internal */
export const Frequency$outboundSchema: z.ZodType<Frequency$Outbound, z.ZodTypeDef, Frequency> =
    z.object({
        daily: z.nullable(z.boolean()).optional(),
        dayInInterval: z.nullable(z.number()).optional(),
        endDate: z.nullable(z.string()).optional(),
        every: z.nullable(z.number()).optional(),
        interval: z.nullable(Interval$outboundSchema).optional(),
        startDate: z.string(),
        twicePerMonth: z.nullable(z.boolean()).optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Frequency$ {
    /** @deprecated use `Frequency$inboundSchema` instead. */
    export const inboundSchema = Frequency$inboundSchema;
    /** @deprecated use `Frequency$outboundSchema` instead. */
    export const outboundSchema = Frequency$outboundSchema;
    /** @deprecated use `Frequency$Outbound` instead. */
    export type Outbound = Frequency$Outbound;
}

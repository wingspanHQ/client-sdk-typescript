/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DeductionApplication, DeductionApplication$ } from "./deductionapplication";
import {
    PostPaymentDeductionDisbursement,
    PostPaymentDeductionDisbursement$,
} from "./postpaymentdeductiondisbursement";
import { UserRoles, UserRoles$ } from "./userroles";
import { z } from "zod";

export enum DeductionResponseCurrency {
    Usd = "USD",
    Cad = "CAD",
}

export enum DeductionResponseStatus {
    Pending = "Pending",
    PartiallyApplied = "PartiallyApplied",
    Complete = "Complete",
}

export enum DeductionResponseType {
    PrePayment = "PrePayment",
    PostPayment = "PostPayment",
}

export type DeductionResponse = {
    amount: number;
    application: Array<DeductionApplication>;
    clientId: string;
    createdAt: string;
    currency: DeductionResponseCurrency;
    deductionId: string;
    deductionTemplateId?: string | null | undefined;
    disbursement?: PostPaymentDeductionDisbursement | null | undefined;
    eventActors: Record<string, string>;
    labels: Record<string, string>;
    memberId: string;
    name: string;
    priority: number;
    sourceInvoiceId?: string | null | undefined;
    startDate: string;
    status: DeductionResponseStatus;
    type: DeductionResponseType;
    updatedAt: string;
    userRoles: UserRoles;
};

/** @internal */
export const DeductionResponseCurrency$ = z.nativeEnum(DeductionResponseCurrency);

/** @internal */
export const DeductionResponseStatus$ = z.nativeEnum(DeductionResponseStatus);

/** @internal */
export const DeductionResponseType$ = z.nativeEnum(DeductionResponseType);

/** @internal */
export namespace DeductionResponse$ {
    export type Inbound = {
        amount: number;
        application: Array<DeductionApplication$.Inbound>;
        clientId: string;
        createdAt: string;
        currency: DeductionResponseCurrency;
        deductionId: string;
        deductionTemplateId?: string | null | undefined;
        disbursement?: PostPaymentDeductionDisbursement$.Inbound | null | undefined;
        eventActors: Record<string, string>;
        labels: Record<string, string>;
        memberId: string;
        name: string;
        priority: number;
        sourceInvoiceId?: string | null | undefined;
        startDate: string;
        status: DeductionResponseStatus;
        type: DeductionResponseType;
        updatedAt: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<DeductionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            application: z.array(DeductionApplication$.inboundSchema),
            clientId: z.string(),
            createdAt: z.string(),
            currency: DeductionResponseCurrency$,
            deductionId: z.string(),
            deductionTemplateId: z.string().nullable().optional(),
            disbursement: PostPaymentDeductionDisbursement$.inboundSchema.nullable().optional(),
            eventActors: z.record(z.string()),
            labels: z.record(z.string()),
            memberId: z.string(),
            name: z.string(),
            priority: z.number(),
            sourceInvoiceId: z.string().nullable().optional(),
            startDate: z.string(),
            status: DeductionResponseStatus$,
            type: DeductionResponseType$,
            updatedAt: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                application: v.application,
                clientId: v.clientId,
                createdAt: v.createdAt,
                currency: v.currency,
                deductionId: v.deductionId,
                ...(v.deductionTemplateId === undefined
                    ? null
                    : { deductionTemplateId: v.deductionTemplateId }),
                ...(v.disbursement === undefined ? null : { disbursement: v.disbursement }),
                eventActors: v.eventActors,
                labels: v.labels,
                memberId: v.memberId,
                name: v.name,
                priority: v.priority,
                ...(v.sourceInvoiceId === undefined
                    ? null
                    : { sourceInvoiceId: v.sourceInvoiceId }),
                startDate: v.startDate,
                status: v.status,
                type: v.type,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        amount: number;
        application: Array<DeductionApplication$.Outbound>;
        clientId: string;
        createdAt: string;
        currency: DeductionResponseCurrency;
        deductionId: string;
        deductionTemplateId?: string | null | undefined;
        disbursement?: PostPaymentDeductionDisbursement$.Outbound | null | undefined;
        eventActors: Record<string, string>;
        labels: Record<string, string>;
        memberId: string;
        name: string;
        priority: number;
        sourceInvoiceId?: string | null | undefined;
        startDate: string;
        status: DeductionResponseStatus;
        type: DeductionResponseType;
        updatedAt: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeductionResponse> = z
        .object({
            amount: z.number(),
            application: z.array(DeductionApplication$.outboundSchema),
            clientId: z.string(),
            createdAt: z.string(),
            currency: DeductionResponseCurrency$,
            deductionId: z.string(),
            deductionTemplateId: z.string().nullable().optional(),
            disbursement: PostPaymentDeductionDisbursement$.outboundSchema.nullable().optional(),
            eventActors: z.record(z.string()),
            labels: z.record(z.string()),
            memberId: z.string(),
            name: z.string(),
            priority: z.number(),
            sourceInvoiceId: z.string().nullable().optional(),
            startDate: z.string(),
            status: DeductionResponseStatus$,
            type: DeductionResponseType$,
            updatedAt: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                application: v.application,
                clientId: v.clientId,
                createdAt: v.createdAt,
                currency: v.currency,
                deductionId: v.deductionId,
                ...(v.deductionTemplateId === undefined
                    ? null
                    : { deductionTemplateId: v.deductionTemplateId }),
                ...(v.disbursement === undefined ? null : { disbursement: v.disbursement }),
                eventActors: v.eventActors,
                labels: v.labels,
                memberId: v.memberId,
                name: v.name,
                priority: v.priority,
                ...(v.sourceInvoiceId === undefined
                    ? null
                    : { sourceInvoiceId: v.sourceInvoiceId }),
                startDate: v.startDate,
                status: v.status,
                type: v.type,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });
}

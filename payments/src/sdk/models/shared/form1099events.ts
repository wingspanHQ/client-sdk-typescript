/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Form1099Events = {
  acceptedByCollaboratorAt?: string | null | undefined;
  createdAt?: string | null | undefined;
  postFilingSuggestionMadeAt?: string | null | undefined;
  postFilingSuggestionResolvedAt?: string | null | undefined;
  submittedForCollaboratorReviewAt?: string | null | undefined;
  suggestionMadeAt?: string | null | undefined;
  suggestionResolvedAt?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const Form1099Events$inboundSchema: z.ZodType<
  Form1099Events,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptedByCollaboratorAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  postFilingSuggestionMadeAt: z.nullable(z.string()).optional(),
  postFilingSuggestionResolvedAt: z.nullable(z.string()).optional(),
  submittedForCollaboratorReviewAt: z.nullable(z.string()).optional(),
  suggestionMadeAt: z.nullable(z.string()).optional(),
  suggestionResolvedAt: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
});

/** @internal */
export type Form1099Events$Outbound = {
  acceptedByCollaboratorAt?: string | null | undefined;
  createdAt?: string | null | undefined;
  postFilingSuggestionMadeAt?: string | null | undefined;
  postFilingSuggestionResolvedAt?: string | null | undefined;
  submittedForCollaboratorReviewAt?: string | null | undefined;
  suggestionMadeAt?: string | null | undefined;
  suggestionResolvedAt?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const Form1099Events$outboundSchema: z.ZodType<
  Form1099Events$Outbound,
  z.ZodTypeDef,
  Form1099Events
> = z.object({
  acceptedByCollaboratorAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  postFilingSuggestionMadeAt: z.nullable(z.string()).optional(),
  postFilingSuggestionResolvedAt: z.nullable(z.string()).optional(),
  submittedForCollaboratorReviewAt: z.nullable(z.string()).optional(),
  suggestionMadeAt: z.nullable(z.string()).optional(),
  suggestionResolvedAt: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Form1099Events$ {
  /** @deprecated use `Form1099Events$inboundSchema` instead. */
  export const inboundSchema = Form1099Events$inboundSchema;
  /** @deprecated use `Form1099Events$outboundSchema` instead. */
  export const outboundSchema = Form1099Events$outboundSchema;
  /** @deprecated use `Form1099Events$Outbound` instead. */
  export type Outbound = Form1099Events$Outbound;
}

export function form1099EventsToJSON(form1099Events: Form1099Events): string {
  return JSON.stringify(Form1099Events$outboundSchema.parse(form1099Events));
}

export function form1099EventsFromJSON(
  jsonString: string,
): SafeParseResult<Form1099Events, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Form1099Events$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Form1099Events' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestInvoiceCreate = {
  contactName: string;
  email: string;
};

/** @internal */
export const TestInvoiceCreate$inboundSchema: z.ZodType<
  TestInvoiceCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactName: z.string(),
  email: z.string(),
});

/** @internal */
export type TestInvoiceCreate$Outbound = {
  contactName: string;
  email: string;
};

/** @internal */
export const TestInvoiceCreate$outboundSchema: z.ZodType<
  TestInvoiceCreate$Outbound,
  z.ZodTypeDef,
  TestInvoiceCreate
> = z.object({
  contactName: z.string(),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestInvoiceCreate$ {
  /** @deprecated use `TestInvoiceCreate$inboundSchema` instead. */
  export const inboundSchema = TestInvoiceCreate$inboundSchema;
  /** @deprecated use `TestInvoiceCreate$outboundSchema` instead. */
  export const outboundSchema = TestInvoiceCreate$outboundSchema;
  /** @deprecated use `TestInvoiceCreate$Outbound` instead. */
  export type Outbound = TestInvoiceCreate$Outbound;
}

export function testInvoiceCreateToJSON(
  testInvoiceCreate: TestInvoiceCreate,
): string {
  return JSON.stringify(
    TestInvoiceCreate$outboundSchema.parse(testInvoiceCreate),
  );
}

export function testInvoiceCreateFromJSON(
  jsonString: string,
): SafeParseResult<TestInvoiceCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestInvoiceCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestInvoiceCreate' from JSON`,
  );
}

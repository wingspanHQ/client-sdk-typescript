/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  BankAccount,
  BankAccount$inboundSchema,
  BankAccount$Outbound,
  BankAccount$outboundSchema,
} from "./bankaccount.js";
import {
  ClientOptions,
  ClientOptions$inboundSchema,
  ClientOptions$Outbound,
  ClientOptions$outboundSchema,
} from "./clientoptions.js";
import {
  ExternalIds,
  ExternalIds$inboundSchema,
  ExternalIds$Outbound,
  ExternalIds$outboundSchema,
} from "./externalids.js";
import {
  FeeHandlingConfig,
  FeeHandlingConfig$inboundSchema,
  FeeHandlingConfig$Outbound,
  FeeHandlingConfig$outboundSchema,
} from "./feehandlingconfig.js";
import {
  Fees,
  Fees$inboundSchema,
  Fees$Outbound,
  Fees$outboundSchema,
} from "./fees.js";
import {
  InvoiceAmountDetails,
  InvoiceAmountDetails$inboundSchema,
  InvoiceAmountDetails$Outbound,
  InvoiceAmountDetails$outboundSchema,
} from "./invoiceamountdetails.js";
import {
  InvoiceAppliedDeductions,
  InvoiceAppliedDeductions$inboundSchema,
  InvoiceAppliedDeductions$Outbound,
  InvoiceAppliedDeductions$outboundSchema,
} from "./invoiceapplieddeductions.js";
import {
  InvoiceAttachments,
  InvoiceAttachments$inboundSchema,
  InvoiceAttachments$Outbound,
  InvoiceAttachments$outboundSchema,
} from "./invoiceattachments.js";
import {
  InvoiceCollaborator,
  InvoiceCollaborator$inboundSchema,
  InvoiceCollaborator$Outbound,
  InvoiceCollaborator$outboundSchema,
} from "./invoicecollaborator.js";
import {
  InvoiceEvents,
  InvoiceEvents$inboundSchema,
  InvoiceEvents$Outbound,
  InvoiceEvents$outboundSchema,
} from "./invoiceevents.js";
import {
  InvoiceIntegrations,
  InvoiceIntegrations$inboundSchema,
  InvoiceIntegrations$Outbound,
  InvoiceIntegrations$outboundSchema,
} from "./invoiceintegrations.js";
import {
  InvoiceLineItem,
  InvoiceLineItem$inboundSchema,
  InvoiceLineItem$Outbound,
  InvoiceLineItem$outboundSchema,
} from "./invoicelineitem.js";
import {
  InvoiceMetadata,
  InvoiceMetadata$inboundSchema,
  InvoiceMetadata$Outbound,
  InvoiceMetadata$outboundSchema,
} from "./invoicemetadata.js";
import {
  InvoiceNotificationPreferences,
  InvoiceNotificationPreferences$inboundSchema,
  InvoiceNotificationPreferences$Outbound,
  InvoiceNotificationPreferences$outboundSchema,
} from "./invoicenotificationpreferences.js";
import {
  InvoicePayment,
  InvoicePayment$inboundSchema,
  InvoicePayment$Outbound,
  InvoicePayment$outboundSchema,
} from "./invoicepayment.js";
import {
  InvoicePayoutDestination,
  InvoicePayoutDestination$inboundSchema,
  InvoicePayoutDestination$Outbound,
  InvoicePayoutDestination$outboundSchema,
} from "./invoicepayoutdestination.js";
import {
  InvoiceRefundDestination,
  InvoiceRefundDestination$inboundSchema,
  InvoiceRefundDestination$Outbound,
  InvoiceRefundDestination$outboundSchema,
} from "./invoicerefunddestination.js";
import {
  InvoiceWithholdings,
  InvoiceWithholdings$inboundSchema,
  InvoiceWithholdings$Outbound,
  InvoiceWithholdings$outboundSchema,
} from "./invoicewithholdings.js";
import {
  LateFeeConfig,
  LateFeeConfig$inboundSchema,
  LateFeeConfig$Outbound,
  LateFeeConfig$outboundSchema,
} from "./latefeeconfig.js";
import {
  MemberOptions,
  MemberOptions$inboundSchema,
  MemberOptions$Outbound,
  MemberOptions$outboundSchema,
} from "./memberoptions.js";
import {
  PaymentInfo,
  PaymentInfo$inboundSchema,
  PaymentInfo$Outbound,
  PaymentInfo$outboundSchema,
} from "./paymentinfo.js";
import {
  ProcessingFees,
  ProcessingFees$inboundSchema,
  ProcessingFees$Outbound,
  ProcessingFees$outboundSchema,
} from "./processingfees.js";
import {
  UserRoles,
  UserRoles$inboundSchema,
  UserRoles$Outbound,
  UserRoles$outboundSchema,
} from "./userroles.js";

export const InvoiceAcceptedPaymentMethods = {
  Credit: "Credit",
  Ach: "ACH",
  Manual: "Manual",
} as const;
export type InvoiceAcceptedPaymentMethods = ClosedEnum<
  typeof InvoiceAcceptedPaymentMethods
>;

export const InvoiceCurrency = {
  Usd: "USD",
  Cad: "CAD",
} as const;
export type InvoiceCurrency = ClosedEnum<typeof InvoiceCurrency>;

export const InvoiceSchemasStatus = {
  Draft: "Draft",
  Open: "Open",
  Overdue: "Overdue",
  Cancelled: "Cancelled",
  Pending: "Pending",
  PaymentInTransit: "PaymentInTransit",
  Paid: "Paid",
} as const;
export type InvoiceSchemasStatus = ClosedEnum<typeof InvoiceSchemasStatus>;

export type Invoice = {
  acceptedPaymentMethods?:
    | Array<InvoiceAcceptedPaymentMethods>
    | null
    | undefined;
  accountId?: string | null | undefined;
  amount: number;
  amountDetails?: InvoiceAmountDetails | null | undefined;
  attachments?: InvoiceAttachments | null | undefined;
  bankTransferInfo?: BankAccount | null | undefined;
  chargedFees?: Fees | null | undefined;
  client: ClientOptions;
  clientId?: string | null | undefined;
  collaborators?: Array<InvoiceCollaborator> | null | undefined;
  createdAt: string;
  creditFeeHandling?: FeeHandlingConfig | null | undefined;
  currency: InvoiceCurrency;
  deductions?: Array<InvoiceAppliedDeductions> | null | undefined;
  dueDate: string;
  eventActors: { [k: string]: string };
  events: InvoiceEvents;
  externalIds: ExternalIds;
  integration?: InvoiceIntegrations | null | undefined;
  internationalBankTransferInfo?: BankAccount | null | undefined;
  invoiceId: string;
  invoiceNotes?: string | null | undefined;
  invoiceNumber: string;
  invoiceTemplateId?: string | null | undefined;
  labels: { [k: string]: string };
  lateFeeHandling?: LateFeeConfig | null | undefined;
  lineItems: Array<InvoiceLineItem>;
  member: MemberOptions;
  memberAddress: Address;
  memberClientId: string;
  memberFormattedAddressLines?: Array<string> | null | undefined;
  memberId: string;
  metadata?: InvoiceMetadata | null | undefined;
  notificationPreferences?: InvoiceNotificationPreferences | null | undefined;
  parentInvoiceId?: string | null | undefined;
  paymentInfo?: PaymentInfo | null | undefined;
  paymentMethodId?: string | null | undefined;
  payments: Array<InvoicePayment>;
  payoutDestinations?: Array<InvoicePayoutDestination> | null | undefined;
  processingFees?: ProcessingFees | null | undefined;
  refundDestinations?: Array<InvoiceRefundDestination> | null | undefined;
  sourceId?: string | null | undefined;
  status: InvoiceSchemasStatus;
  updatedAt: string;
  userRoles: UserRoles;
  withholdings?: InvoiceWithholdings | null | undefined;
};

/** @internal */
export const InvoiceAcceptedPaymentMethods$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceAcceptedPaymentMethods
> = z.nativeEnum(InvoiceAcceptedPaymentMethods);

/** @internal */
export const InvoiceAcceptedPaymentMethods$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceAcceptedPaymentMethods
> = InvoiceAcceptedPaymentMethods$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceAcceptedPaymentMethods$ {
  /** @deprecated use `InvoiceAcceptedPaymentMethods$inboundSchema` instead. */
  export const inboundSchema = InvoiceAcceptedPaymentMethods$inboundSchema;
  /** @deprecated use `InvoiceAcceptedPaymentMethods$outboundSchema` instead. */
  export const outboundSchema = InvoiceAcceptedPaymentMethods$outboundSchema;
}

/** @internal */
export const InvoiceCurrency$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceCurrency
> = z.nativeEnum(InvoiceCurrency);

/** @internal */
export const InvoiceCurrency$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceCurrency
> = InvoiceCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceCurrency$ {
  /** @deprecated use `InvoiceCurrency$inboundSchema` instead. */
  export const inboundSchema = InvoiceCurrency$inboundSchema;
  /** @deprecated use `InvoiceCurrency$outboundSchema` instead. */
  export const outboundSchema = InvoiceCurrency$outboundSchema;
}

/** @internal */
export const InvoiceSchemasStatus$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceSchemasStatus
> = z.nativeEnum(InvoiceSchemasStatus);

/** @internal */
export const InvoiceSchemasStatus$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceSchemasStatus
> = InvoiceSchemasStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceSchemasStatus$ {
  /** @deprecated use `InvoiceSchemasStatus$inboundSchema` instead. */
  export const inboundSchema = InvoiceSchemasStatus$inboundSchema;
  /** @deprecated use `InvoiceSchemasStatus$outboundSchema` instead. */
  export const outboundSchema = InvoiceSchemasStatus$outboundSchema;
}

/** @internal */
export const Invoice$inboundSchema: z.ZodType<Invoice, z.ZodTypeDef, unknown> =
  z.object({
    acceptedPaymentMethods: z.nullable(
      z.array(InvoiceAcceptedPaymentMethods$inboundSchema),
    ).optional(),
    accountId: z.nullable(z.string()).optional(),
    amount: z.number(),
    amountDetails: z.nullable(InvoiceAmountDetails$inboundSchema).optional(),
    attachments: z.nullable(InvoiceAttachments$inboundSchema).optional(),
    bankTransferInfo: z.nullable(BankAccount$inboundSchema).optional(),
    chargedFees: z.nullable(Fees$inboundSchema).optional(),
    client: ClientOptions$inboundSchema,
    clientId: z.nullable(z.string()).optional(),
    collaborators: z.nullable(z.array(InvoiceCollaborator$inboundSchema))
      .optional(),
    createdAt: z.string(),
    creditFeeHandling: z.nullable(FeeHandlingConfig$inboundSchema).optional(),
    currency: InvoiceCurrency$inboundSchema,
    deductions: z.nullable(z.array(InvoiceAppliedDeductions$inboundSchema))
      .optional(),
    dueDate: z.string(),
    eventActors: z.record(z.string()),
    events: InvoiceEvents$inboundSchema,
    externalIds: ExternalIds$inboundSchema,
    integration: z.nullable(InvoiceIntegrations$inboundSchema).optional(),
    internationalBankTransferInfo: z.nullable(BankAccount$inboundSchema)
      .optional(),
    invoiceId: z.string(),
    invoiceNotes: z.nullable(z.string()).optional(),
    invoiceNumber: z.string(),
    invoiceTemplateId: z.nullable(z.string()).optional(),
    labels: z.record(z.string()),
    lateFeeHandling: z.nullable(LateFeeConfig$inboundSchema).optional(),
    lineItems: z.array(InvoiceLineItem$inboundSchema),
    member: MemberOptions$inboundSchema,
    memberAddress: Address$inboundSchema,
    memberClientId: z.string(),
    memberFormattedAddressLines: z.nullable(z.array(z.string())).optional(),
    memberId: z.string(),
    metadata: z.nullable(InvoiceMetadata$inboundSchema).optional(),
    notificationPreferences: z.nullable(
      InvoiceNotificationPreferences$inboundSchema,
    ).optional(),
    parentInvoiceId: z.nullable(z.string()).optional(),
    paymentInfo: z.nullable(PaymentInfo$inboundSchema).optional(),
    paymentMethodId: z.nullable(z.string()).optional(),
    payments: z.array(InvoicePayment$inboundSchema),
    payoutDestinations: z.nullable(
      z.array(InvoicePayoutDestination$inboundSchema),
    ).optional(),
    processingFees: z.nullable(ProcessingFees$inboundSchema).optional(),
    refundDestinations: z.nullable(
      z.array(InvoiceRefundDestination$inboundSchema),
    ).optional(),
    sourceId: z.nullable(z.string()).optional(),
    status: InvoiceSchemasStatus$inboundSchema,
    updatedAt: z.string(),
    userRoles: UserRoles$inboundSchema,
    withholdings: z.nullable(InvoiceWithholdings$inboundSchema).optional(),
  });

/** @internal */
export type Invoice$Outbound = {
  acceptedPaymentMethods?: Array<string> | null | undefined;
  accountId?: string | null | undefined;
  amount: number;
  amountDetails?: InvoiceAmountDetails$Outbound | null | undefined;
  attachments?: InvoiceAttachments$Outbound | null | undefined;
  bankTransferInfo?: BankAccount$Outbound | null | undefined;
  chargedFees?: Fees$Outbound | null | undefined;
  client: ClientOptions$Outbound;
  clientId?: string | null | undefined;
  collaborators?: Array<InvoiceCollaborator$Outbound> | null | undefined;
  createdAt: string;
  creditFeeHandling?: FeeHandlingConfig$Outbound | null | undefined;
  currency: string;
  deductions?: Array<InvoiceAppliedDeductions$Outbound> | null | undefined;
  dueDate: string;
  eventActors: { [k: string]: string };
  events: InvoiceEvents$Outbound;
  externalIds: ExternalIds$Outbound;
  integration?: InvoiceIntegrations$Outbound | null | undefined;
  internationalBankTransferInfo?: BankAccount$Outbound | null | undefined;
  invoiceId: string;
  invoiceNotes?: string | null | undefined;
  invoiceNumber: string;
  invoiceTemplateId?: string | null | undefined;
  labels: { [k: string]: string };
  lateFeeHandling?: LateFeeConfig$Outbound | null | undefined;
  lineItems: Array<InvoiceLineItem$Outbound>;
  member: MemberOptions$Outbound;
  memberAddress: Address$Outbound;
  memberClientId: string;
  memberFormattedAddressLines?: Array<string> | null | undefined;
  memberId: string;
  metadata?: InvoiceMetadata$Outbound | null | undefined;
  notificationPreferences?:
    | InvoiceNotificationPreferences$Outbound
    | null
    | undefined;
  parentInvoiceId?: string | null | undefined;
  paymentInfo?: PaymentInfo$Outbound | null | undefined;
  paymentMethodId?: string | null | undefined;
  payments: Array<InvoicePayment$Outbound>;
  payoutDestinations?:
    | Array<InvoicePayoutDestination$Outbound>
    | null
    | undefined;
  processingFees?: ProcessingFees$Outbound | null | undefined;
  refundDestinations?:
    | Array<InvoiceRefundDestination$Outbound>
    | null
    | undefined;
  sourceId?: string | null | undefined;
  status: string;
  updatedAt: string;
  userRoles: UserRoles$Outbound;
  withholdings?: InvoiceWithholdings$Outbound | null | undefined;
};

/** @internal */
export const Invoice$outboundSchema: z.ZodType<
  Invoice$Outbound,
  z.ZodTypeDef,
  Invoice
> = z.object({
  acceptedPaymentMethods: z.nullable(
    z.array(InvoiceAcceptedPaymentMethods$outboundSchema),
  ).optional(),
  accountId: z.nullable(z.string()).optional(),
  amount: z.number(),
  amountDetails: z.nullable(InvoiceAmountDetails$outboundSchema).optional(),
  attachments: z.nullable(InvoiceAttachments$outboundSchema).optional(),
  bankTransferInfo: z.nullable(BankAccount$outboundSchema).optional(),
  chargedFees: z.nullable(Fees$outboundSchema).optional(),
  client: ClientOptions$outboundSchema,
  clientId: z.nullable(z.string()).optional(),
  collaborators: z.nullable(z.array(InvoiceCollaborator$outboundSchema))
    .optional(),
  createdAt: z.string(),
  creditFeeHandling: z.nullable(FeeHandlingConfig$outboundSchema).optional(),
  currency: InvoiceCurrency$outboundSchema,
  deductions: z.nullable(z.array(InvoiceAppliedDeductions$outboundSchema))
    .optional(),
  dueDate: z.string(),
  eventActors: z.record(z.string()),
  events: InvoiceEvents$outboundSchema,
  externalIds: ExternalIds$outboundSchema,
  integration: z.nullable(InvoiceIntegrations$outboundSchema).optional(),
  internationalBankTransferInfo: z.nullable(BankAccount$outboundSchema)
    .optional(),
  invoiceId: z.string(),
  invoiceNotes: z.nullable(z.string()).optional(),
  invoiceNumber: z.string(),
  invoiceTemplateId: z.nullable(z.string()).optional(),
  labels: z.record(z.string()),
  lateFeeHandling: z.nullable(LateFeeConfig$outboundSchema).optional(),
  lineItems: z.array(InvoiceLineItem$outboundSchema),
  member: MemberOptions$outboundSchema,
  memberAddress: Address$outboundSchema,
  memberClientId: z.string(),
  memberFormattedAddressLines: z.nullable(z.array(z.string())).optional(),
  memberId: z.string(),
  metadata: z.nullable(InvoiceMetadata$outboundSchema).optional(),
  notificationPreferences: z.nullable(
    InvoiceNotificationPreferences$outboundSchema,
  ).optional(),
  parentInvoiceId: z.nullable(z.string()).optional(),
  paymentInfo: z.nullable(PaymentInfo$outboundSchema).optional(),
  paymentMethodId: z.nullable(z.string()).optional(),
  payments: z.array(InvoicePayment$outboundSchema),
  payoutDestinations: z.nullable(
    z.array(InvoicePayoutDestination$outboundSchema),
  ).optional(),
  processingFees: z.nullable(ProcessingFees$outboundSchema).optional(),
  refundDestinations: z.nullable(
    z.array(InvoiceRefundDestination$outboundSchema),
  ).optional(),
  sourceId: z.nullable(z.string()).optional(),
  status: InvoiceSchemasStatus$outboundSchema,
  updatedAt: z.string(),
  userRoles: UserRoles$outboundSchema,
  withholdings: z.nullable(InvoiceWithholdings$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Invoice$ {
  /** @deprecated use `Invoice$inboundSchema` instead. */
  export const inboundSchema = Invoice$inboundSchema;
  /** @deprecated use `Invoice$outboundSchema` instead. */
  export const outboundSchema = Invoice$outboundSchema;
  /** @deprecated use `Invoice$Outbound` instead. */
  export type Outbound = Invoice$Outbound;
}

export function invoiceToJSON(invoice: Invoice): string {
  return JSON.stringify(Invoice$outboundSchema.parse(invoice));
}

export function invoiceFromJSON(
  jsonString: string,
): SafeParseResult<Invoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Invoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Invoice' from JSON`,
  );
}

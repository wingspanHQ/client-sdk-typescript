/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollaboratorGroupRequirement = {
  eligibilityRequirementId?: string | null | undefined;
};

/** @internal */
export const CollaboratorGroupRequirement$inboundSchema: z.ZodType<
  CollaboratorGroupRequirement,
  z.ZodTypeDef,
  unknown
> = z.object({
  eligibilityRequirementId: z.nullable(z.string()).optional(),
});

/** @internal */
export type CollaboratorGroupRequirement$Outbound = {
  eligibilityRequirementId?: string | null | undefined;
};

/** @internal */
export const CollaboratorGroupRequirement$outboundSchema: z.ZodType<
  CollaboratorGroupRequirement$Outbound,
  z.ZodTypeDef,
  CollaboratorGroupRequirement
> = z.object({
  eligibilityRequirementId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollaboratorGroupRequirement$ {
  /** @deprecated use `CollaboratorGroupRequirement$inboundSchema` instead. */
  export const inboundSchema = CollaboratorGroupRequirement$inboundSchema;
  /** @deprecated use `CollaboratorGroupRequirement$outboundSchema` instead. */
  export const outboundSchema = CollaboratorGroupRequirement$outboundSchema;
  /** @deprecated use `CollaboratorGroupRequirement$Outbound` instead. */
  export type Outbound = CollaboratorGroupRequirement$Outbound;
}

export function collaboratorGroupRequirementToJSON(
  collaboratorGroupRequirement: CollaboratorGroupRequirement,
): string {
  return JSON.stringify(
    CollaboratorGroupRequirement$outboundSchema.parse(
      collaboratorGroupRequirement,
    ),
  );
}

export function collaboratorGroupRequirementFromJSON(
  jsonString: string,
): SafeParseResult<CollaboratorGroupRequirement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollaboratorGroupRequirement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollaboratorGroupRequirement' from JSON`,
  );
}

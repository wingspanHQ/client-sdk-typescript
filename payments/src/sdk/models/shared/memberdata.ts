/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AutoPayRequirement = {
  All: "All",
  None: "None",
} as const;
export type AutoPayRequirement = ClosedEnum<typeof AutoPayRequirement>;

export const ShareTaxDocument = {
  Allow: "Allow",
  Decline: "Decline",
} as const;
export type ShareTaxDocument = ClosedEnum<typeof ShareTaxDocument>;

export type MemberData = {
  autoPayRequirement?: AutoPayRequirement | null | undefined;
  externalId?: string | null | undefined;
  shareTaxDocument?: ShareTaxDocument | null | undefined;
};

/** @internal */
export const AutoPayRequirement$inboundSchema: z.ZodNativeEnum<
  typeof AutoPayRequirement
> = z.nativeEnum(AutoPayRequirement);

/** @internal */
export const AutoPayRequirement$outboundSchema: z.ZodNativeEnum<
  typeof AutoPayRequirement
> = AutoPayRequirement$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutoPayRequirement$ {
  /** @deprecated use `AutoPayRequirement$inboundSchema` instead. */
  export const inboundSchema = AutoPayRequirement$inboundSchema;
  /** @deprecated use `AutoPayRequirement$outboundSchema` instead. */
  export const outboundSchema = AutoPayRequirement$outboundSchema;
}

/** @internal */
export const ShareTaxDocument$inboundSchema: z.ZodNativeEnum<
  typeof ShareTaxDocument
> = z.nativeEnum(ShareTaxDocument);

/** @internal */
export const ShareTaxDocument$outboundSchema: z.ZodNativeEnum<
  typeof ShareTaxDocument
> = ShareTaxDocument$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShareTaxDocument$ {
  /** @deprecated use `ShareTaxDocument$inboundSchema` instead. */
  export const inboundSchema = ShareTaxDocument$inboundSchema;
  /** @deprecated use `ShareTaxDocument$outboundSchema` instead. */
  export const outboundSchema = ShareTaxDocument$outboundSchema;
}

/** @internal */
export const MemberData$inboundSchema: z.ZodType<
  MemberData,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoPayRequirement: z.nullable(AutoPayRequirement$inboundSchema).optional(),
  externalId: z.nullable(z.string()).optional(),
  shareTaxDocument: z.nullable(ShareTaxDocument$inboundSchema).optional(),
});

/** @internal */
export type MemberData$Outbound = {
  autoPayRequirement?: string | null | undefined;
  externalId?: string | null | undefined;
  shareTaxDocument?: string | null | undefined;
};

/** @internal */
export const MemberData$outboundSchema: z.ZodType<
  MemberData$Outbound,
  z.ZodTypeDef,
  MemberData
> = z.object({
  autoPayRequirement: z.nullable(AutoPayRequirement$outboundSchema).optional(),
  externalId: z.nullable(z.string()).optional(),
  shareTaxDocument: z.nullable(ShareTaxDocument$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberData$ {
  /** @deprecated use `MemberData$inboundSchema` instead. */
  export const inboundSchema = MemberData$inboundSchema;
  /** @deprecated use `MemberData$outboundSchema` instead. */
  export const outboundSchema = MemberData$outboundSchema;
  /** @deprecated use `MemberData$Outbound` instead. */
  export type Outbound = MemberData$Outbound;
}

export function memberDataToJSON(memberData: MemberData): string {
  return JSON.stringify(MemberData$outboundSchema.parse(memberData));
}

export function memberDataFromJSON(
  jsonString: string,
): SafeParseResult<MemberData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MemberData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MemberData' from JSON`,
  );
}

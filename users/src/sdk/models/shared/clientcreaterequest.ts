/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClientProfileCreate, ClientProfileCreate$ } from "./clientprofilecreate";
import * as z from "zod";

export type ClientCreateRequest = {
    profile?: ClientProfileCreate | null | undefined;
    userId: string;
};

/** @internal */
export namespace ClientCreateRequest$ {
    export type Inbound = {
        profile?: ClientProfileCreate$.Inbound | null | undefined;
        userId: string;
    };

    export const inboundSchema: z.ZodType<ClientCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            profile: z.nullable(ClientProfileCreate$.inboundSchema).optional(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.profile === undefined ? null : { profile: v.profile }),
                userId: v.userId,
            };
        });

    export type Outbound = {
        profile?: ClientProfileCreate$.Outbound | null | undefined;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClientCreateRequest> = z
        .object({
            profile: z.nullable(ClientProfileCreate$.outboundSchema).optional(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.profile === undefined ? null : { profile: v.profile }),
                userId: v.userId,
            };
        });
}

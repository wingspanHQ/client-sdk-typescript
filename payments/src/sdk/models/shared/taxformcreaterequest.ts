/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Data = {};

export type TaxFormCreateRequest = {
    clientId: string;
    data: Data;
    memberId: string;
};

/** @internal */
export namespace Data$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z.object({});
}

/** @internal */
export namespace TaxFormCreateRequest$ {
    export type Inbound = {
        clientId: string;
        data: Data$.Inbound;
        memberId: string;
    };

    export const inboundSchema: z.ZodType<TaxFormCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            clientId: z.string(),
            data: z.lazy(() => Data$.inboundSchema),
            memberId: z.string(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                data: v.data,
                memberId: v.memberId,
            };
        });

    export type Outbound = {
        clientId: string;
        data: Data$.Outbound;
        memberId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxFormCreateRequest> = z
        .object({
            clientId: z.string(),
            data: z.lazy(() => Data$.outboundSchema),
            memberId: z.string(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                data: v.data,
                memberId: v.memberId,
            };
        });
}

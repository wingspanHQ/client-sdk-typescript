/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetSpecificPayableBatchItemRequest = {
  /**
   * Unique identifier for a batch
   */
  batchId: string;
  /**
   * Unique identifier for an item in a batch
   */
  batchItemId: string;
};

export type GetSpecificPayableBatchItemResponse = {
  /**
   * An item that will be converted into a payable
   */
  bulkPayableItem?: shared.BulkPayableItem | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetSpecificPayableBatchItemRequest$inboundSchema: z.ZodType<
  GetSpecificPayableBatchItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batchId: z.string(),
  batchItemId: z.string(),
});

/** @internal */
export type GetSpecificPayableBatchItemRequest$Outbound = {
  batchId: string;
  batchItemId: string;
};

/** @internal */
export const GetSpecificPayableBatchItemRequest$outboundSchema: z.ZodType<
  GetSpecificPayableBatchItemRequest$Outbound,
  z.ZodTypeDef,
  GetSpecificPayableBatchItemRequest
> = z.object({
  batchId: z.string(),
  batchItemId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpecificPayableBatchItemRequest$ {
  /** @deprecated use `GetSpecificPayableBatchItemRequest$inboundSchema` instead. */
  export const inboundSchema = GetSpecificPayableBatchItemRequest$inboundSchema;
  /** @deprecated use `GetSpecificPayableBatchItemRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetSpecificPayableBatchItemRequest$outboundSchema;
  /** @deprecated use `GetSpecificPayableBatchItemRequest$Outbound` instead. */
  export type Outbound = GetSpecificPayableBatchItemRequest$Outbound;
}

export function getSpecificPayableBatchItemRequestToJSON(
  getSpecificPayableBatchItemRequest: GetSpecificPayableBatchItemRequest,
): string {
  return JSON.stringify(
    GetSpecificPayableBatchItemRequest$outboundSchema.parse(
      getSpecificPayableBatchItemRequest,
    ),
  );
}

export function getSpecificPayableBatchItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSpecificPayableBatchItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSpecificPayableBatchItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpecificPayableBatchItemRequest' from JSON`,
  );
}

/** @internal */
export const GetSpecificPayableBatchItemResponse$inboundSchema: z.ZodType<
  GetSpecificPayableBatchItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkPayableItem: shared.BulkPayableItem$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkPayableItem": "bulkPayableItem",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetSpecificPayableBatchItemResponse$Outbound = {
  BulkPayableItem?: shared.BulkPayableItem$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetSpecificPayableBatchItemResponse$outboundSchema: z.ZodType<
  GetSpecificPayableBatchItemResponse$Outbound,
  z.ZodTypeDef,
  GetSpecificPayableBatchItemResponse
> = z.object({
  bulkPayableItem: shared.BulkPayableItem$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkPayableItem: "BulkPayableItem",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpecificPayableBatchItemResponse$ {
  /** @deprecated use `GetSpecificPayableBatchItemResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetSpecificPayableBatchItemResponse$inboundSchema;
  /** @deprecated use `GetSpecificPayableBatchItemResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetSpecificPayableBatchItemResponse$outboundSchema;
  /** @deprecated use `GetSpecificPayableBatchItemResponse$Outbound` instead. */
  export type Outbound = GetSpecificPayableBatchItemResponse$Outbound;
}

export function getSpecificPayableBatchItemResponseToJSON(
  getSpecificPayableBatchItemResponse: GetSpecificPayableBatchItemResponse,
): string {
  return JSON.stringify(
    GetSpecificPayableBatchItemResponse$outboundSchema.parse(
      getSpecificPayableBatchItemResponse,
    ),
  );
}

export function getSpecificPayableBatchItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSpecificPayableBatchItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSpecificPayableBatchItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpecificPayableBatchItemResponse' from JSON`,
  );
}

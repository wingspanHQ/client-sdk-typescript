/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentResponse,
  DocumentResponse$inboundSchema,
  DocumentResponse$Outbound,
  DocumentResponse$outboundSchema,
} from "./documentresponse.js";

export const MemberClientRequirementResponseRequirementType = {
  Signature: "Signature",
} as const;
export type MemberClientRequirementResponseRequirementType = ClosedEnum<
  typeof MemberClientRequirementResponseRequirementType
>;

export const MemberClientRequirementResponseStatus = {
  New: "New",
  Sent: "Sent",
  Pending: "Pending",
  Complete: "Complete",
} as const;
export type MemberClientRequirementResponseStatus = ClosedEnum<
  typeof MemberClientRequirementResponseStatus
>;

export type MemberClientRequirementResponse = {
  clientId: string;
  collaboratorGroupId: string;
  document?: DocumentResponse | null | undefined;
  documentId?: string | null | undefined;
  eligibilityRequirementId: string;
  requirementType: MemberClientRequirementResponseRequirementType;
  status?: MemberClientRequirementResponseStatus | null | undefined;
  templateId?: string | null | undefined;
  validFor?: number | null | undefined;
};

/** @internal */
export const MemberClientRequirementResponseRequirementType$inboundSchema:
  z.ZodNativeEnum<typeof MemberClientRequirementResponseRequirementType> = z
    .nativeEnum(MemberClientRequirementResponseRequirementType);

/** @internal */
export const MemberClientRequirementResponseRequirementType$outboundSchema:
  z.ZodNativeEnum<typeof MemberClientRequirementResponseRequirementType> =
    MemberClientRequirementResponseRequirementType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberClientRequirementResponseRequirementType$ {
  /** @deprecated use `MemberClientRequirementResponseRequirementType$inboundSchema` instead. */
  export const inboundSchema =
    MemberClientRequirementResponseRequirementType$inboundSchema;
  /** @deprecated use `MemberClientRequirementResponseRequirementType$outboundSchema` instead. */
  export const outboundSchema =
    MemberClientRequirementResponseRequirementType$outboundSchema;
}

/** @internal */
export const MemberClientRequirementResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof MemberClientRequirementResponseStatus> = z.nativeEnum(
    MemberClientRequirementResponseStatus,
  );

/** @internal */
export const MemberClientRequirementResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof MemberClientRequirementResponseStatus> =
    MemberClientRequirementResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberClientRequirementResponseStatus$ {
  /** @deprecated use `MemberClientRequirementResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    MemberClientRequirementResponseStatus$inboundSchema;
  /** @deprecated use `MemberClientRequirementResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    MemberClientRequirementResponseStatus$outboundSchema;
}

/** @internal */
export const MemberClientRequirementResponse$inboundSchema: z.ZodType<
  MemberClientRequirementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  collaboratorGroupId: z.string(),
  document: z.nullable(DocumentResponse$inboundSchema).optional(),
  documentId: z.nullable(z.string()).optional(),
  eligibilityRequirementId: z.string(),
  requirementType: MemberClientRequirementResponseRequirementType$inboundSchema,
  status: z.nullable(MemberClientRequirementResponseStatus$inboundSchema)
    .optional(),
  templateId: z.nullable(z.string()).optional(),
  validFor: z.nullable(z.number()).optional(),
});

/** @internal */
export type MemberClientRequirementResponse$Outbound = {
  clientId: string;
  collaboratorGroupId: string;
  document?: DocumentResponse$Outbound | null | undefined;
  documentId?: string | null | undefined;
  eligibilityRequirementId: string;
  requirementType: string;
  status?: string | null | undefined;
  templateId?: string | null | undefined;
  validFor?: number | null | undefined;
};

/** @internal */
export const MemberClientRequirementResponse$outboundSchema: z.ZodType<
  MemberClientRequirementResponse$Outbound,
  z.ZodTypeDef,
  MemberClientRequirementResponse
> = z.object({
  clientId: z.string(),
  collaboratorGroupId: z.string(),
  document: z.nullable(DocumentResponse$outboundSchema).optional(),
  documentId: z.nullable(z.string()).optional(),
  eligibilityRequirementId: z.string(),
  requirementType:
    MemberClientRequirementResponseRequirementType$outboundSchema,
  status: z.nullable(MemberClientRequirementResponseStatus$outboundSchema)
    .optional(),
  templateId: z.nullable(z.string()).optional(),
  validFor: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberClientRequirementResponse$ {
  /** @deprecated use `MemberClientRequirementResponse$inboundSchema` instead. */
  export const inboundSchema = MemberClientRequirementResponse$inboundSchema;
  /** @deprecated use `MemberClientRequirementResponse$outboundSchema` instead. */
  export const outboundSchema = MemberClientRequirementResponse$outboundSchema;
  /** @deprecated use `MemberClientRequirementResponse$Outbound` instead. */
  export type Outbound = MemberClientRequirementResponse$Outbound;
}

export function memberClientRequirementResponseToJSON(
  memberClientRequirementResponse: MemberClientRequirementResponse,
): string {
  return JSON.stringify(
    MemberClientRequirementResponse$outboundSchema.parse(
      memberClientRequirementResponse,
    ),
  );
}

export function memberClientRequirementResponseFromJSON(
  jsonString: string,
): SafeParseResult<MemberClientRequirementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MemberClientRequirementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MemberClientRequirementResponse' from JSON`,
  );
}

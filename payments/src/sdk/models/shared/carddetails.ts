/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Address, Address$ } from "./address";
import { z } from "zod";

export enum CardDetailsStatus {
    Active = "Active",
    Inactive = "Inactive",
    Stolen = "Stolen",
    Lost = "Lost",
    Frozen = "Frozen",
    ClosedByCustomer = "ClosedByCustomer",
    SuspectedFraud = "SuspectedFraud",
}

export enum CardDetailsType {
    IndividualDebitCard = "individualDebitCard",
    BusinessDebitCard = "businessDebitCard",
    IndividualVirtualDebitCard = "individualVirtualDebitCard",
    BusinessVirtualDebitCard = "businessVirtualDebitCard",
}

export type CardDetails = {
    address: Address;
    brand: string;
    createdAt: string;
    expirationDate: string;
    last4Digits: string;
    name: string;
    pinSet?: boolean | null | undefined;
    status: CardDetailsStatus;
    type: CardDetailsType;
};

/** @internal */
export const CardDetailsStatus$ = z.nativeEnum(CardDetailsStatus);

/** @internal */
export const CardDetailsType$ = z.nativeEnum(CardDetailsType);

/** @internal */
export namespace CardDetails$ {
    export type Inbound = {
        address: Address$.Inbound;
        brand: string;
        createdAt: string;
        expirationDate: string;
        last4Digits: string;
        name: string;
        pinSet?: boolean | null | undefined;
        status: CardDetailsStatus;
        type: CardDetailsType;
    };

    export const inboundSchema: z.ZodType<CardDetails, z.ZodTypeDef, Inbound> = z
        .object({
            address: Address$.inboundSchema,
            brand: z.string(),
            createdAt: z.string(),
            expirationDate: z.string(),
            last4Digits: z.string(),
            name: z.string(),
            pinSet: z.nullable(z.boolean()).optional(),
            status: CardDetailsStatus$,
            type: CardDetailsType$,
        })
        .transform((v) => {
            return {
                address: v.address,
                brand: v.brand,
                createdAt: v.createdAt,
                expirationDate: v.expirationDate,
                last4Digits: v.last4Digits,
                name: v.name,
                ...(v.pinSet === undefined ? null : { pinSet: v.pinSet }),
                status: v.status,
                type: v.type,
            };
        });

    export type Outbound = {
        address: Address$.Outbound;
        brand: string;
        createdAt: string;
        expirationDate: string;
        last4Digits: string;
        name: string;
        pinSet?: boolean | null | undefined;
        status: CardDetailsStatus;
        type: CardDetailsType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CardDetails> = z
        .object({
            address: Address$.outboundSchema,
            brand: z.string(),
            createdAt: z.string(),
            expirationDate: z.string(),
            last4Digits: z.string(),
            name: z.string(),
            pinSet: z.nullable(z.boolean()).optional(),
            status: CardDetailsStatus$,
            type: CardDetailsType$,
        })
        .transform((v) => {
            return {
                address: v.address,
                brand: v.brand,
                createdAt: v.createdAt,
                expirationDate: v.expirationDate,
                last4Digits: v.last4Digits,
                name: v.name,
                ...(v.pinSet === undefined ? null : { pinSet: v.pinSet }),
                status: v.status,
                type: v.type,
            };
        });
}

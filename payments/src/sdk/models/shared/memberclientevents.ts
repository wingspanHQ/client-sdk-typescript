/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MemberClientEvents = {
    activeAt?: string | null | undefined;
    pendingAt?: string | null | undefined;
};

/** @internal */
export namespace MemberClientEvents$ {
    export type Inbound = {
        activeAt?: string | null | undefined;
        pendingAt?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<MemberClientEvents, z.ZodTypeDef, Inbound> = z
        .object({
            activeAt: z.string().nullable().optional(),
            pendingAt: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.activeAt === undefined ? null : { activeAt: v.activeAt }),
                ...(v.pendingAt === undefined ? null : { pendingAt: v.pendingAt }),
            };
        });

    export type Outbound = {
        activeAt?: string | null | undefined;
        pendingAt?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MemberClientEvents> = z
        .object({
            activeAt: z.string().nullable().optional(),
            pendingAt: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.activeAt === undefined ? null : { activeAt: v.activeAt }),
                ...(v.pendingAt === undefined ? null : { pendingAt: v.pendingAt }),
            };
        });
}

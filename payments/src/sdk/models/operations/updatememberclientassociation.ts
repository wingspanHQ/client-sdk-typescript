/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateMemberClientAssociationRequest = {
  memberClientUpdateRequest?: shared.MemberClientUpdateRequest | undefined;
  /**
   * Unique identifier
   */
  id: string;
};

export type UpdateMemberClientAssociationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Describes details of member and client
   */
  memberClientSchema?: shared.MemberClientSchema | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdateMemberClientAssociationRequest$inboundSchema: z.ZodType<
  UpdateMemberClientAssociationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  MemberClientUpdateRequest: shared.MemberClientUpdateRequest$inboundSchema
    .optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "MemberClientUpdateRequest": "memberClientUpdateRequest",
  });
});

/** @internal */
export type UpdateMemberClientAssociationRequest$Outbound = {
  MemberClientUpdateRequest?:
    | shared.MemberClientUpdateRequest$Outbound
    | undefined;
  id: string;
};

/** @internal */
export const UpdateMemberClientAssociationRequest$outboundSchema: z.ZodType<
  UpdateMemberClientAssociationRequest$Outbound,
  z.ZodTypeDef,
  UpdateMemberClientAssociationRequest
> = z.object({
  memberClientUpdateRequest: shared.MemberClientUpdateRequest$outboundSchema
    .optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    memberClientUpdateRequest: "MemberClientUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMemberClientAssociationRequest$ {
  /** @deprecated use `UpdateMemberClientAssociationRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMemberClientAssociationRequest$inboundSchema;
  /** @deprecated use `UpdateMemberClientAssociationRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMemberClientAssociationRequest$outboundSchema;
  /** @deprecated use `UpdateMemberClientAssociationRequest$Outbound` instead. */
  export type Outbound = UpdateMemberClientAssociationRequest$Outbound;
}

export function updateMemberClientAssociationRequestToJSON(
  updateMemberClientAssociationRequest: UpdateMemberClientAssociationRequest,
): string {
  return JSON.stringify(
    UpdateMemberClientAssociationRequest$outboundSchema.parse(
      updateMemberClientAssociationRequest,
    ),
  );
}

export function updateMemberClientAssociationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMemberClientAssociationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMemberClientAssociationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMemberClientAssociationRequest' from JSON`,
  );
}

/** @internal */
export const UpdateMemberClientAssociationResponse$inboundSchema: z.ZodType<
  UpdateMemberClientAssociationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  MemberClientSchema: shared.MemberClientSchema$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "MemberClientSchema": "memberClientSchema",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdateMemberClientAssociationResponse$Outbound = {
  ContentType: string;
  MemberClientSchema?: shared.MemberClientSchema$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdateMemberClientAssociationResponse$outboundSchema: z.ZodType<
  UpdateMemberClientAssociationResponse$Outbound,
  z.ZodTypeDef,
  UpdateMemberClientAssociationResponse
> = z.object({
  contentType: z.string(),
  memberClientSchema: shared.MemberClientSchema$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    memberClientSchema: "MemberClientSchema",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMemberClientAssociationResponse$ {
  /** @deprecated use `UpdateMemberClientAssociationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMemberClientAssociationResponse$inboundSchema;
  /** @deprecated use `UpdateMemberClientAssociationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMemberClientAssociationResponse$outboundSchema;
  /** @deprecated use `UpdateMemberClientAssociationResponse$Outbound` instead. */
  export type Outbound = UpdateMemberClientAssociationResponse$Outbound;
}

export function updateMemberClientAssociationResponseToJSON(
  updateMemberClientAssociationResponse: UpdateMemberClientAssociationResponse,
): string {
  return JSON.stringify(
    UpdateMemberClientAssociationResponse$outboundSchema.parse(
      updateMemberClientAssociationResponse,
    ),
  );
}

export function updateMemberClientAssociationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMemberClientAssociationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMemberClientAssociationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMemberClientAssociationResponse' from JSON`,
  );
}

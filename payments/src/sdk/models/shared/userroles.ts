/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserRoles = {
  ownerIds: Array<string>;
  viewerIds: Array<string>;
};

/** @internal */
export const UserRoles$inboundSchema: z.ZodType<
  UserRoles,
  z.ZodTypeDef,
  unknown
> = z.object({
  ownerIds: z.array(z.string()),
  viewerIds: z.array(z.string()),
});

/** @internal */
export type UserRoles$Outbound = {
  ownerIds: Array<string>;
  viewerIds: Array<string>;
};

/** @internal */
export const UserRoles$outboundSchema: z.ZodType<
  UserRoles$Outbound,
  z.ZodTypeDef,
  UserRoles
> = z.object({
  ownerIds: z.array(z.string()),
  viewerIds: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserRoles$ {
  /** @deprecated use `UserRoles$inboundSchema` instead. */
  export const inboundSchema = UserRoles$inboundSchema;
  /** @deprecated use `UserRoles$outboundSchema` instead. */
  export const outboundSchema = UserRoles$outboundSchema;
  /** @deprecated use `UserRoles$Outbound` instead. */
  export type Outbound = UserRoles$Outbound;
}

export function userRolesToJSON(userRoles: UserRoles): string {
  return JSON.stringify(UserRoles$outboundSchema.parse(userRoles));
}

export function userRolesFromJSON(
  jsonString: string,
): SafeParseResult<UserRoles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserRoles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserRoles' from JSON`,
  );
}

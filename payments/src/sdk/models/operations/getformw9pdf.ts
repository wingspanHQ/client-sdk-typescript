/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetFormW9PDFRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetFormW9PDFResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A file stream for a W9 PDF download.
   */
  downloadW9Response?: shared.DownloadW9Response | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetFormW9PDFRequest$inboundSchema: z.ZodType<
  GetFormW9PDFRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetFormW9PDFRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetFormW9PDFRequest$outboundSchema: z.ZodType<
  GetFormW9PDFRequest$Outbound,
  z.ZodTypeDef,
  GetFormW9PDFRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormW9PDFRequest$ {
  /** @deprecated use `GetFormW9PDFRequest$inboundSchema` instead. */
  export const inboundSchema = GetFormW9PDFRequest$inboundSchema;
  /** @deprecated use `GetFormW9PDFRequest$outboundSchema` instead. */
  export const outboundSchema = GetFormW9PDFRequest$outboundSchema;
  /** @deprecated use `GetFormW9PDFRequest$Outbound` instead. */
  export type Outbound = GetFormW9PDFRequest$Outbound;
}

export function getFormW9PDFRequestToJSON(
  getFormW9PDFRequest: GetFormW9PDFRequest,
): string {
  return JSON.stringify(
    GetFormW9PDFRequest$outboundSchema.parse(getFormW9PDFRequest),
  );
}

export function getFormW9PDFRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFormW9PDFRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormW9PDFRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormW9PDFRequest' from JSON`,
  );
}

/** @internal */
export const GetFormW9PDFResponse$inboundSchema: z.ZodType<
  GetFormW9PDFResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DownloadW9Response: shared.DownloadW9Response$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "DownloadW9Response": "downloadW9Response",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetFormW9PDFResponse$Outbound = {
  ContentType: string;
  DownloadW9Response?: shared.DownloadW9Response$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetFormW9PDFResponse$outboundSchema: z.ZodType<
  GetFormW9PDFResponse$Outbound,
  z.ZodTypeDef,
  GetFormW9PDFResponse
> = z.object({
  contentType: z.string(),
  downloadW9Response: shared.DownloadW9Response$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    downloadW9Response: "DownloadW9Response",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormW9PDFResponse$ {
  /** @deprecated use `GetFormW9PDFResponse$inboundSchema` instead. */
  export const inboundSchema = GetFormW9PDFResponse$inboundSchema;
  /** @deprecated use `GetFormW9PDFResponse$outboundSchema` instead. */
  export const outboundSchema = GetFormW9PDFResponse$outboundSchema;
  /** @deprecated use `GetFormW9PDFResponse$Outbound` instead. */
  export type Outbound = GetFormW9PDFResponse$Outbound;
}

export function getFormW9PDFResponseToJSON(
  getFormW9PDFResponse: GetFormW9PDFResponse,
): string {
  return JSON.stringify(
    GetFormW9PDFResponse$outboundSchema.parse(getFormW9PDFResponse),
  );
}

export function getFormW9PDFResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFormW9PDFResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormW9PDFResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormW9PDFResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type InvoiceAmountDetails = {
    clientPaid: number;
    clientRefunded?: number | null | undefined;
    collaboratorPayments: number;
    deductions: number;
    memberGross: number;
    memberNet: number;
    memberTaxWithheld: number;
    processingFee: number;
    wingspanTopUp: number;
};

/** @internal */
export namespace InvoiceAmountDetails$ {
    export type Inbound = {
        clientPaid: number;
        clientRefunded?: number | null | undefined;
        collaboratorPayments: number;
        deductions: number;
        memberGross: number;
        memberNet: number;
        memberTaxWithheld: number;
        processingFee: number;
        wingspanTopUp: number;
    };

    export const inboundSchema: z.ZodType<InvoiceAmountDetails, z.ZodTypeDef, Inbound> = z
        .object({
            clientPaid: z.number(),
            clientRefunded: z.nullable(z.number()).optional(),
            collaboratorPayments: z.number(),
            deductions: z.number(),
            memberGross: z.number(),
            memberNet: z.number(),
            memberTaxWithheld: z.number(),
            processingFee: z.number(),
            wingspanTopUp: z.number(),
        })
        .transform((v) => {
            return {
                clientPaid: v.clientPaid,
                ...(v.clientRefunded === undefined ? null : { clientRefunded: v.clientRefunded }),
                collaboratorPayments: v.collaboratorPayments,
                deductions: v.deductions,
                memberGross: v.memberGross,
                memberNet: v.memberNet,
                memberTaxWithheld: v.memberTaxWithheld,
                processingFee: v.processingFee,
                wingspanTopUp: v.wingspanTopUp,
            };
        });

    export type Outbound = {
        clientPaid: number;
        clientRefunded?: number | null | undefined;
        collaboratorPayments: number;
        deductions: number;
        memberGross: number;
        memberNet: number;
        memberTaxWithheld: number;
        processingFee: number;
        wingspanTopUp: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceAmountDetails> = z
        .object({
            clientPaid: z.number(),
            clientRefunded: z.nullable(z.number()).optional(),
            collaboratorPayments: z.number(),
            deductions: z.number(),
            memberGross: z.number(),
            memberNet: z.number(),
            memberTaxWithheld: z.number(),
            processingFee: z.number(),
            wingspanTopUp: z.number(),
        })
        .transform((v) => {
            return {
                clientPaid: v.clientPaid,
                ...(v.clientRefunded === undefined ? null : { clientRefunded: v.clientRefunded }),
                collaboratorPayments: v.collaboratorPayments,
                deductions: v.deductions,
                memberGross: v.memberGross,
                memberNet: v.memberNet,
                memberTaxWithheld: v.memberTaxWithheld,
                processingFee: v.processingFee,
                wingspanTopUp: v.wingspanTopUp,
            };
        });
}

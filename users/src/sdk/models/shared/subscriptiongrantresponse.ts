/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RedactedMember, RedactedMember$ } from "./redactedmember";
import { RedactedUser, RedactedUser$ } from "./redacteduser";
import { UserRoles, UserRoles$ } from "./userroles";
import { z } from "zod";

export enum SubscriptionGrantResponsePackage {
    None = "None",
    Benefits = "Benefits",
    Essentials = "Essentials",
    Professional = "Professional",
    Corporate = "Corporate",
}

export enum SubscriptionGrantResponsePackageTier {
    Basic = "Basic",
    Premium = "Premium",
}

export enum SubscriptionGrantResponseStatus {
    Pending = "Pending",
    Active = "Active",
    Canceled = "Canceled",
}

export type SubscriptionGrantResponse = {
    createdAt: string;
    eventActors: Record<string, string>;
    granteeId: string;
    granteeMember: RedactedMember;
    granteeUser: RedactedUser;
    grantorMember: RedactedMember;
    grantorUser: RedactedUser;
    labels: Record<string, string>;
    memberId: string;
    package: SubscriptionGrantResponsePackage;
    packageTier: SubscriptionGrantResponsePackageTier;
    status: SubscriptionGrantResponseStatus;
    subscriptionGrantId: string;
    updatedAt: string;
    userRoles: UserRoles;
};

/** @internal */
export const SubscriptionGrantResponsePackage$ = z.nativeEnum(SubscriptionGrantResponsePackage);

/** @internal */
export const SubscriptionGrantResponsePackageTier$ = z.nativeEnum(
    SubscriptionGrantResponsePackageTier
);

/** @internal */
export const SubscriptionGrantResponseStatus$ = z.nativeEnum(SubscriptionGrantResponseStatus);

/** @internal */
export namespace SubscriptionGrantResponse$ {
    export type Inbound = {
        createdAt: string;
        eventActors: Record<string, string>;
        granteeId: string;
        granteeMember: RedactedMember$.Inbound;
        granteeUser: RedactedUser$.Inbound;
        grantorMember: RedactedMember$.Inbound;
        grantorUser: RedactedUser$.Inbound;
        labels: Record<string, string>;
        memberId: string;
        package: SubscriptionGrantResponsePackage;
        packageTier: SubscriptionGrantResponsePackageTier;
        status: SubscriptionGrantResponseStatus;
        subscriptionGrantId: string;
        updatedAt: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<SubscriptionGrantResponse, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z.string(),
            eventActors: z.record(z.string()),
            granteeId: z.string(),
            granteeMember: RedactedMember$.inboundSchema,
            granteeUser: RedactedUser$.inboundSchema,
            grantorMember: RedactedMember$.inboundSchema,
            grantorUser: RedactedUser$.inboundSchema,
            labels: z.record(z.string()),
            memberId: z.string(),
            package: SubscriptionGrantResponsePackage$,
            packageTier: SubscriptionGrantResponsePackageTier$,
            status: SubscriptionGrantResponseStatus$,
            subscriptionGrantId: z.string(),
            updatedAt: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                eventActors: v.eventActors,
                granteeId: v.granteeId,
                granteeMember: v.granteeMember,
                granteeUser: v.granteeUser,
                grantorMember: v.grantorMember,
                grantorUser: v.grantorUser,
                labels: v.labels,
                memberId: v.memberId,
                package: v.package,
                packageTier: v.packageTier,
                status: v.status,
                subscriptionGrantId: v.subscriptionGrantId,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        createdAt: string;
        eventActors: Record<string, string>;
        granteeId: string;
        granteeMember: RedactedMember$.Outbound;
        granteeUser: RedactedUser$.Outbound;
        grantorMember: RedactedMember$.Outbound;
        grantorUser: RedactedUser$.Outbound;
        labels: Record<string, string>;
        memberId: string;
        package: SubscriptionGrantResponsePackage;
        packageTier: SubscriptionGrantResponsePackageTier;
        status: SubscriptionGrantResponseStatus;
        subscriptionGrantId: string;
        updatedAt: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscriptionGrantResponse> = z
        .object({
            createdAt: z.string(),
            eventActors: z.record(z.string()),
            granteeId: z.string(),
            granteeMember: RedactedMember$.outboundSchema,
            granteeUser: RedactedUser$.outboundSchema,
            grantorMember: RedactedMember$.outboundSchema,
            grantorUser: RedactedUser$.outboundSchema,
            labels: z.record(z.string()),
            memberId: z.string(),
            package: SubscriptionGrantResponsePackage$,
            packageTier: SubscriptionGrantResponsePackageTier$,
            status: SubscriptionGrantResponseStatus$,
            subscriptionGrantId: z.string(),
            updatedAt: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                eventActors: v.eventActors,
                granteeId: v.granteeId,
                granteeMember: v.granteeMember,
                granteeUser: v.granteeUser,
                grantorMember: v.grantorMember,
                grantorUser: v.grantorUser,
                labels: v.labels,
                memberId: v.memberId,
                package: v.package,
                packageTier: v.packageTier,
                status: v.status,
                subscriptionGrantId: v.subscriptionGrantId,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });
}

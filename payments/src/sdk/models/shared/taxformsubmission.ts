/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaxFormSubmissionData, TaxFormSubmissionData$ } from "./taxformsubmissiondata";
import { TaxFormSubmissionEvents, TaxFormSubmissionEvents$ } from "./taxformsubmissionevents";
import { z } from "zod";

export enum CorrectionType {
    None = "None",
    Type1 = "Type1",
    Type2 = "Type2",
}

export enum TaxFormSubmissionDeliveryMethod {
    Electronic = "Electronic",
    Mail = "Mail",
}

export enum TaxFormSubmissionStatus {
    Pending = "Pending",
    ReadyToSubmitToIrs = "ReadyToSubmitToIrs",
    SubmittedToIrs = "SubmittedToIrs",
    AcceptedByIrs = "AcceptedByIrs",
    RejectedByIrs = "RejectedByIrs",
    PendingCorrection = "PendingCorrection",
    Excluded = "Excluded",
    Ineligible = "Ineligible",
}

export type TaxFormSubmission = {
    correctionType: CorrectionType;
    deliveryMethod: TaxFormSubmissionDeliveryMethod;
    events?: TaxFormSubmissionEvents | null | undefined;
    externalDocumentId: string;
    externalMailingId?: string | null | undefined;
    isCorrected: boolean;
    previousExternalMailingIds?: any | null | undefined;
    status: TaxFormSubmissionStatus;
    submissionData: TaxFormSubmissionData;
    submissionId: string;
};

/** @internal */
export const CorrectionType$ = z.nativeEnum(CorrectionType);

/** @internal */
export const TaxFormSubmissionDeliveryMethod$ = z.nativeEnum(TaxFormSubmissionDeliveryMethod);

/** @internal */
export const TaxFormSubmissionStatus$ = z.nativeEnum(TaxFormSubmissionStatus);

/** @internal */
export namespace TaxFormSubmission$ {
    export type Inbound = {
        correctionType: CorrectionType;
        deliveryMethod: TaxFormSubmissionDeliveryMethod;
        events?: TaxFormSubmissionEvents$.Inbound | null | undefined;
        externalDocumentId: string;
        externalMailingId?: string | null | undefined;
        isCorrected: boolean;
        previousExternalMailingIds?: any | null | undefined;
        status: TaxFormSubmissionStatus;
        submissionData: TaxFormSubmissionData$.Inbound;
        submissionId: string;
    };

    export const inboundSchema: z.ZodType<TaxFormSubmission, z.ZodTypeDef, Inbound> = z
        .object({
            correctionType: CorrectionType$,
            deliveryMethod: TaxFormSubmissionDeliveryMethod$,
            events: z.nullable(TaxFormSubmissionEvents$.inboundSchema).optional(),
            externalDocumentId: z.string(),
            externalMailingId: z.nullable(z.string()).optional(),
            isCorrected: z.boolean(),
            previousExternalMailingIds: z.nullable(z.any()).optional(),
            status: TaxFormSubmissionStatus$,
            submissionData: TaxFormSubmissionData$.inboundSchema,
            submissionId: z.string(),
        })
        .transform((v) => {
            return {
                correctionType: v.correctionType,
                deliveryMethod: v.deliveryMethod,
                ...(v.events === undefined ? null : { events: v.events }),
                externalDocumentId: v.externalDocumentId,
                ...(v.externalMailingId === undefined
                    ? null
                    : { externalMailingId: v.externalMailingId }),
                isCorrected: v.isCorrected,
                ...(v.previousExternalMailingIds === undefined
                    ? null
                    : { previousExternalMailingIds: v.previousExternalMailingIds }),
                status: v.status,
                submissionData: v.submissionData,
                submissionId: v.submissionId,
            };
        });

    export type Outbound = {
        correctionType: CorrectionType;
        deliveryMethod: TaxFormSubmissionDeliveryMethod;
        events?: TaxFormSubmissionEvents$.Outbound | null | undefined;
        externalDocumentId: string;
        externalMailingId?: string | null | undefined;
        isCorrected: boolean;
        previousExternalMailingIds?: any | null | undefined;
        status: TaxFormSubmissionStatus;
        submissionData: TaxFormSubmissionData$.Outbound;
        submissionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxFormSubmission> = z
        .object({
            correctionType: CorrectionType$,
            deliveryMethod: TaxFormSubmissionDeliveryMethod$,
            events: z.nullable(TaxFormSubmissionEvents$.outboundSchema).optional(),
            externalDocumentId: z.string(),
            externalMailingId: z.nullable(z.string()).optional(),
            isCorrected: z.boolean(),
            previousExternalMailingIds: z.nullable(z.any()).optional(),
            status: TaxFormSubmissionStatus$,
            submissionData: TaxFormSubmissionData$.outboundSchema,
            submissionId: z.string(),
        })
        .transform((v) => {
            return {
                correctionType: v.correctionType,
                deliveryMethod: v.deliveryMethod,
                ...(v.events === undefined ? null : { events: v.events }),
                externalDocumentId: v.externalDocumentId,
                ...(v.externalMailingId === undefined
                    ? null
                    : { externalMailingId: v.externalMailingId }),
                isCorrected: v.isCorrected,
                ...(v.previousExternalMailingIds === undefined
                    ? null
                    : { previousExternalMailingIds: v.previousExternalMailingIds }),
                status: v.status,
                submissionData: v.submissionData,
                submissionId: v.submissionId,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetCalculation1099BatchRequest = {
    /**
     * Unique identifier for a batch
     */
    batchId: string;
};

export type GetCalculation1099BatchResponse = {
    /**
     * A batch of items for importing as calculation 1099s
     */
    bulkCalculation1099Batch?: shared.BulkCalculation1099Batch | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetCalculation1099BatchRequest$ {
    export type Inbound = {
        batchId: string;
    };

    export const inboundSchema: z.ZodType<GetCalculation1099BatchRequest, z.ZodTypeDef, Inbound> = z
        .object({
            batchId: z.string(),
        })
        .transform((v) => {
            return {
                batchId: v.batchId,
            };
        });

    export type Outbound = {
        batchId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCalculation1099BatchRequest> =
        z
            .object({
                batchId: z.string(),
            })
            .transform((v) => {
                return {
                    batchId: v.batchId,
                };
            });
}

/** @internal */
export namespace GetCalculation1099BatchResponse$ {
    export type Inbound = {
        BulkCalculation1099Batch?: shared.BulkCalculation1099Batch$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetCalculation1099BatchResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                BulkCalculation1099Batch: shared.BulkCalculation1099Batch$.inboundSchema.optional(),
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    ...(v.BulkCalculation1099Batch === undefined
                        ? null
                        : { bulkCalculation1099Batch: v.BulkCalculation1099Batch }),
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        BulkCalculation1099Batch?: shared.BulkCalculation1099Batch$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCalculation1099BatchResponse
    > = z
        .object({
            bulkCalculation1099Batch: shared.BulkCalculation1099Batch$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.bulkCalculation1099Batch === undefined
                    ? null
                    : { BulkCalculation1099Batch: v.bulkCalculation1099Batch }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

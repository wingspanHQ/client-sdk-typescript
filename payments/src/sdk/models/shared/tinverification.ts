/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum TinVerificationStatus {
    Error = "error",
    LockedOut = "lockedOut",
    Mismatch = "mismatch",
    Pending = "pending",
    Unverified = "unverified",
    Verified = "verified",
}

export type TinVerification = {
    lastVerifiedTimestamp: number;
    message: string;
    status: TinVerificationStatus;
    unlockTimestamp: number;
};

/** @internal */
export const TinVerificationStatus$ = z.nativeEnum(TinVerificationStatus);

/** @internal */
export namespace TinVerification$ {
    export type Inbound = {
        lastVerifiedTimestamp: number;
        message: string;
        status: TinVerificationStatus;
        unlockTimestamp: number;
    };

    export const inboundSchema: z.ZodType<TinVerification, z.ZodTypeDef, Inbound> = z
        .object({
            lastVerifiedTimestamp: z.number(),
            message: z.string(),
            status: TinVerificationStatus$,
            unlockTimestamp: z.number(),
        })
        .transform((v) => {
            return {
                lastVerifiedTimestamp: v.lastVerifiedTimestamp,
                message: v.message,
                status: v.status,
                unlockTimestamp: v.unlockTimestamp,
            };
        });

    export type Outbound = {
        lastVerifiedTimestamp: number;
        message: string;
        status: TinVerificationStatus;
        unlockTimestamp: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TinVerification> = z
        .object({
            lastVerifiedTimestamp: z.number(),
            message: z.string(),
            status: TinVerificationStatus$,
            unlockTimestamp: z.number(),
        })
        .transform((v) => {
            return {
                lastVerifiedTimestamp: v.lastVerifiedTimestamp,
                message: v.message,
                status: v.status,
                unlockTimestamp: v.unlockTimestamp,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateTaxFormRequest = {
    taxFormUpdateRequest?: shared.TaxFormUpdateRequest | undefined;
    /**
     * Unique tax Form Id
     */
    taxFormId: string;
};

export type UpdateTaxFormResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * 1099 Tax form object
     */
    taxFormResponse?: any | undefined;
};

/** @internal */
export namespace UpdateTaxFormRequest$ {
    export type Inbound = {
        TaxFormUpdateRequest?: shared.TaxFormUpdateRequest$.Inbound | undefined;
        taxFormId: string;
    };

    export const inboundSchema: z.ZodType<UpdateTaxFormRequest, z.ZodTypeDef, Inbound> = z
        .object({
            TaxFormUpdateRequest: shared.TaxFormUpdateRequest$.inboundSchema.optional(),
            taxFormId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.TaxFormUpdateRequest === undefined
                    ? null
                    : { taxFormUpdateRequest: v.TaxFormUpdateRequest }),
                taxFormId: v.taxFormId,
            };
        });

    export type Outbound = {
        TaxFormUpdateRequest?: shared.TaxFormUpdateRequest$.Outbound | undefined;
        taxFormId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTaxFormRequest> = z
        .object({
            taxFormUpdateRequest: shared.TaxFormUpdateRequest$.outboundSchema.optional(),
            taxFormId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.taxFormUpdateRequest === undefined
                    ? null
                    : { TaxFormUpdateRequest: v.taxFormUpdateRequest }),
                taxFormId: v.taxFormId,
            };
        });
}

/** @internal */
export namespace UpdateTaxFormResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        TaxFormResponse?: any | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateTaxFormResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TaxFormResponse: z.any().optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TaxFormResponse === undefined
                    ? null
                    : { taxFormResponse: v.TaxFormResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TaxFormResponse?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTaxFormResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            taxFormResponse: z.any().optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.taxFormResponse === undefined
                    ? null
                    : { TaxFormResponse: v.taxFormResponse }),
            };
        });
}

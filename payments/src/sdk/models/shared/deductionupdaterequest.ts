/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeductionUpdateRequestCurrency = {
  Usd: "USD",
  Cad: "CAD",
} as const;
export type DeductionUpdateRequestCurrency = ClosedEnum<
  typeof DeductionUpdateRequestCurrency
>;

export const DeductionUpdateRequestType = {
  PrePayment: "PrePayment",
  PostPayment: "PostPayment",
} as const;
export type DeductionUpdateRequestType = ClosedEnum<
  typeof DeductionUpdateRequestType
>;

export type DeductionUpdateRequest = {
  amount?: number | null | undefined;
  currency?: DeductionUpdateRequestCurrency | null | undefined;
  name?: string | null | undefined;
  priority?: number | null | undefined;
  sourceInvoiceId?: string | null | undefined;
  startDate?: string | null | undefined;
  type?: DeductionUpdateRequestType | null | undefined;
};

/** @internal */
export const DeductionUpdateRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof DeductionUpdateRequestCurrency
> = z.nativeEnum(DeductionUpdateRequestCurrency);

/** @internal */
export const DeductionUpdateRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof DeductionUpdateRequestCurrency
> = DeductionUpdateRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionUpdateRequestCurrency$ {
  /** @deprecated use `DeductionUpdateRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = DeductionUpdateRequestCurrency$inboundSchema;
  /** @deprecated use `DeductionUpdateRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = DeductionUpdateRequestCurrency$outboundSchema;
}

/** @internal */
export const DeductionUpdateRequestType$inboundSchema: z.ZodNativeEnum<
  typeof DeductionUpdateRequestType
> = z.nativeEnum(DeductionUpdateRequestType);

/** @internal */
export const DeductionUpdateRequestType$outboundSchema: z.ZodNativeEnum<
  typeof DeductionUpdateRequestType
> = DeductionUpdateRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionUpdateRequestType$ {
  /** @deprecated use `DeductionUpdateRequestType$inboundSchema` instead. */
  export const inboundSchema = DeductionUpdateRequestType$inboundSchema;
  /** @deprecated use `DeductionUpdateRequestType$outboundSchema` instead. */
  export const outboundSchema = DeductionUpdateRequestType$outboundSchema;
}

/** @internal */
export const DeductionUpdateRequest$inboundSchema: z.ZodType<
  DeductionUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.nullable(z.number()).optional(),
  currency: z.nullable(DeductionUpdateRequestCurrency$inboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  priority: z.nullable(z.number()).optional(),
  sourceInvoiceId: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.string()).optional(),
  type: z.nullable(DeductionUpdateRequestType$inboundSchema).optional(),
});

/** @internal */
export type DeductionUpdateRequest$Outbound = {
  amount?: number | null | undefined;
  currency?: string | null | undefined;
  name?: string | null | undefined;
  priority?: number | null | undefined;
  sourceInvoiceId?: string | null | undefined;
  startDate?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const DeductionUpdateRequest$outboundSchema: z.ZodType<
  DeductionUpdateRequest$Outbound,
  z.ZodTypeDef,
  DeductionUpdateRequest
> = z.object({
  amount: z.nullable(z.number()).optional(),
  currency: z.nullable(DeductionUpdateRequestCurrency$outboundSchema)
    .optional(),
  name: z.nullable(z.string()).optional(),
  priority: z.nullable(z.number()).optional(),
  sourceInvoiceId: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.string()).optional(),
  type: z.nullable(DeductionUpdateRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductionUpdateRequest$ {
  /** @deprecated use `DeductionUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = DeductionUpdateRequest$inboundSchema;
  /** @deprecated use `DeductionUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = DeductionUpdateRequest$outboundSchema;
  /** @deprecated use `DeductionUpdateRequest$Outbound` instead. */
  export type Outbound = DeductionUpdateRequest$Outbound;
}

export function deductionUpdateRequestToJSON(
  deductionUpdateRequest: DeductionUpdateRequest,
): string {
  return JSON.stringify(
    DeductionUpdateRequest$outboundSchema.parse(deductionUpdateRequest),
  );
}

export function deductionUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeductionUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeductionUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeductionUpdateRequest' from JSON`,
  );
}

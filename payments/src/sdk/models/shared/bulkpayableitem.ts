/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb,
    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$inboundSchema,
    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$Outbound,
    Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$outboundSchema,
} from "./ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb.js";
import {
    InvoiceIntegrations,
    InvoiceIntegrations$inboundSchema,
    InvoiceIntegrations$Outbound,
    InvoiceIntegrations$outboundSchema,
} from "./invoiceintegrations.js";
import {
    UserRoles,
    UserRoles$inboundSchema,
    UserRoles$Outbound,
    UserRoles$outboundSchema,
} from "./userroles.js";
import * as z from "zod";

export const PayableStatus = {
    Draft: "Draft",
    Open: "Open",
    Approved: "Approved",
    Paid: "Paid",
    Cancelled: "Cancelled",
} as const;
export type PayableStatus = ClosedEnum<typeof PayableStatus>;

export const BulkPayableItemStatus = {
    Open: "Open",
    Pending: "Pending",
    Processing: "Processing",
    Complete: "Complete",
    Failed: "Failed",
} as const;
export type BulkPayableItemStatus = ClosedEnum<typeof BulkPayableItemStatus>;

export const WorkflowSubStatus = {
    Submitted: "Submitted",
} as const;
export type WorkflowSubStatus = ClosedEnum<typeof WorkflowSubStatus>;

export type BulkPayableItem = {
    amount: number;
    attachmentId?: string | null | undefined;
    bulkPayableBatchId: string;
    bulkPayableItemId: string;
    bulkPayableItemMergeKey?: string | null | undefined;
    bulkPayableItemReference?: string | null | undefined;
    clientId: string;
    collaboratorEmail?: string | null | undefined;
    collaboratorExternalId?: string | null | undefined;
    collaboratorId?: string | null | undefined;
    createdAt: string;
    dueDate: string;
    eventActors: { [k: string]: string };
    integration?: InvoiceIntegrations | null | undefined;
    labels: { [k: string]: string };
    lineItemDescription: string;
    lineItemDetail?: string | null | undefined;
    metadata?: Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb | null | undefined;
    paidDate: string;
    payableNotes?: string | null | undefined;
    payableStatus: PayableStatus;
    reimbursableExpense?: boolean | null | undefined;
    status: BulkPayableItemStatus;
    updatedAt: string;
    userRoles: UserRoles;
    workflowSubStatus?: WorkflowSubStatus | null | undefined;
};

/** @internal */
export const PayableStatus$inboundSchema: z.ZodNativeEnum<typeof PayableStatus> =
    z.nativeEnum(PayableStatus);

/** @internal */
export const PayableStatus$outboundSchema: z.ZodNativeEnum<typeof PayableStatus> =
    PayableStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayableStatus$ {
    /** @deprecated use `PayableStatus$inboundSchema` instead. */
    export const inboundSchema = PayableStatus$inboundSchema;
    /** @deprecated use `PayableStatus$outboundSchema` instead. */
    export const outboundSchema = PayableStatus$outboundSchema;
}

/** @internal */
export const BulkPayableItemStatus$inboundSchema: z.ZodNativeEnum<typeof BulkPayableItemStatus> =
    z.nativeEnum(BulkPayableItemStatus);

/** @internal */
export const BulkPayableItemStatus$outboundSchema: z.ZodNativeEnum<typeof BulkPayableItemStatus> =
    BulkPayableItemStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkPayableItemStatus$ {
    /** @deprecated use `BulkPayableItemStatus$inboundSchema` instead. */
    export const inboundSchema = BulkPayableItemStatus$inboundSchema;
    /** @deprecated use `BulkPayableItemStatus$outboundSchema` instead. */
    export const outboundSchema = BulkPayableItemStatus$outboundSchema;
}

/** @internal */
export const WorkflowSubStatus$inboundSchema: z.ZodNativeEnum<typeof WorkflowSubStatus> =
    z.nativeEnum(WorkflowSubStatus);

/** @internal */
export const WorkflowSubStatus$outboundSchema: z.ZodNativeEnum<typeof WorkflowSubStatus> =
    WorkflowSubStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowSubStatus$ {
    /** @deprecated use `WorkflowSubStatus$inboundSchema` instead. */
    export const inboundSchema = WorkflowSubStatus$inboundSchema;
    /** @deprecated use `WorkflowSubStatus$outboundSchema` instead. */
    export const outboundSchema = WorkflowSubStatus$outboundSchema;
}

/** @internal */
export const BulkPayableItem$inboundSchema: z.ZodType<BulkPayableItem, z.ZodTypeDef, unknown> =
    z.object({
        amount: z.number(),
        attachmentId: z.nullable(z.string()).optional(),
        bulkPayableBatchId: z.string(),
        bulkPayableItemId: z.string(),
        bulkPayableItemMergeKey: z.nullable(z.string()).optional(),
        bulkPayableItemReference: z.nullable(z.string()).optional(),
        clientId: z.string(),
        collaboratorEmail: z.nullable(z.string()).optional(),
        collaboratorExternalId: z.nullable(z.string()).optional(),
        collaboratorId: z.nullable(z.string()).optional(),
        createdAt: z.string(),
        dueDate: z.string(),
        eventActors: z.record(z.string()),
        integration: z.nullable(InvoiceIntegrations$inboundSchema).optional(),
        labels: z.record(z.string()),
        lineItemDescription: z.string(),
        lineItemDetail: z.nullable(z.string()).optional(),
        metadata: z
            .nullable(
                Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$inboundSchema
            )
            .optional(),
        paidDate: z.string(),
        payableNotes: z.nullable(z.string()).optional(),
        payableStatus: PayableStatus$inboundSchema,
        reimbursableExpense: z.nullable(z.boolean()).optional(),
        status: BulkPayableItemStatus$inboundSchema,
        updatedAt: z.string(),
        userRoles: UserRoles$inboundSchema,
        workflowSubStatus: z.nullable(WorkflowSubStatus$inboundSchema).optional(),
    });

/** @internal */
export type BulkPayableItem$Outbound = {
    amount: number;
    attachmentId?: string | null | undefined;
    bulkPayableBatchId: string;
    bulkPayableItemId: string;
    bulkPayableItemMergeKey?: string | null | undefined;
    bulkPayableItemReference?: string | null | undefined;
    clientId: string;
    collaboratorEmail?: string | null | undefined;
    collaboratorExternalId?: string | null | undefined;
    collaboratorId?: string | null | undefined;
    createdAt: string;
    dueDate: string;
    eventActors: { [k: string]: string };
    integration?: InvoiceIntegrations$Outbound | null | undefined;
    labels: { [k: string]: string };
    lineItemDescription: string;
    lineItemDetail?: string | null | undefined;
    metadata?:
        | Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$Outbound
        | null
        | undefined;
    paidDate: string;
    payableNotes?: string | null | undefined;
    payableStatus: string;
    reimbursableExpense?: boolean | null | undefined;
    status: string;
    updatedAt: string;
    userRoles: UserRoles$Outbound;
    workflowSubStatus?: string | null | undefined;
};

/** @internal */
export const BulkPayableItem$outboundSchema: z.ZodType<
    BulkPayableItem$Outbound,
    z.ZodTypeDef,
    BulkPayableItem
> = z.object({
    amount: z.number(),
    attachmentId: z.nullable(z.string()).optional(),
    bulkPayableBatchId: z.string(),
    bulkPayableItemId: z.string(),
    bulkPayableItemMergeKey: z.nullable(z.string()).optional(),
    bulkPayableItemReference: z.nullable(z.string()).optional(),
    clientId: z.string(),
    collaboratorEmail: z.nullable(z.string()).optional(),
    collaboratorExternalId: z.nullable(z.string()).optional(),
    collaboratorId: z.nullable(z.string()).optional(),
    createdAt: z.string(),
    dueDate: z.string(),
    eventActors: z.record(z.string()),
    integration: z.nullable(InvoiceIntegrations$outboundSchema).optional(),
    labels: z.record(z.string()),
    lineItemDescription: z.string(),
    lineItemDetail: z.nullable(z.string()).optional(),
    metadata: z
        .nullable(Ff870c34e17f41323279d1c2fe8e2d03accac4d93d8aa050ddce7dbba094dbcb$outboundSchema)
        .optional(),
    paidDate: z.string(),
    payableNotes: z.nullable(z.string()).optional(),
    payableStatus: PayableStatus$outboundSchema,
    reimbursableExpense: z.nullable(z.boolean()).optional(),
    status: BulkPayableItemStatus$outboundSchema,
    updatedAt: z.string(),
    userRoles: UserRoles$outboundSchema,
    workflowSubStatus: z.nullable(WorkflowSubStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkPayableItem$ {
    /** @deprecated use `BulkPayableItem$inboundSchema` instead. */
    export const inboundSchema = BulkPayableItem$inboundSchema;
    /** @deprecated use `BulkPayableItem$outboundSchema` instead. */
    export const outboundSchema = BulkPayableItem$outboundSchema;
    /** @deprecated use `BulkPayableItem$Outbound` instead. */
    export type Outbound = BulkPayableItem$Outbound;
}

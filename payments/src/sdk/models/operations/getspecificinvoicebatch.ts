/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetSpecificInvoiceBatchRequest = {
  /**
   * Unique identifier for a batch
   */
  batchId: string;
  /**
   * Unique identifier for an item in a batch
   */
  batchItemId: string;
};

export type GetSpecificInvoiceBatchResponse = {
  /**
   * An item that will be converted into a invoice
   */
  bulkInvoiceItem?: shared.BulkInvoiceItem | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetSpecificInvoiceBatchRequest$inboundSchema: z.ZodType<
  GetSpecificInvoiceBatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batchId: z.string(),
  batchItemId: z.string(),
});

/** @internal */
export type GetSpecificInvoiceBatchRequest$Outbound = {
  batchId: string;
  batchItemId: string;
};

/** @internal */
export const GetSpecificInvoiceBatchRequest$outboundSchema: z.ZodType<
  GetSpecificInvoiceBatchRequest$Outbound,
  z.ZodTypeDef,
  GetSpecificInvoiceBatchRequest
> = z.object({
  batchId: z.string(),
  batchItemId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpecificInvoiceBatchRequest$ {
  /** @deprecated use `GetSpecificInvoiceBatchRequest$inboundSchema` instead. */
  export const inboundSchema = GetSpecificInvoiceBatchRequest$inboundSchema;
  /** @deprecated use `GetSpecificInvoiceBatchRequest$outboundSchema` instead. */
  export const outboundSchema = GetSpecificInvoiceBatchRequest$outboundSchema;
  /** @deprecated use `GetSpecificInvoiceBatchRequest$Outbound` instead. */
  export type Outbound = GetSpecificInvoiceBatchRequest$Outbound;
}

export function getSpecificInvoiceBatchRequestToJSON(
  getSpecificInvoiceBatchRequest: GetSpecificInvoiceBatchRequest,
): string {
  return JSON.stringify(
    GetSpecificInvoiceBatchRequest$outboundSchema.parse(
      getSpecificInvoiceBatchRequest,
    ),
  );
}

export function getSpecificInvoiceBatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSpecificInvoiceBatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpecificInvoiceBatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpecificInvoiceBatchRequest' from JSON`,
  );
}

/** @internal */
export const GetSpecificInvoiceBatchResponse$inboundSchema: z.ZodType<
  GetSpecificInvoiceBatchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkInvoiceItem: shared.BulkInvoiceItem$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkInvoiceItem": "bulkInvoiceItem",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetSpecificInvoiceBatchResponse$Outbound = {
  BulkInvoiceItem?: shared.BulkInvoiceItem$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetSpecificInvoiceBatchResponse$outboundSchema: z.ZodType<
  GetSpecificInvoiceBatchResponse$Outbound,
  z.ZodTypeDef,
  GetSpecificInvoiceBatchResponse
> = z.object({
  bulkInvoiceItem: shared.BulkInvoiceItem$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkInvoiceItem: "BulkInvoiceItem",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpecificInvoiceBatchResponse$ {
  /** @deprecated use `GetSpecificInvoiceBatchResponse$inboundSchema` instead. */
  export const inboundSchema = GetSpecificInvoiceBatchResponse$inboundSchema;
  /** @deprecated use `GetSpecificInvoiceBatchResponse$outboundSchema` instead. */
  export const outboundSchema = GetSpecificInvoiceBatchResponse$outboundSchema;
  /** @deprecated use `GetSpecificInvoiceBatchResponse$Outbound` instead. */
  export type Outbound = GetSpecificInvoiceBatchResponse$Outbound;
}

export function getSpecificInvoiceBatchResponseToJSON(
  getSpecificInvoiceBatchResponse: GetSpecificInvoiceBatchResponse,
): string {
  return JSON.stringify(
    GetSpecificInvoiceBatchResponse$outboundSchema.parse(
      getSpecificInvoiceBatchResponse,
    ),
  );
}

export function getSpecificInvoiceBatchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSpecificInvoiceBatchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpecificInvoiceBatchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpecificInvoiceBatchResponse' from JSON`,
  );
}

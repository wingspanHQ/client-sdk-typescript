/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RedactedUser,
  RedactedUser$inboundSchema,
  RedactedUser$Outbound,
  RedactedUser$outboundSchema,
} from "./redacteduser.js";
import {
  TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb,
  TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb$inboundSchema,
  TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb$Outbound,
  TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb$outboundSchema,
} from "./twentythreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb.js";

export type RedactedMember = {
  profile?:
    | TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb
    | null
    | undefined;
  user: RedactedUser;
};

/** @internal */
export const RedactedMember$inboundSchema: z.ZodType<
  RedactedMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  profile: z.nullable(
    TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb$inboundSchema,
  ).optional(),
  user: RedactedUser$inboundSchema,
});

/** @internal */
export type RedactedMember$Outbound = {
  profile?:
    | TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb$Outbound
    | null
    | undefined;
  user: RedactedUser$Outbound;
};

/** @internal */
export const RedactedMember$outboundSchema: z.ZodType<
  RedactedMember$Outbound,
  z.ZodTypeDef,
  RedactedMember
> = z.object({
  profile: z.nullable(
    TwentyThreed776fc12e56286a20f36065e4f942c43a28218a62eb2f211116c130deb74eb$outboundSchema,
  ).optional(),
  user: RedactedUser$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedactedMember$ {
  /** @deprecated use `RedactedMember$inboundSchema` instead. */
  export const inboundSchema = RedactedMember$inboundSchema;
  /** @deprecated use `RedactedMember$outboundSchema` instead. */
  export const outboundSchema = RedactedMember$outboundSchema;
  /** @deprecated use `RedactedMember$Outbound` instead. */
  export type Outbound = RedactedMember$Outbound;
}

export function redactedMemberToJSON(redactedMember: RedactedMember): string {
  return JSON.stringify(RedactedMember$outboundSchema.parse(redactedMember));
}

export function redactedMemberFromJSON(
  jsonString: string,
): SafeParseResult<RedactedMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedactedMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedactedMember' from JSON`,
  );
}

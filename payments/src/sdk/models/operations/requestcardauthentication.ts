/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type RequestCardAuthenticationRequest = {
    cardCodeRequest?: shared.CardCodeRequest | undefined;
    /**
     * Unique identifier
     */
    id: string;
};

export type RequestCardAuthenticationResponse = {
    /**
     * A card code response
     */
    cardCodeResponse?: shared.CardCodeResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace RequestCardAuthenticationRequest$ {
    export type Inbound = {
        CardCodeRequest?: shared.CardCodeRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<RequestCardAuthenticationRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                CardCodeRequest: shared.CardCodeRequest$.inboundSchema.optional(),
                id: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.CardCodeRequest === undefined
                        ? null
                        : { cardCodeRequest: v.CardCodeRequest }),
                    id: v.id,
                };
            });

    export type Outbound = {
        CardCodeRequest?: shared.CardCodeRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestCardAuthenticationRequest
    > = z
        .object({
            cardCodeRequest: shared.CardCodeRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.cardCodeRequest === undefined
                    ? null
                    : { CardCodeRequest: v.cardCodeRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace RequestCardAuthenticationResponse$ {
    export type Inbound = {
        CardCodeResponse?: shared.CardCodeResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        RequestCardAuthenticationResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            CardCodeResponse: shared.CardCodeResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.CardCodeResponse === undefined
                    ? null
                    : { cardCodeResponse: v.CardCodeResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        CardCodeResponse?: shared.CardCodeResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestCardAuthenticationResponse
    > = z
        .object({
            cardCodeResponse: shared.CardCodeResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.cardCodeResponse === undefined
                    ? null
                    : { CardCodeResponse: v.cardCodeResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

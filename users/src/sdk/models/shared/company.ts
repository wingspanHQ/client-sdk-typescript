/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CompanyLinks, CompanyLinks$ } from "./companylinks";
import { CompanyPerson, CompanyPerson$ } from "./companyperson";
import { z } from "zod";

export enum Structure {
    None = "None",
    SoleProprietorship = "SoleProprietorship",
    LlcSingleMember = "LlcSingleMember",
    LlcMultiMember = "LlcMultiMember",
    CorporationS = "CorporationS",
    LLCCorporationS = "LLCCorporationS",
    LLCCorporationC = "LLCCorporationC",
    LLCPartnership = "LLCPartnership",
    CorporationC = "CorporationC",
    Partnership = "Partnership",
}

export type Company = {
    banking?: boolean | null | undefined;
    companyOwners?: Array<CompanyPerson> | null | undefined;
    description?: string | null | undefined;
    disregardedEntityName?: string | null | undefined;
    legalBusinessName?: string | null | undefined;
    links?: CompanyLinks | null | undefined;
    name?: string | null | undefined;
    stateOfIncorporation?: string | null | undefined;
    structure?: Structure | null | undefined;
    supportEmail?: string | null | undefined;
    taxId?: string | null | undefined;
    website?: string | null | undefined;
    yearOfIncorporation?: string | null | undefined;
};

/** @internal */
export const Structure$ = z.nativeEnum(Structure);

/** @internal */
export namespace Company$ {
    export type Inbound = {
        banking?: boolean | null | undefined;
        companyOwners?: Array<CompanyPerson$.Inbound> | null | undefined;
        description?: string | null | undefined;
        disregardedEntityName?: string | null | undefined;
        legalBusinessName?: string | null | undefined;
        links?: CompanyLinks$.Inbound | null | undefined;
        name?: string | null | undefined;
        stateOfIncorporation?: string | null | undefined;
        structure?: Structure | null | undefined;
        supportEmail?: string | null | undefined;
        taxId?: string | null | undefined;
        website?: string | null | undefined;
        yearOfIncorporation?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Company, z.ZodTypeDef, Inbound> = z
        .object({
            banking: z.nullable(z.boolean()).optional(),
            companyOwners: z.nullable(z.array(CompanyPerson$.inboundSchema)).optional(),
            description: z.nullable(z.string()).optional(),
            disregardedEntityName: z.nullable(z.string()).optional(),
            legalBusinessName: z.nullable(z.string()).optional(),
            links: z.nullable(CompanyLinks$.inboundSchema).optional(),
            name: z.nullable(z.string()).optional(),
            stateOfIncorporation: z.nullable(z.string()).optional(),
            structure: z.nullable(Structure$).optional(),
            supportEmail: z.nullable(z.string()).optional(),
            taxId: z.nullable(z.string()).optional(),
            website: z.nullable(z.string()).optional(),
            yearOfIncorporation: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.banking === undefined ? null : { banking: v.banking }),
                ...(v.companyOwners === undefined ? null : { companyOwners: v.companyOwners }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.disregardedEntityName === undefined
                    ? null
                    : { disregardedEntityName: v.disregardedEntityName }),
                ...(v.legalBusinessName === undefined
                    ? null
                    : { legalBusinessName: v.legalBusinessName }),
                ...(v.links === undefined ? null : { links: v.links }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.stateOfIncorporation === undefined
                    ? null
                    : { stateOfIncorporation: v.stateOfIncorporation }),
                ...(v.structure === undefined ? null : { structure: v.structure }),
                ...(v.supportEmail === undefined ? null : { supportEmail: v.supportEmail }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.yearOfIncorporation === undefined
                    ? null
                    : { yearOfIncorporation: v.yearOfIncorporation }),
            };
        });

    export type Outbound = {
        banking?: boolean | null | undefined;
        companyOwners?: Array<CompanyPerson$.Outbound> | null | undefined;
        description?: string | null | undefined;
        disregardedEntityName?: string | null | undefined;
        legalBusinessName?: string | null | undefined;
        links?: CompanyLinks$.Outbound | null | undefined;
        name?: string | null | undefined;
        stateOfIncorporation?: string | null | undefined;
        structure?: Structure | null | undefined;
        supportEmail?: string | null | undefined;
        taxId?: string | null | undefined;
        website?: string | null | undefined;
        yearOfIncorporation?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Company> = z
        .object({
            banking: z.nullable(z.boolean()).optional(),
            companyOwners: z.nullable(z.array(CompanyPerson$.outboundSchema)).optional(),
            description: z.nullable(z.string()).optional(),
            disregardedEntityName: z.nullable(z.string()).optional(),
            legalBusinessName: z.nullable(z.string()).optional(),
            links: z.nullable(CompanyLinks$.outboundSchema).optional(),
            name: z.nullable(z.string()).optional(),
            stateOfIncorporation: z.nullable(z.string()).optional(),
            structure: z.nullable(Structure$).optional(),
            supportEmail: z.nullable(z.string()).optional(),
            taxId: z.nullable(z.string()).optional(),
            website: z.nullable(z.string()).optional(),
            yearOfIncorporation: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.banking === undefined ? null : { banking: v.banking }),
                ...(v.companyOwners === undefined ? null : { companyOwners: v.companyOwners }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.disregardedEntityName === undefined
                    ? null
                    : { disregardedEntityName: v.disregardedEntityName }),
                ...(v.legalBusinessName === undefined
                    ? null
                    : { legalBusinessName: v.legalBusinessName }),
                ...(v.links === undefined ? null : { links: v.links }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.stateOfIncorporation === undefined
                    ? null
                    : { stateOfIncorporation: v.stateOfIncorporation }),
                ...(v.structure === undefined ? null : { structure: v.structure }),
                ...(v.supportEmail === undefined ? null : { supportEmail: v.supportEmail }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.yearOfIncorporation === undefined
                    ? null
                    : { yearOfIncorporation: v.yearOfIncorporation }),
            };
        });
}

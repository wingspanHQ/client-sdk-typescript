/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type UpdateCollaboratorGroupConfigurationRequest = {
  collaboratorGroupUpdateRequest?:
    | shared.CollaboratorGroupUpdateRequest
    | undefined;
  /**
   * Unique identifier
   */
  id: string;
};

export type UpdateCollaboratorGroupConfigurationResponse = {
  /**
   * Collaborator Configuration Per Group
   */
  collaboratorGroupResponse?: shared.CollaboratorGroupResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdateCollaboratorGroupConfigurationRequest$inboundSchema:
  z.ZodType<
    UpdateCollaboratorGroupConfigurationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    CollaboratorGroupUpdateRequest: shared
      .CollaboratorGroupUpdateRequest$inboundSchema.optional(),
    id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "CollaboratorGroupUpdateRequest": "collaboratorGroupUpdateRequest",
    });
  });

/** @internal */
export type UpdateCollaboratorGroupConfigurationRequest$Outbound = {
  CollaboratorGroupUpdateRequest?:
    | shared.CollaboratorGroupUpdateRequest$Outbound
    | undefined;
  id: string;
};

/** @internal */
export const UpdateCollaboratorGroupConfigurationRequest$outboundSchema:
  z.ZodType<
    UpdateCollaboratorGroupConfigurationRequest$Outbound,
    z.ZodTypeDef,
    UpdateCollaboratorGroupConfigurationRequest
  > = z.object({
    collaboratorGroupUpdateRequest: shared
      .CollaboratorGroupUpdateRequest$outboundSchema.optional(),
    id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      collaboratorGroupUpdateRequest: "CollaboratorGroupUpdateRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCollaboratorGroupConfigurationRequest$ {
  /** @deprecated use `UpdateCollaboratorGroupConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCollaboratorGroupConfigurationRequest$inboundSchema;
  /** @deprecated use `UpdateCollaboratorGroupConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCollaboratorGroupConfigurationRequest$outboundSchema;
  /** @deprecated use `UpdateCollaboratorGroupConfigurationRequest$Outbound` instead. */
  export type Outbound = UpdateCollaboratorGroupConfigurationRequest$Outbound;
}

/** @internal */
export const UpdateCollaboratorGroupConfigurationResponse$inboundSchema:
  z.ZodType<
    UpdateCollaboratorGroupConfigurationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    CollaboratorGroupResponse: shared.CollaboratorGroupResponse$inboundSchema
      .optional(),
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "CollaboratorGroupResponse": "collaboratorGroupResponse",
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type UpdateCollaboratorGroupConfigurationResponse$Outbound = {
  CollaboratorGroupResponse?:
    | shared.CollaboratorGroupResponse$Outbound
    | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdateCollaboratorGroupConfigurationResponse$outboundSchema:
  z.ZodType<
    UpdateCollaboratorGroupConfigurationResponse$Outbound,
    z.ZodTypeDef,
    UpdateCollaboratorGroupConfigurationResponse
  > = z.object({
    collaboratorGroupResponse: shared.CollaboratorGroupResponse$outboundSchema
      .optional(),
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      collaboratorGroupResponse: "CollaboratorGroupResponse",
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCollaboratorGroupConfigurationResponse$ {
  /** @deprecated use `UpdateCollaboratorGroupConfigurationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCollaboratorGroupConfigurationResponse$inboundSchema;
  /** @deprecated use `UpdateCollaboratorGroupConfigurationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCollaboratorGroupConfigurationResponse$outboundSchema;
  /** @deprecated use `UpdateCollaboratorGroupConfigurationResponse$Outbound` instead. */
  export type Outbound = UpdateCollaboratorGroupConfigurationResponse$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type ListSpecificCollaboratorDetailsRequest = {
  /**
   * Unique identifier of a member
   */
  memberId: string;
};

export type ListSpecificCollaboratorDetailsResponse = {
  /**
   * A single V2 Collaborator
   */
  collaboratorV2?: shared.CollaboratorV2 | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ListSpecificCollaboratorDetailsRequest$inboundSchema: z.ZodType<
  ListSpecificCollaboratorDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memberId: z.string(),
});

/** @internal */
export type ListSpecificCollaboratorDetailsRequest$Outbound = {
  memberId: string;
};

/** @internal */
export const ListSpecificCollaboratorDetailsRequest$outboundSchema: z.ZodType<
  ListSpecificCollaboratorDetailsRequest$Outbound,
  z.ZodTypeDef,
  ListSpecificCollaboratorDetailsRequest
> = z.object({
  memberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpecificCollaboratorDetailsRequest$ {
  /** @deprecated use `ListSpecificCollaboratorDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListSpecificCollaboratorDetailsRequest$inboundSchema;
  /** @deprecated use `ListSpecificCollaboratorDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListSpecificCollaboratorDetailsRequest$outboundSchema;
  /** @deprecated use `ListSpecificCollaboratorDetailsRequest$Outbound` instead. */
  export type Outbound = ListSpecificCollaboratorDetailsRequest$Outbound;
}

/** @internal */
export const ListSpecificCollaboratorDetailsResponse$inboundSchema: z.ZodType<
  ListSpecificCollaboratorDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CollaboratorV2: shared.CollaboratorV2$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CollaboratorV2": "collaboratorV2",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListSpecificCollaboratorDetailsResponse$Outbound = {
  CollaboratorV2?: shared.CollaboratorV2$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ListSpecificCollaboratorDetailsResponse$outboundSchema: z.ZodType<
  ListSpecificCollaboratorDetailsResponse$Outbound,
  z.ZodTypeDef,
  ListSpecificCollaboratorDetailsResponse
> = z.object({
  collaboratorV2: shared.CollaboratorV2$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    collaboratorV2: "CollaboratorV2",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpecificCollaboratorDetailsResponse$ {
  /** @deprecated use `ListSpecificCollaboratorDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListSpecificCollaboratorDetailsResponse$inboundSchema;
  /** @deprecated use `ListSpecificCollaboratorDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListSpecificCollaboratorDetailsResponse$outboundSchema;
  /** @deprecated use `ListSpecificCollaboratorDetailsResponse$Outbound` instead. */
  export type Outbound = ListSpecificCollaboratorDetailsResponse$Outbound;
}

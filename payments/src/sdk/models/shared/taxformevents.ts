/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type TaxFormEvents = {
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
};

/** @internal */
export const TaxFormEvents$inboundSchema: z.ZodType<TaxFormEvents, z.ZodTypeDef, unknown> =
    z.object({
        createdAt: z.nullable(z.string()).optional(),
        updatedAt: z.nullable(z.string()).optional(),
    });

/** @internal */
export type TaxFormEvents$Outbound = {
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
};

/** @internal */
export const TaxFormEvents$outboundSchema: z.ZodType<
    TaxFormEvents$Outbound,
    z.ZodTypeDef,
    TaxFormEvents
> = z.object({
    createdAt: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxFormEvents$ {
    /** @deprecated use `TaxFormEvents$inboundSchema` instead. */
    export const inboundSchema = TaxFormEvents$inboundSchema;
    /** @deprecated use `TaxFormEvents$outboundSchema` instead. */
    export const outboundSchema = TaxFormEvents$outboundSchema;
    /** @deprecated use `TaxFormEvents$Outbound` instead. */
    export type Outbound = TaxFormEvents$Outbound;
}

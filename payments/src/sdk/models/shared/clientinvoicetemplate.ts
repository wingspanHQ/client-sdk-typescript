/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ClientInvoice,
  ClientInvoice$inboundSchema,
  ClientInvoice$Outbound,
  ClientInvoice$outboundSchema,
} from "./clientinvoice.js";
import {
  Frequency,
  Frequency$inboundSchema,
  Frequency$Outbound,
  Frequency$outboundSchema,
} from "./frequency.js";
import {
  ScheduleDate,
  ScheduleDate$inboundSchema,
  ScheduleDate$Outbound,
  ScheduleDate$outboundSchema,
} from "./scheduledate.js";

export const ClientInvoiceTemplateStatus = {
  Active: "Active",
  Draft: "Draft",
  Expired: "Expired",
  Cancelled: "Cancelled",
} as const;
export type ClientInvoiceTemplateStatus = ClosedEnum<
  typeof ClientInvoiceTemplateStatus
>;

export type ClientInvoiceTemplate = {
  accountId?: string | null | undefined;
  clientId: string;
  createdAt: string;
  createdInvoiceId?: string | null | undefined;
  dueInDays?: number | null | undefined;
  frequency?: Frequency | null | undefined;
  invoiceData: ClientInvoice;
  invoiceTemplateId: string;
  memberId: string;
  nextInvoiceDate: string;
  paymentMethodId?: string | null | undefined;
  scheduleDates: Array<ScheduleDate>;
  status: ClientInvoiceTemplateStatus;
  updatedAt: string;
};

/** @internal */
export const ClientInvoiceTemplateStatus$inboundSchema: z.ZodNativeEnum<
  typeof ClientInvoiceTemplateStatus
> = z.nativeEnum(ClientInvoiceTemplateStatus);

/** @internal */
export const ClientInvoiceTemplateStatus$outboundSchema: z.ZodNativeEnum<
  typeof ClientInvoiceTemplateStatus
> = ClientInvoiceTemplateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientInvoiceTemplateStatus$ {
  /** @deprecated use `ClientInvoiceTemplateStatus$inboundSchema` instead. */
  export const inboundSchema = ClientInvoiceTemplateStatus$inboundSchema;
  /** @deprecated use `ClientInvoiceTemplateStatus$outboundSchema` instead. */
  export const outboundSchema = ClientInvoiceTemplateStatus$outboundSchema;
}

/** @internal */
export const ClientInvoiceTemplate$inboundSchema: z.ZodType<
  ClientInvoiceTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  clientId: z.string(),
  createdAt: z.string(),
  createdInvoiceId: z.nullable(z.string()).optional(),
  dueInDays: z.nullable(z.number()).optional(),
  frequency: z.nullable(Frequency$inboundSchema).optional(),
  invoiceData: ClientInvoice$inboundSchema,
  invoiceTemplateId: z.string(),
  memberId: z.string(),
  nextInvoiceDate: z.string(),
  paymentMethodId: z.nullable(z.string()).optional(),
  scheduleDates: z.array(ScheduleDate$inboundSchema),
  status: ClientInvoiceTemplateStatus$inboundSchema,
  updatedAt: z.string(),
});

/** @internal */
export type ClientInvoiceTemplate$Outbound = {
  accountId?: string | null | undefined;
  clientId: string;
  createdAt: string;
  createdInvoiceId?: string | null | undefined;
  dueInDays?: number | null | undefined;
  frequency?: Frequency$Outbound | null | undefined;
  invoiceData: ClientInvoice$Outbound;
  invoiceTemplateId: string;
  memberId: string;
  nextInvoiceDate: string;
  paymentMethodId?: string | null | undefined;
  scheduleDates: Array<ScheduleDate$Outbound>;
  status: string;
  updatedAt: string;
};

/** @internal */
export const ClientInvoiceTemplate$outboundSchema: z.ZodType<
  ClientInvoiceTemplate$Outbound,
  z.ZodTypeDef,
  ClientInvoiceTemplate
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  clientId: z.string(),
  createdAt: z.string(),
  createdInvoiceId: z.nullable(z.string()).optional(),
  dueInDays: z.nullable(z.number()).optional(),
  frequency: z.nullable(Frequency$outboundSchema).optional(),
  invoiceData: ClientInvoice$outboundSchema,
  invoiceTemplateId: z.string(),
  memberId: z.string(),
  nextInvoiceDate: z.string(),
  paymentMethodId: z.nullable(z.string()).optional(),
  scheduleDates: z.array(ScheduleDate$outboundSchema),
  status: ClientInvoiceTemplateStatus$outboundSchema,
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientInvoiceTemplate$ {
  /** @deprecated use `ClientInvoiceTemplate$inboundSchema` instead. */
  export const inboundSchema = ClientInvoiceTemplate$inboundSchema;
  /** @deprecated use `ClientInvoiceTemplate$outboundSchema` instead. */
  export const outboundSchema = ClientInvoiceTemplate$outboundSchema;
  /** @deprecated use `ClientInvoiceTemplate$Outbound` instead. */
  export type Outbound = ClientInvoiceTemplate$Outbound;
}

export function clientInvoiceTemplateToJSON(
  clientInvoiceTemplate: ClientInvoiceTemplate,
): string {
  return JSON.stringify(
    ClientInvoiceTemplate$outboundSchema.parse(clientInvoiceTemplate),
  );
}

export function clientInvoiceTemplateFromJSON(
  jsonString: string,
): SafeParseResult<ClientInvoiceTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientInvoiceTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientInvoiceTemplate' from JSON`,
  );
}

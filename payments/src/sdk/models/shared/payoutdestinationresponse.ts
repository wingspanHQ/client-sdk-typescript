/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PayoutDestinationResponseDestinationType = {
  Account: "Account",
  Card: "Card",
  WeGift: "WeGift",
} as const;
export type PayoutDestinationResponseDestinationType = ClosedEnum<
  typeof PayoutDestinationResponseDestinationType
>;

export const PayoutDestinationResponsePayoutMethod = {
  Standard: "Standard",
  Instant: "Instant",
  Expedited: "Expedited",
  Check: "Check",
  ECheck: "ECheck",
} as const;
export type PayoutDestinationResponsePayoutMethod = ClosedEnum<
  typeof PayoutDestinationResponsePayoutMethod
>;

export type PayoutDestinationResponse = {
  destinationId: string;
  destinationType: PayoutDestinationResponseDestinationType;
  last4?: string | null | undefined;
  name: string;
  payoutMethod: PayoutDestinationResponsePayoutMethod;
  percentage: number;
};

/** @internal */
export const PayoutDestinationResponseDestinationType$inboundSchema:
  z.ZodNativeEnum<typeof PayoutDestinationResponseDestinationType> = z
    .nativeEnum(PayoutDestinationResponseDestinationType);

/** @internal */
export const PayoutDestinationResponseDestinationType$outboundSchema:
  z.ZodNativeEnum<typeof PayoutDestinationResponseDestinationType> =
    PayoutDestinationResponseDestinationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutDestinationResponseDestinationType$ {
  /** @deprecated use `PayoutDestinationResponseDestinationType$inboundSchema` instead. */
  export const inboundSchema =
    PayoutDestinationResponseDestinationType$inboundSchema;
  /** @deprecated use `PayoutDestinationResponseDestinationType$outboundSchema` instead. */
  export const outboundSchema =
    PayoutDestinationResponseDestinationType$outboundSchema;
}

/** @internal */
export const PayoutDestinationResponsePayoutMethod$inboundSchema:
  z.ZodNativeEnum<typeof PayoutDestinationResponsePayoutMethod> = z.nativeEnum(
    PayoutDestinationResponsePayoutMethod,
  );

/** @internal */
export const PayoutDestinationResponsePayoutMethod$outboundSchema:
  z.ZodNativeEnum<typeof PayoutDestinationResponsePayoutMethod> =
    PayoutDestinationResponsePayoutMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutDestinationResponsePayoutMethod$ {
  /** @deprecated use `PayoutDestinationResponsePayoutMethod$inboundSchema` instead. */
  export const inboundSchema =
    PayoutDestinationResponsePayoutMethod$inboundSchema;
  /** @deprecated use `PayoutDestinationResponsePayoutMethod$outboundSchema` instead. */
  export const outboundSchema =
    PayoutDestinationResponsePayoutMethod$outboundSchema;
}

/** @internal */
export const PayoutDestinationResponse$inboundSchema: z.ZodType<
  PayoutDestinationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  destinationId: z.string(),
  destinationType: PayoutDestinationResponseDestinationType$inboundSchema,
  last4: z.nullable(z.string()).optional(),
  name: z.string(),
  payoutMethod: PayoutDestinationResponsePayoutMethod$inboundSchema,
  percentage: z.number(),
});

/** @internal */
export type PayoutDestinationResponse$Outbound = {
  destinationId: string;
  destinationType: string;
  last4?: string | null | undefined;
  name: string;
  payoutMethod: string;
  percentage: number;
};

/** @internal */
export const PayoutDestinationResponse$outboundSchema: z.ZodType<
  PayoutDestinationResponse$Outbound,
  z.ZodTypeDef,
  PayoutDestinationResponse
> = z.object({
  destinationId: z.string(),
  destinationType: PayoutDestinationResponseDestinationType$outboundSchema,
  last4: z.nullable(z.string()).optional(),
  name: z.string(),
  payoutMethod: PayoutDestinationResponsePayoutMethod$outboundSchema,
  percentage: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutDestinationResponse$ {
  /** @deprecated use `PayoutDestinationResponse$inboundSchema` instead. */
  export const inboundSchema = PayoutDestinationResponse$inboundSchema;
  /** @deprecated use `PayoutDestinationResponse$outboundSchema` instead. */
  export const outboundSchema = PayoutDestinationResponse$outboundSchema;
  /** @deprecated use `PayoutDestinationResponse$Outbound` instead. */
  export type Outbound = PayoutDestinationResponse$Outbound;
}

export function payoutDestinationResponseToJSON(
  payoutDestinationResponse: PayoutDestinationResponse,
): string {
  return JSON.stringify(
    PayoutDestinationResponse$outboundSchema.parse(payoutDestinationResponse),
  );
}

export function payoutDestinationResponseFromJSON(
  jsonString: string,
): SafeParseResult<PayoutDestinationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutDestinationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutDestinationResponse' from JSON`,
  );
}

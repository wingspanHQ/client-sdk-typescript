/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateSpecificInvoiceBatchRequest = {
  bulkInvoiceItemCreate?: shared.BulkInvoiceItemCreate | undefined;
  /**
   * Unique identifier for a batch
   */
  batchId: string;
};

export type CreateSpecificInvoiceBatchResponse = {
  /**
   * An item that will be converted into a invoice
   */
  bulkInvoiceItem?: shared.BulkInvoiceItem | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const CreateSpecificInvoiceBatchRequest$inboundSchema: z.ZodType<
  CreateSpecificInvoiceBatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkInvoiceItemCreate: shared.BulkInvoiceItemCreate$inboundSchema.optional(),
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "BulkInvoiceItemCreate": "bulkInvoiceItemCreate",
  });
});

/** @internal */
export type CreateSpecificInvoiceBatchRequest$Outbound = {
  BulkInvoiceItemCreate?: shared.BulkInvoiceItemCreate$Outbound | undefined;
  batchId: string;
};

/** @internal */
export const CreateSpecificInvoiceBatchRequest$outboundSchema: z.ZodType<
  CreateSpecificInvoiceBatchRequest$Outbound,
  z.ZodTypeDef,
  CreateSpecificInvoiceBatchRequest
> = z.object({
  bulkInvoiceItemCreate: shared.BulkInvoiceItemCreate$outboundSchema.optional(),
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    bulkInvoiceItemCreate: "BulkInvoiceItemCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSpecificInvoiceBatchRequest$ {
  /** @deprecated use `CreateSpecificInvoiceBatchRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSpecificInvoiceBatchRequest$inboundSchema;
  /** @deprecated use `CreateSpecificInvoiceBatchRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSpecificInvoiceBatchRequest$outboundSchema;
  /** @deprecated use `CreateSpecificInvoiceBatchRequest$Outbound` instead. */
  export type Outbound = CreateSpecificInvoiceBatchRequest$Outbound;
}

export function createSpecificInvoiceBatchRequestToJSON(
  createSpecificInvoiceBatchRequest: CreateSpecificInvoiceBatchRequest,
): string {
  return JSON.stringify(
    CreateSpecificInvoiceBatchRequest$outboundSchema.parse(
      createSpecificInvoiceBatchRequest,
    ),
  );
}

export function createSpecificInvoiceBatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSpecificInvoiceBatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSpecificInvoiceBatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSpecificInvoiceBatchRequest' from JSON`,
  );
}

/** @internal */
export const CreateSpecificInvoiceBatchResponse$inboundSchema: z.ZodType<
  CreateSpecificInvoiceBatchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkInvoiceItem: shared.BulkInvoiceItem$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkInvoiceItem": "bulkInvoiceItem",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CreateSpecificInvoiceBatchResponse$Outbound = {
  BulkInvoiceItem?: shared.BulkInvoiceItem$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const CreateSpecificInvoiceBatchResponse$outboundSchema: z.ZodType<
  CreateSpecificInvoiceBatchResponse$Outbound,
  z.ZodTypeDef,
  CreateSpecificInvoiceBatchResponse
> = z.object({
  bulkInvoiceItem: shared.BulkInvoiceItem$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkInvoiceItem: "BulkInvoiceItem",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSpecificInvoiceBatchResponse$ {
  /** @deprecated use `CreateSpecificInvoiceBatchResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSpecificInvoiceBatchResponse$inboundSchema;
  /** @deprecated use `CreateSpecificInvoiceBatchResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSpecificInvoiceBatchResponse$outboundSchema;
  /** @deprecated use `CreateSpecificInvoiceBatchResponse$Outbound` instead. */
  export type Outbound = CreateSpecificInvoiceBatchResponse$Outbound;
}

export function createSpecificInvoiceBatchResponseToJSON(
  createSpecificInvoiceBatchResponse: CreateSpecificInvoiceBatchResponse,
): string {
  return JSON.stringify(
    CreateSpecificInvoiceBatchResponse$outboundSchema.parse(
      createSpecificInvoiceBatchResponse,
    ),
  );
}

export function createSpecificInvoiceBatchResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSpecificInvoiceBatchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSpecificInvoiceBatchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSpecificInvoiceBatchResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListSpecificClientDetailsRequest = {
  /**
   * Unique identifier of a client
   */
  clientId: string;
};

export type ListSpecificClientDetailsResponse = {
  /**
   * A single V2 Collaborator
   */
  collaboratorV2?: shared.CollaboratorV2 | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ListSpecificClientDetailsRequest$inboundSchema: z.ZodType<
  ListSpecificClientDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
});

/** @internal */
export type ListSpecificClientDetailsRequest$Outbound = {
  clientId: string;
};

/** @internal */
export const ListSpecificClientDetailsRequest$outboundSchema: z.ZodType<
  ListSpecificClientDetailsRequest$Outbound,
  z.ZodTypeDef,
  ListSpecificClientDetailsRequest
> = z.object({
  clientId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpecificClientDetailsRequest$ {
  /** @deprecated use `ListSpecificClientDetailsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSpecificClientDetailsRequest$inboundSchema;
  /** @deprecated use `ListSpecificClientDetailsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSpecificClientDetailsRequest$outboundSchema;
  /** @deprecated use `ListSpecificClientDetailsRequest$Outbound` instead. */
  export type Outbound = ListSpecificClientDetailsRequest$Outbound;
}

export function listSpecificClientDetailsRequestToJSON(
  listSpecificClientDetailsRequest: ListSpecificClientDetailsRequest,
): string {
  return JSON.stringify(
    ListSpecificClientDetailsRequest$outboundSchema.parse(
      listSpecificClientDetailsRequest,
    ),
  );
}

export function listSpecificClientDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSpecificClientDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSpecificClientDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSpecificClientDetailsRequest' from JSON`,
  );
}

/** @internal */
export const ListSpecificClientDetailsResponse$inboundSchema: z.ZodType<
  ListSpecificClientDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CollaboratorV2: shared.CollaboratorV2$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CollaboratorV2": "collaboratorV2",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListSpecificClientDetailsResponse$Outbound = {
  CollaboratorV2?: shared.CollaboratorV2$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ListSpecificClientDetailsResponse$outboundSchema: z.ZodType<
  ListSpecificClientDetailsResponse$Outbound,
  z.ZodTypeDef,
  ListSpecificClientDetailsResponse
> = z.object({
  collaboratorV2: shared.CollaboratorV2$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    collaboratorV2: "CollaboratorV2",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpecificClientDetailsResponse$ {
  /** @deprecated use `ListSpecificClientDetailsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSpecificClientDetailsResponse$inboundSchema;
  /** @deprecated use `ListSpecificClientDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListSpecificClientDetailsResponse$outboundSchema;
  /** @deprecated use `ListSpecificClientDetailsResponse$Outbound` instead. */
  export type Outbound = ListSpecificClientDetailsResponse$Outbound;
}

export function listSpecificClientDetailsResponseToJSON(
  listSpecificClientDetailsResponse: ListSpecificClientDetailsResponse,
): string {
  return JSON.stringify(
    ListSpecificClientDetailsResponse$outboundSchema.parse(
      listSpecificClientDetailsResponse,
    ),
  );
}

export function listSpecificClientDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSpecificClientDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSpecificClientDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSpecificClientDetailsResponse' from JSON`,
  );
}

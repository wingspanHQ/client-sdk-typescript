/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type InvoiceAppliedDeductions = {
    amount: number;
    deductionId: string;
    name: string;
    transferId?: string | null | undefined;
};

/** @internal */
export namespace InvoiceAppliedDeductions$ {
    export type Inbound = {
        amount: number;
        deductionId: string;
        name: string;
        transferId?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<InvoiceAppliedDeductions, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            deductionId: z.string(),
            name: z.string(),
            transferId: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                deductionId: v.deductionId,
                name: v.name,
                ...(v.transferId === undefined ? null : { transferId: v.transferId }),
            };
        });

    export type Outbound = {
        amount: number;
        deductionId: string;
        name: string;
        transferId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceAppliedDeductions> = z
        .object({
            amount: z.number(),
            deductionId: z.string(),
            name: z.string(),
            transferId: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                deductionId: v.deductionId,
                name: v.name,
                ...(v.transferId === undefined ? null : { transferId: v.transferId }),
            };
        });
}

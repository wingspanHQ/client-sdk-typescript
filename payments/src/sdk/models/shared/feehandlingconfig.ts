/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeeHandlingConfig = {
  clientAbsolutePercentage?: number | null | undefined;
  clientPays?: number | null | undefined;
  memberPays?: number | null | undefined;
};

/** @internal */
export const FeeHandlingConfig$inboundSchema: z.ZodType<
  FeeHandlingConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientAbsolutePercentage: z.nullable(z.number()).optional(),
  clientPays: z.nullable(z.number()).optional(),
  memberPays: z.nullable(z.number()).optional(),
});

/** @internal */
export type FeeHandlingConfig$Outbound = {
  clientAbsolutePercentage?: number | null | undefined;
  clientPays?: number | null | undefined;
  memberPays?: number | null | undefined;
};

/** @internal */
export const FeeHandlingConfig$outboundSchema: z.ZodType<
  FeeHandlingConfig$Outbound,
  z.ZodTypeDef,
  FeeHandlingConfig
> = z.object({
  clientAbsolutePercentage: z.nullable(z.number()).optional(),
  clientPays: z.nullable(z.number()).optional(),
  memberPays: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeeHandlingConfig$ {
  /** @deprecated use `FeeHandlingConfig$inboundSchema` instead. */
  export const inboundSchema = FeeHandlingConfig$inboundSchema;
  /** @deprecated use `FeeHandlingConfig$outboundSchema` instead. */
  export const outboundSchema = FeeHandlingConfig$outboundSchema;
  /** @deprecated use `FeeHandlingConfig$Outbound` instead. */
  export type Outbound = FeeHandlingConfig$Outbound;
}

export function feeHandlingConfigToJSON(
  feeHandlingConfig: FeeHandlingConfig,
): string {
  return JSON.stringify(
    FeeHandlingConfig$outboundSchema.parse(feeHandlingConfig),
  );
}

export function feeHandlingConfigFromJSON(
  jsonString: string,
): SafeParseResult<FeeHandlingConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeeHandlingConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeeHandlingConfig' from JSON`,
  );
}

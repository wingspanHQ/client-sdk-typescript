/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetCollaboratorBatchRequest = {
  /**
   * Unique identifier for a batch
   */
  batchId: string;
};

export type GetCollaboratorBatchResponse = {
  /**
   * A batch of items for importing as collaborators
   */
  bulkCollaboratorBatch?: shared.BulkCollaboratorBatch | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetCollaboratorBatchRequest$inboundSchema: z.ZodType<
  GetCollaboratorBatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batchId: z.string(),
});

/** @internal */
export type GetCollaboratorBatchRequest$Outbound = {
  batchId: string;
};

/** @internal */
export const GetCollaboratorBatchRequest$outboundSchema: z.ZodType<
  GetCollaboratorBatchRequest$Outbound,
  z.ZodTypeDef,
  GetCollaboratorBatchRequest
> = z.object({
  batchId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollaboratorBatchRequest$ {
  /** @deprecated use `GetCollaboratorBatchRequest$inboundSchema` instead. */
  export const inboundSchema = GetCollaboratorBatchRequest$inboundSchema;
  /** @deprecated use `GetCollaboratorBatchRequest$outboundSchema` instead. */
  export const outboundSchema = GetCollaboratorBatchRequest$outboundSchema;
  /** @deprecated use `GetCollaboratorBatchRequest$Outbound` instead. */
  export type Outbound = GetCollaboratorBatchRequest$Outbound;
}

export function getCollaboratorBatchRequestToJSON(
  getCollaboratorBatchRequest: GetCollaboratorBatchRequest,
): string {
  return JSON.stringify(
    GetCollaboratorBatchRequest$outboundSchema.parse(
      getCollaboratorBatchRequest,
    ),
  );
}

export function getCollaboratorBatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCollaboratorBatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCollaboratorBatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCollaboratorBatchRequest' from JSON`,
  );
}

/** @internal */
export const GetCollaboratorBatchResponse$inboundSchema: z.ZodType<
  GetCollaboratorBatchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BulkCollaboratorBatch: shared.BulkCollaboratorBatch$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BulkCollaboratorBatch": "bulkCollaboratorBatch",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetCollaboratorBatchResponse$Outbound = {
  BulkCollaboratorBatch?: shared.BulkCollaboratorBatch$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetCollaboratorBatchResponse$outboundSchema: z.ZodType<
  GetCollaboratorBatchResponse$Outbound,
  z.ZodTypeDef,
  GetCollaboratorBatchResponse
> = z.object({
  bulkCollaboratorBatch: shared.BulkCollaboratorBatch$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bulkCollaboratorBatch: "BulkCollaboratorBatch",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollaboratorBatchResponse$ {
  /** @deprecated use `GetCollaboratorBatchResponse$inboundSchema` instead. */
  export const inboundSchema = GetCollaboratorBatchResponse$inboundSchema;
  /** @deprecated use `GetCollaboratorBatchResponse$outboundSchema` instead. */
  export const outboundSchema = GetCollaboratorBatchResponse$outboundSchema;
  /** @deprecated use `GetCollaboratorBatchResponse$Outbound` instead. */
  export type Outbound = GetCollaboratorBatchResponse$Outbound;
}

export function getCollaboratorBatchResponseToJSON(
  getCollaboratorBatchResponse: GetCollaboratorBatchResponse,
): string {
  return JSON.stringify(
    GetCollaboratorBatchResponse$outboundSchema.parse(
      getCollaboratorBatchResponse,
    ),
  );
}

export function getCollaboratorBatchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCollaboratorBatchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCollaboratorBatchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCollaboratorBatchResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { BankingManagement } from "./bankingmanagement";
import { BulkOperations } from "./bulkoperations";
import { ClientManagement } from "./clientmanagement";
import { CollaboratorManagement } from "./collaboratormanagement";
import { CustomFieldManagement } from "./customfieldmanagement";
import { Deprecated } from "./deprecated";
import { DocumentSigningAndEligibility } from "./documentsigningandeligibility";
import { InvoiceManagement } from "./invoicemanagement";
import { MerchantCategoryCodes } from "./merchantcategorycodes";
import { OneThousandAndNinetyNineOperations } from "./onethousandandninetynineoperations";
import { PayablesManagement } from "./payablesmanagement";
import { PayrollSettings } from "./payrollsettings";
import { ReportingAndAnalytics } from "./reportingandanalytics";
import { ServiceSettings } from "./servicesettings";
import { WingspanWallet } from "./wingspanwallet";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Wingspan's Payments API in Production
     */
    "https://api.wingspan.app",
    /**
     * Wingspan's Payments API in Staging
     */
    "https://stagingapi.wingspan.app",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    bearerAuth?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "2.0.4";
    genVersion = "2.210.6";
    userAgent = "speakeasy-sdk/typescript 2.0.4 2.210.6 1.0.0 @wingspan/payments";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Wingspan Payments API: Payments
 */
export class Payments {
    /**
     * Covers endpoints that manage service statuses and related configurations.
     */
    public serviceSettings: ServiceSettings;
    public wingspanWallet: WingspanWallet;
    /**
     * Deprecated Endpoints.
     */
    public deprecated: Deprecated;
    /**
     * These endpoints cater to fetching, storing, and managing documents related to electronic signatures, including retrieval of signing URLs and saving e-signed documents.
     */
    public bankingManagement: BankingManagement;
    /**
     * Includes endpoints for managing 1099 forms.
     */
    public oneThousandAndNinetyNineOperations: OneThousandAndNinetyNineOperations;
    /**
     * This category includes endpoints for managing bulk operations like bulk payables, bulk invoices, and bulk collaborator management.
     */
    public bulkOperations: BulkOperations;
    /**
     * Encompasses endpoints for banking-related operations such as managing bank cards, statements, instant payouts, and banking institutions..
     */
    public clientManagement: ClientManagement;
    /**
     * Covers endpoints related to invoice creation, retrieval, and management. This includes both member and client invoices, along with specific actions like sending invoices by email and managing invoice templates.
     */
    public invoiceManagement: InvoiceManagement;
    /**
     * This category includes endpoints that manage relationships and interactions with collaborators. This includes collaborator settings, and various operations related to collaborators.
     */
    public collaboratorManagement: CollaboratorManagement;
    public documentSigningAndEligibility: DocumentSigningAndEligibility;
    /**
     * Focuses on endpoints for managing custom fields related to payments and collaborators.
     */
    public customFieldManagement: CustomFieldManagement;
    /**
     * Endpoint that provides a comprehensive list of available Merchant Category Codes.
     */
    public merchantCategoryCodes: MerchantCategoryCodes;
    /**
     * Endpoints dealing with payables, including creating, listing, updating, and deleting payables. It also includes summary endpoints and immediate payroll payables.
     */
    public payablesManagement: PayablesManagement;
    /**
     * Covers endpoints that manage payout settings and related configurations.
     */
    public payrollSettings: PayrollSettings;
    /**
     * Includes endpoints for generating various reports and analytics, such as payables reports, collaborators reports, and aging reports.
     */
    public reportingAndAnalytics: ReportingAndAnalytics;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ bearerAuth: props?.bearerAuth }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.serviceSettings = new ServiceSettings(this.sdkConfiguration);
        this.wingspanWallet = new WingspanWallet(this.sdkConfiguration);
        this.deprecated = new Deprecated(this.sdkConfiguration);
        this.bankingManagement = new BankingManagement(this.sdkConfiguration);
        this.oneThousandAndNinetyNineOperations = new OneThousandAndNinetyNineOperations(
            this.sdkConfiguration
        );
        this.bulkOperations = new BulkOperations(this.sdkConfiguration);
        this.clientManagement = new ClientManagement(this.sdkConfiguration);
        this.invoiceManagement = new InvoiceManagement(this.sdkConfiguration);
        this.collaboratorManagement = new CollaboratorManagement(this.sdkConfiguration);
        this.documentSigningAndEligibility = new DocumentSigningAndEligibility(
            this.sdkConfiguration
        );
        this.customFieldManagement = new CustomFieldManagement(this.sdkConfiguration);
        this.merchantCategoryCodes = new MerchantCategoryCodes(this.sdkConfiguration);
        this.payablesManagement = new PayablesManagement(this.sdkConfiguration);
        this.payrollSettings = new PayrollSettings(this.sdkConfiguration);
        this.reportingAndAnalytics = new ReportingAndAnalytics(this.sdkConfiguration);
    }
}

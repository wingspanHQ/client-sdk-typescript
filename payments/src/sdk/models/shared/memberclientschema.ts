/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c,
    B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c$,
} from "./b9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c";
import {
    MemberClientRequirementResponse,
    MemberClientRequirementResponse$,
} from "./memberclientrequirementresponse";
import { MemberClientWireAccount, MemberClientWireAccount$ } from "./memberclientwireaccount";
import { RedactedMember, RedactedMember$ } from "./redactedmember";
import {
    Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f,
    Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f$,
} from "./threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f";
import { UserRoles, UserRoles$ } from "./userroles";
import { z } from "zod";

export enum MemberClientSchemaClientUserAccountType {
    Member = "member",
    Enterprise = "enterprise",
}

export enum MemberClientSchemaStatus {
    Active = "Active",
    Inactive = "Inactive",
    Pending = "Pending",
}

export type MemberClientSchema = {
    achCreditAccount: MemberClientWireAccount;
    client: RedactedMember;
    clientId: string;
    clientUserAccountType: MemberClientSchemaClientUserAccountType;
    collaboratorGroupIds?: Array<string> | null | undefined;
    company?: string | null | undefined;
    createdAt: string;
    eligibilityRequirements?: Array<MemberClientRequirementResponse> | null | undefined;
    emailCC?: Array<string> | null | undefined;
    emailTo: string;
    eventActors: Record<string, string>;
    form1099Balances: B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c;
    integration?:
        | Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f
        | null
        | undefined;
    internationalWireAccount: MemberClientWireAccount;
    labels: Record<string, string>;
    memberClientId: string;
    name?: string | null | undefined;
    status: MemberClientSchemaStatus;
    updatedAt: string;
    userRoles: UserRoles;
};

/** @internal */
export const MemberClientSchemaClientUserAccountType$ = z.nativeEnum(
    MemberClientSchemaClientUserAccountType
);

/** @internal */
export const MemberClientSchemaStatus$ = z.nativeEnum(MemberClientSchemaStatus);

/** @internal */
export namespace MemberClientSchema$ {
    export type Inbound = {
        achCreditAccount: MemberClientWireAccount$.Inbound;
        client: RedactedMember$.Inbound;
        clientId: string;
        clientUserAccountType: MemberClientSchemaClientUserAccountType;
        collaboratorGroupIds?: Array<string> | null | undefined;
        company?: string | null | undefined;
        createdAt: string;
        eligibilityRequirements?:
            | Array<MemberClientRequirementResponse$.Inbound>
            | null
            | undefined;
        emailCC?: Array<string> | null | undefined;
        emailTo: string;
        eventActors: Record<string, string>;
        form1099Balances: B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c$.Inbound;
        integration?:
            | Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f$.Inbound
            | null
            | undefined;
        internationalWireAccount: MemberClientWireAccount$.Inbound;
        labels: Record<string, string>;
        memberClientId: string;
        name?: string | null | undefined;
        status: MemberClientSchemaStatus;
        updatedAt: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<MemberClientSchema, z.ZodTypeDef, Inbound> = z
        .object({
            achCreditAccount: MemberClientWireAccount$.inboundSchema,
            client: RedactedMember$.inboundSchema,
            clientId: z.string(),
            clientUserAccountType: MemberClientSchemaClientUserAccountType$,
            collaboratorGroupIds: z.nullable(z.array(z.string())).optional(),
            company: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            eligibilityRequirements: z
                .nullable(z.array(MemberClientRequirementResponse$.inboundSchema))
                .optional(),
            emailCC: z.nullable(z.array(z.string())).optional(),
            emailTo: z.string(),
            eventActors: z.record(z.string()),
            form1099Balances:
                B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c$.inboundSchema,
            integration: z
                .nullable(
                    Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f$.inboundSchema
                )
                .optional(),
            internationalWireAccount: MemberClientWireAccount$.inboundSchema,
            labels: z.record(z.string()),
            memberClientId: z.string(),
            name: z.nullable(z.string()).optional(),
            status: MemberClientSchemaStatus$,
            updatedAt: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                achCreditAccount: v.achCreditAccount,
                client: v.client,
                clientId: v.clientId,
                clientUserAccountType: v.clientUserAccountType,
                ...(v.collaboratorGroupIds === undefined
                    ? null
                    : { collaboratorGroupIds: v.collaboratorGroupIds }),
                ...(v.company === undefined ? null : { company: v.company }),
                createdAt: v.createdAt,
                ...(v.eligibilityRequirements === undefined
                    ? null
                    : { eligibilityRequirements: v.eligibilityRequirements }),
                ...(v.emailCC === undefined ? null : { emailCC: v.emailCC }),
                emailTo: v.emailTo,
                eventActors: v.eventActors,
                form1099Balances: v.form1099Balances,
                ...(v.integration === undefined ? null : { integration: v.integration }),
                internationalWireAccount: v.internationalWireAccount,
                labels: v.labels,
                memberClientId: v.memberClientId,
                ...(v.name === undefined ? null : { name: v.name }),
                status: v.status,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        achCreditAccount: MemberClientWireAccount$.Outbound;
        client: RedactedMember$.Outbound;
        clientId: string;
        clientUserAccountType: MemberClientSchemaClientUserAccountType;
        collaboratorGroupIds?: Array<string> | null | undefined;
        company?: string | null | undefined;
        createdAt: string;
        eligibilityRequirements?:
            | Array<MemberClientRequirementResponse$.Outbound>
            | null
            | undefined;
        emailCC?: Array<string> | null | undefined;
        emailTo: string;
        eventActors: Record<string, string>;
        form1099Balances: B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c$.Outbound;
        integration?:
            | Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f$.Outbound
            | null
            | undefined;
        internationalWireAccount: MemberClientWireAccount$.Outbound;
        labels: Record<string, string>;
        memberClientId: string;
        name?: string | null | undefined;
        status: MemberClientSchemaStatus;
        updatedAt: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MemberClientSchema> = z
        .object({
            achCreditAccount: MemberClientWireAccount$.outboundSchema,
            client: RedactedMember$.outboundSchema,
            clientId: z.string(),
            clientUserAccountType: MemberClientSchemaClientUserAccountType$,
            collaboratorGroupIds: z.nullable(z.array(z.string())).optional(),
            company: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            eligibilityRequirements: z
                .nullable(z.array(MemberClientRequirementResponse$.outboundSchema))
                .optional(),
            emailCC: z.nullable(z.array(z.string())).optional(),
            emailTo: z.string(),
            eventActors: z.record(z.string()),
            form1099Balances:
                B9789f45f8c8070ff38a64d80c2e4a8732ddaf329e46546474400d26f84c0f1c$.outboundSchema,
            integration: z
                .nullable(
                    Threed33fba3f009de957b3be92fba006d6383af7e39f823cc1fd213506f6205100f$.outboundSchema
                )
                .optional(),
            internationalWireAccount: MemberClientWireAccount$.outboundSchema,
            labels: z.record(z.string()),
            memberClientId: z.string(),
            name: z.nullable(z.string()).optional(),
            status: MemberClientSchemaStatus$,
            updatedAt: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                achCreditAccount: v.achCreditAccount,
                client: v.client,
                clientId: v.clientId,
                clientUserAccountType: v.clientUserAccountType,
                ...(v.collaboratorGroupIds === undefined
                    ? null
                    : { collaboratorGroupIds: v.collaboratorGroupIds }),
                ...(v.company === undefined ? null : { company: v.company }),
                createdAt: v.createdAt,
                ...(v.eligibilityRequirements === undefined
                    ? null
                    : { eligibilityRequirements: v.eligibilityRequirements }),
                ...(v.emailCC === undefined ? null : { emailCC: v.emailCC }),
                emailTo: v.emailTo,
                eventActors: v.eventActors,
                form1099Balances: v.form1099Balances,
                ...(v.integration === undefined ? null : { integration: v.integration }),
                internationalWireAccount: v.internationalWireAccount,
                labels: v.labels,
                memberClientId: v.memberClientId,
                ...(v.name === undefined ? null : { name: v.name }),
                status: v.status,
                updatedAt: v.updatedAt,
                userRoles: v.userRoles,
            };
        });
}

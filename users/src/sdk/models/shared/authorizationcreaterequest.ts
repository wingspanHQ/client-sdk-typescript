/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ScopeModificationsMap, ScopeModificationsMap$ } from "./scopemodificationsmap";
import { z } from "zod";

export enum AllowedAction {
    Read = "Read",
    Write = "Write",
}

export type AuthorizationCreateRequest = {
    allowedAction?: AllowedAction | null | undefined;
    allowedScope?: string | null | undefined;
    allowedScopeGroupId?: string | null | undefined;
    authorizationId?: string | null | undefined;
    requestingUserId: string;
    scopeModifications?: ScopeModificationsMap | null | undefined;
};

/** @internal */
export const AllowedAction$ = z.nativeEnum(AllowedAction);

/** @internal */
export namespace AuthorizationCreateRequest$ {
    export type Inbound = {
        allowedAction?: AllowedAction | null | undefined;
        allowedScope?: string | null | undefined;
        allowedScopeGroupId?: string | null | undefined;
        authorizationId?: string | null | undefined;
        requestingUserId: string;
        scopeModifications?: ScopeModificationsMap$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<AuthorizationCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            allowedAction: z.nullable(AllowedAction$).optional(),
            allowedScope: z.nullable(z.string()).optional(),
            allowedScopeGroupId: z.nullable(z.string()).optional(),
            authorizationId: z.nullable(z.string()).optional(),
            requestingUserId: z.string(),
            scopeModifications: z.nullable(ScopeModificationsMap$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowedAction === undefined ? null : { allowedAction: v.allowedAction }),
                ...(v.allowedScope === undefined ? null : { allowedScope: v.allowedScope }),
                ...(v.allowedScopeGroupId === undefined
                    ? null
                    : { allowedScopeGroupId: v.allowedScopeGroupId }),
                ...(v.authorizationId === undefined
                    ? null
                    : { authorizationId: v.authorizationId }),
                requestingUserId: v.requestingUserId,
                ...(v.scopeModifications === undefined
                    ? null
                    : { scopeModifications: v.scopeModifications }),
            };
        });

    export type Outbound = {
        allowedAction?: AllowedAction | null | undefined;
        allowedScope?: string | null | undefined;
        allowedScopeGroupId?: string | null | undefined;
        authorizationId?: string | null | undefined;
        requestingUserId: string;
        scopeModifications?: ScopeModificationsMap$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorizationCreateRequest> = z
        .object({
            allowedAction: z.nullable(AllowedAction$).optional(),
            allowedScope: z.nullable(z.string()).optional(),
            allowedScopeGroupId: z.nullable(z.string()).optional(),
            authorizationId: z.nullable(z.string()).optional(),
            requestingUserId: z.string(),
            scopeModifications: z.nullable(ScopeModificationsMap$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowedAction === undefined ? null : { allowedAction: v.allowedAction }),
                ...(v.allowedScope === undefined ? null : { allowedScope: v.allowedScope }),
                ...(v.allowedScopeGroupId === undefined
                    ? null
                    : { allowedScopeGroupId: v.allowedScopeGroupId }),
                ...(v.authorizationId === undefined
                    ? null
                    : { authorizationId: v.authorizationId }),
                requestingUserId: v.requestingUserId,
                ...(v.scopeModifications === undefined
                    ? null
                    : { scopeModifications: v.scopeModifications }),
            };
        });
}

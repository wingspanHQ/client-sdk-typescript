/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ExternalIdsBulkImport } from "./externalidsbulkimport";
import { ExternalIdsQuickbooksData } from "./externalidsquickbooksdata";
import { Expose, Transform, Type } from "class-transformer";

export class ExternalIds extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bulk" })
    @Type(() => ExternalIdsBulkImport)
    bulk?: ExternalIdsBulkImport;

    @SpeakeasyMetadata({ elemType: ExternalIdsQuickbooksData })
    @Expose({ name: "quickbooks" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, ExternalIdsQuickbooksData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], ExternalIdsQuickbooksData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    quickbooks?: Record<string, ExternalIdsQuickbooksData>;

    @SpeakeasyMetadata()
    @Expose({ name: "stripe" })
    stripe?: string;
}

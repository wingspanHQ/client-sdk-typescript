/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum ExternalFinancialAccounts {
    None = "None",
    Parent = "Parent",
}

export enum FundingSource {
    None = "None",
    Parent = "Parent",
}

export enum PayoutSettings {
    None = "None",
    Parent = "Parent",
}

export enum WingspanAccount {
    None = "None",
    Parent = "Parent",
}

export enum WingspanFinancialSettings {
    None = "None",
    Parent = "Parent",
}

export type OrganizationInheritanceStrategy = {
    externalFinancialAccounts: ExternalFinancialAccounts;
    fundingSource: FundingSource;
    payoutSettings: PayoutSettings;
    wingspanAccount: WingspanAccount;
    wingspanFinancialSettings: WingspanFinancialSettings;
};

/** @internal */
export const ExternalFinancialAccounts$ = z.nativeEnum(ExternalFinancialAccounts);

/** @internal */
export const FundingSource$ = z.nativeEnum(FundingSource);

/** @internal */
export const PayoutSettings$ = z.nativeEnum(PayoutSettings);

/** @internal */
export const WingspanAccount$ = z.nativeEnum(WingspanAccount);

/** @internal */
export const WingspanFinancialSettings$ = z.nativeEnum(WingspanFinancialSettings);

/** @internal */
export namespace OrganizationInheritanceStrategy$ {
    export type Inbound = {
        externalFinancialAccounts: ExternalFinancialAccounts;
        fundingSource: FundingSource;
        payoutSettings: PayoutSettings;
        wingspanAccount: WingspanAccount;
        wingspanFinancialSettings: WingspanFinancialSettings;
    };

    export const inboundSchema: z.ZodType<OrganizationInheritanceStrategy, z.ZodTypeDef, Inbound> =
        z
            .object({
                externalFinancialAccounts: ExternalFinancialAccounts$,
                fundingSource: FundingSource$,
                payoutSettings: PayoutSettings$,
                wingspanAccount: WingspanAccount$,
                wingspanFinancialSettings: WingspanFinancialSettings$,
            })
            .transform((v) => {
                return {
                    externalFinancialAccounts: v.externalFinancialAccounts,
                    fundingSource: v.fundingSource,
                    payoutSettings: v.payoutSettings,
                    wingspanAccount: v.wingspanAccount,
                    wingspanFinancialSettings: v.wingspanFinancialSettings,
                };
            });

    export type Outbound = {
        externalFinancialAccounts: ExternalFinancialAccounts;
        fundingSource: FundingSource;
        payoutSettings: PayoutSettings;
        wingspanAccount: WingspanAccount;
        wingspanFinancialSettings: WingspanFinancialSettings;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        OrganizationInheritanceStrategy
    > = z
        .object({
            externalFinancialAccounts: ExternalFinancialAccounts$,
            fundingSource: FundingSource$,
            payoutSettings: PayoutSettings$,
            wingspanAccount: WingspanAccount$,
            wingspanFinancialSettings: WingspanFinancialSettings$,
        })
        .transform((v) => {
            return {
                externalFinancialAccounts: v.externalFinancialAccounts,
                fundingSource: v.fundingSource,
                payoutSettings: v.payoutSettings,
                wingspanAccount: v.wingspanAccount,
                wingspanFinancialSettings: v.wingspanFinancialSettings,
            };
        });
}

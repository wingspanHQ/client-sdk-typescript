/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PhoneChannel {
    PhoneCall = "PhoneCall",
    Sms = "SMS",
}

export enum ChannelPendingVerification {
    PhoneCall = "PhoneCall",
    Sms = "SMS",
}

export enum PhoneStatus {
    Pending = "Pending",
    Verified = "Verified",
}

export type Phone = {
    channel?: PhoneChannel | null | undefined;
    channelPendingVerification?: ChannelPendingVerification | null | undefined;
    number?: string | null | undefined;
    numberPendingVerification?: string | null | undefined;
    status?: PhoneStatus | null | undefined;
};

/** @internal */
export const PhoneChannel$ = z.nativeEnum(PhoneChannel);

/** @internal */
export const ChannelPendingVerification$ = z.nativeEnum(ChannelPendingVerification);

/** @internal */
export const PhoneStatus$ = z.nativeEnum(PhoneStatus);

/** @internal */
export namespace Phone$ {
    export type Inbound = {
        channel?: PhoneChannel | null | undefined;
        channelPendingVerification?: ChannelPendingVerification | null | undefined;
        number?: string | null | undefined;
        numberPendingVerification?: string | null | undefined;
        status?: PhoneStatus | null | undefined;
    };

    export const inboundSchema: z.ZodType<Phone, z.ZodTypeDef, Inbound> = z
        .object({
            channel: z.nullable(PhoneChannel$).optional(),
            channelPendingVerification: z.nullable(ChannelPendingVerification$).optional(),
            number: z.nullable(z.string()).optional(),
            numberPendingVerification: z.nullable(z.string()).optional(),
            status: z.nullable(PhoneStatus$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.channel === undefined ? null : { channel: v.channel }),
                ...(v.channelPendingVerification === undefined
                    ? null
                    : { channelPendingVerification: v.channelPendingVerification }),
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.numberPendingVerification === undefined
                    ? null
                    : { numberPendingVerification: v.numberPendingVerification }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        channel?: PhoneChannel | null | undefined;
        channelPendingVerification?: ChannelPendingVerification | null | undefined;
        number?: string | null | undefined;
        numberPendingVerification?: string | null | undefined;
        status?: PhoneStatus | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Phone> = z
        .object({
            channel: z.nullable(PhoneChannel$).optional(),
            channelPendingVerification: z.nullable(ChannelPendingVerification$).optional(),
            number: z.nullable(z.string()).optional(),
            numberPendingVerification: z.nullable(z.string()).optional(),
            status: z.nullable(PhoneStatus$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.channel === undefined ? null : { channel: v.channel }),
                ...(v.channelPendingVerification === undefined
                    ? null
                    : { channelPendingVerification: v.channelPendingVerification }),
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.numberPendingVerification === undefined
                    ? null
                    : { numberPendingVerification: v.numberPendingVerification }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

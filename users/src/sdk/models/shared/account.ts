/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountEvents, AccountEvents$ } from "./accountevents";
import { AccountNumbers, AccountNumbers$ } from "./accountnumbers";
import { AccountPurpose, AccountPurpose$ } from "./accountpurpose";
import { AccountVerification, AccountVerification$ } from "./accountverification";
import { PlaidExternalIds, PlaidExternalIds$ } from "./plaidexternalids";
import {
    SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d,
    SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d$,
} from "./sixhundredandsixtytwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d";
import { UserRoles, UserRoles$ } from "./userroles";
import * as z from "zod";

export enum AccountStatus {
    Active = "Active",
    Inactive = "Inactive",
    Pending = "Pending",
    Disconnected = "Disconnected",
    Ephemeral = "Ephemeral",
}

export enum SubType {
    Paypal = "Paypal",
    Checking = "Checking",
    Savings = "Savings",
    CreditCard = "CreditCard",
}

export enum Type {
    Depository = "Depository",
    Credit = "Credit",
}

export enum Usage {
    Business = "Business",
    Personal = "Personal",
    Mixed = "Mixed",
}

export type Account = {
    accountId: string;
    accountVerification?: AccountVerification | null | undefined;
    canBeUsedFor?: AccountPurpose | null | undefined;
    country?: string | null | undefined;
    createdAt: string;
    currency?: string | null | undefined;
    eventActors: Record<string, string>;
    events?: AccountEvents | null | undefined;
    externalIds?: PlaidExternalIds | null | undefined;
    institution?: string | null | undefined;
    institutionId?: string | null | undefined;
    integration?:
        | SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d
        | null
        | undefined;
    labels: Record<string, string>;
    mask?: string | null | undefined;
    name: string;
    numbers: AccountNumbers;
    owners?: Array<string> | null | undefined;
    publicToken?: string | null | undefined;
    status: AccountStatus;
    subType?: SubType | null | undefined;
    type: Type;
    updatedAt: string;
    usage?: Usage | null | undefined;
    usedFor?: AccountPurpose | null | undefined;
    userId: string;
    userRoles: UserRoles;
};

/** @internal */
export const AccountStatus$ = z.nativeEnum(AccountStatus);

/** @internal */
export const SubType$ = z.nativeEnum(SubType);

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export const Usage$ = z.nativeEnum(Usage);

/** @internal */
export namespace Account$ {
    export type Inbound = {
        accountId: string;
        accountVerification?: AccountVerification$.Inbound | null | undefined;
        canBeUsedFor?: AccountPurpose$.Inbound | null | undefined;
        country?: string | null | undefined;
        createdAt: string;
        currency?: string | null | undefined;
        eventActors: Record<string, string>;
        events?: AccountEvents$.Inbound | null | undefined;
        externalIds?: PlaidExternalIds$.Inbound | null | undefined;
        institution?: string | null | undefined;
        institutionId?: string | null | undefined;
        integration?:
            | SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d$.Inbound
            | null
            | undefined;
        labels: Record<string, string>;
        mask?: string | null | undefined;
        name: string;
        numbers: AccountNumbers$.Inbound;
        owners?: Array<string> | null | undefined;
        publicToken?: string | null | undefined;
        status: AccountStatus;
        subType?: SubType | null | undefined;
        type: Type;
        updatedAt: string;
        usage?: Usage | null | undefined;
        usedFor?: AccountPurpose$.Inbound | null | undefined;
        userId: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, Inbound> = z
        .object({
            accountId: z.string(),
            accountVerification: z.nullable(AccountVerification$.inboundSchema).optional(),
            canBeUsedFor: z.nullable(AccountPurpose$.inboundSchema).optional(),
            country: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            currency: z.nullable(z.string()).optional(),
            eventActors: z.record(z.string()),
            events: z.nullable(AccountEvents$.inboundSchema).optional(),
            externalIds: z.nullable(PlaidExternalIds$.inboundSchema).optional(),
            institution: z.nullable(z.string()).optional(),
            institutionId: z.nullable(z.string()).optional(),
            integration: z
                .nullable(
                    SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d$.inboundSchema
                )
                .optional(),
            labels: z.record(z.string()),
            mask: z.nullable(z.string()).optional(),
            name: z.string(),
            numbers: AccountNumbers$.inboundSchema,
            owners: z.nullable(z.array(z.string())).optional(),
            publicToken: z.nullable(z.string()).optional(),
            status: AccountStatus$,
            subType: z.nullable(SubType$).optional(),
            type: Type$,
            updatedAt: z.string(),
            usage: z.nullable(Usage$).optional(),
            usedFor: z.nullable(AccountPurpose$.inboundSchema).optional(),
            userId: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                accountId: v.accountId,
                ...(v.accountVerification === undefined
                    ? null
                    : { accountVerification: v.accountVerification }),
                ...(v.canBeUsedFor === undefined ? null : { canBeUsedFor: v.canBeUsedFor }),
                ...(v.country === undefined ? null : { country: v.country }),
                createdAt: v.createdAt,
                ...(v.currency === undefined ? null : { currency: v.currency }),
                eventActors: v.eventActors,
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.externalIds === undefined ? null : { externalIds: v.externalIds }),
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.institutionId === undefined ? null : { institutionId: v.institutionId }),
                ...(v.integration === undefined ? null : { integration: v.integration }),
                labels: v.labels,
                ...(v.mask === undefined ? null : { mask: v.mask }),
                name: v.name,
                numbers: v.numbers,
                ...(v.owners === undefined ? null : { owners: v.owners }),
                ...(v.publicToken === undefined ? null : { publicToken: v.publicToken }),
                status: v.status,
                ...(v.subType === undefined ? null : { subType: v.subType }),
                type: v.type,
                updatedAt: v.updatedAt,
                ...(v.usage === undefined ? null : { usage: v.usage }),
                ...(v.usedFor === undefined ? null : { usedFor: v.usedFor }),
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        accountId: string;
        accountVerification?: AccountVerification$.Outbound | null | undefined;
        canBeUsedFor?: AccountPurpose$.Outbound | null | undefined;
        country?: string | null | undefined;
        createdAt: string;
        currency?: string | null | undefined;
        eventActors: Record<string, string>;
        events?: AccountEvents$.Outbound | null | undefined;
        externalIds?: PlaidExternalIds$.Outbound | null | undefined;
        institution?: string | null | undefined;
        institutionId?: string | null | undefined;
        integration?:
            | SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d$.Outbound
            | null
            | undefined;
        labels: Record<string, string>;
        mask?: string | null | undefined;
        name: string;
        numbers: AccountNumbers$.Outbound;
        owners?: Array<string> | null | undefined;
        publicToken?: string | null | undefined;
        status: AccountStatus;
        subType?: SubType | null | undefined;
        type: Type;
        updatedAt: string;
        usage?: Usage | null | undefined;
        usedFor?: AccountPurpose$.Outbound | null | undefined;
        userId: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z
        .object({
            accountId: z.string(),
            accountVerification: z.nullable(AccountVerification$.outboundSchema).optional(),
            canBeUsedFor: z.nullable(AccountPurpose$.outboundSchema).optional(),
            country: z.nullable(z.string()).optional(),
            createdAt: z.string(),
            currency: z.nullable(z.string()).optional(),
            eventActors: z.record(z.string()),
            events: z.nullable(AccountEvents$.outboundSchema).optional(),
            externalIds: z.nullable(PlaidExternalIds$.outboundSchema).optional(),
            institution: z.nullable(z.string()).optional(),
            institutionId: z.nullable(z.string()).optional(),
            integration: z
                .nullable(
                    SixHundredAndSixtyTwob4b108cbbf88d6c8da2cc52e8dc2fcc4e24449d66b34b20beeb55bad5790d$.outboundSchema
                )
                .optional(),
            labels: z.record(z.string()),
            mask: z.nullable(z.string()).optional(),
            name: z.string(),
            numbers: AccountNumbers$.outboundSchema,
            owners: z.nullable(z.array(z.string())).optional(),
            publicToken: z.nullable(z.string()).optional(),
            status: AccountStatus$,
            subType: z.nullable(SubType$).optional(),
            type: Type$,
            updatedAt: z.string(),
            usage: z.nullable(Usage$).optional(),
            usedFor: z.nullable(AccountPurpose$.outboundSchema).optional(),
            userId: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                accountId: v.accountId,
                ...(v.accountVerification === undefined
                    ? null
                    : { accountVerification: v.accountVerification }),
                ...(v.canBeUsedFor === undefined ? null : { canBeUsedFor: v.canBeUsedFor }),
                ...(v.country === undefined ? null : { country: v.country }),
                createdAt: v.createdAt,
                ...(v.currency === undefined ? null : { currency: v.currency }),
                eventActors: v.eventActors,
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.externalIds === undefined ? null : { externalIds: v.externalIds }),
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.institutionId === undefined ? null : { institutionId: v.institutionId }),
                ...(v.integration === undefined ? null : { integration: v.integration }),
                labels: v.labels,
                ...(v.mask === undefined ? null : { mask: v.mask }),
                name: v.name,
                numbers: v.numbers,
                ...(v.owners === undefined ? null : { owners: v.owners }),
                ...(v.publicToken === undefined ? null : { publicToken: v.publicToken }),
                status: v.status,
                ...(v.subType === undefined ? null : { subType: v.subType }),
                type: v.type,
                updatedAt: v.updatedAt,
                ...(v.usage === undefined ? null : { usage: v.usage }),
                ...(v.usedFor === undefined ? null : { usedFor: v.usedFor }),
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });
}

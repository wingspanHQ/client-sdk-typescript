/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    OrganizationInheritanceStrategy,
    OrganizationInheritanceStrategy$,
} from "./organizationinheritancestrategy";
import { UserRoles, UserRoles$ } from "./userroles";
import { z } from "zod";

export type OrganizationAccount = {
    billingUserId?: string | null | undefined;
    childUserId: string;
    createdAt: string;
    eventActors: Record<string, string>;
    inheritanceStrategy: OrganizationInheritanceStrategy;
    labels: Record<string, string>;
    organizationId: string;
    parentUserId: string;
    updatedAt: string;
    userId: string;
    userRoles: UserRoles;
};

/** @internal */
export namespace OrganizationAccount$ {
    export type Inbound = {
        billingUserId?: string | null | undefined;
        childUserId: string;
        createdAt: string;
        eventActors: Record<string, string>;
        inheritanceStrategy: OrganizationInheritanceStrategy$.Inbound;
        labels: Record<string, string>;
        organizationId: string;
        parentUserId: string;
        updatedAt: string;
        userId: string;
        userRoles: UserRoles$.Inbound;
    };

    export const inboundSchema: z.ZodType<OrganizationAccount, z.ZodTypeDef, Inbound> = z
        .object({
            billingUserId: z.nullable(z.string()).optional(),
            childUserId: z.string(),
            createdAt: z.string(),
            eventActors: z.record(z.string()),
            inheritanceStrategy: OrganizationInheritanceStrategy$.inboundSchema,
            labels: z.record(z.string()),
            organizationId: z.string(),
            parentUserId: z.string(),
            updatedAt: z.string(),
            userId: z.string(),
            userRoles: UserRoles$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.billingUserId === undefined ? null : { billingUserId: v.billingUserId }),
                childUserId: v.childUserId,
                createdAt: v.createdAt,
                eventActors: v.eventActors,
                inheritanceStrategy: v.inheritanceStrategy,
                labels: v.labels,
                organizationId: v.organizationId,
                parentUserId: v.parentUserId,
                updatedAt: v.updatedAt,
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });

    export type Outbound = {
        billingUserId?: string | null | undefined;
        childUserId: string;
        createdAt: string;
        eventActors: Record<string, string>;
        inheritanceStrategy: OrganizationInheritanceStrategy$.Outbound;
        labels: Record<string, string>;
        organizationId: string;
        parentUserId: string;
        updatedAt: string;
        userId: string;
        userRoles: UserRoles$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrganizationAccount> = z
        .object({
            billingUserId: z.nullable(z.string()).optional(),
            childUserId: z.string(),
            createdAt: z.string(),
            eventActors: z.record(z.string()),
            inheritanceStrategy: OrganizationInheritanceStrategy$.outboundSchema,
            labels: z.record(z.string()),
            organizationId: z.string(),
            parentUserId: z.string(),
            updatedAt: z.string(),
            userId: z.string(),
            userRoles: UserRoles$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.billingUserId === undefined ? null : { billingUserId: v.billingUserId }),
                childUserId: v.childUserId,
                createdAt: v.createdAt,
                eventActors: v.eventActors,
                inheritanceStrategy: v.inheritanceStrategy,
                labels: v.labels,
                organizationId: v.organizationId,
                parentUserId: v.parentUserId,
                updatedAt: v.updatedAt,
                userId: v.userId,
                userRoles: v.userRoles,
            };
        });
}

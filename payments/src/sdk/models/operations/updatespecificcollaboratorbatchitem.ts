/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type UpdateSpecificCollaboratorBatchItemRequest = {
  bulkCollaboratorItemUpdate?: shared.BulkCollaboratorItemUpdate | undefined;
  /**
   * Unique identifier for a batch
   */
  batchId: string;
  /**
   * Unique identifier for an item in a batch
   */
  batchItemId: string;
};

export type UpdateSpecificCollaboratorBatchItemResponse = {
  /**
   * An item that will be converted into a collaborator
   */
  bulkCollaboratorItem?: shared.BulkCollaboratorItem | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdateSpecificCollaboratorBatchItemRequest$inboundSchema:
  z.ZodType<UpdateSpecificCollaboratorBatchItemRequest, z.ZodTypeDef, unknown> =
    z.object({
      BulkCollaboratorItemUpdate: shared
        .BulkCollaboratorItemUpdate$inboundSchema.optional(),
      batchId: z.string(),
      batchItemId: z.string(),
    }).transform((v) => {
      return remap$(v, {
        "BulkCollaboratorItemUpdate": "bulkCollaboratorItemUpdate",
      });
    });

/** @internal */
export type UpdateSpecificCollaboratorBatchItemRequest$Outbound = {
  BulkCollaboratorItemUpdate?:
    | shared.BulkCollaboratorItemUpdate$Outbound
    | undefined;
  batchId: string;
  batchItemId: string;
};

/** @internal */
export const UpdateSpecificCollaboratorBatchItemRequest$outboundSchema:
  z.ZodType<
    UpdateSpecificCollaboratorBatchItemRequest$Outbound,
    z.ZodTypeDef,
    UpdateSpecificCollaboratorBatchItemRequest
  > = z.object({
    bulkCollaboratorItemUpdate: shared.BulkCollaboratorItemUpdate$outboundSchema
      .optional(),
    batchId: z.string(),
    batchItemId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bulkCollaboratorItemUpdate: "BulkCollaboratorItemUpdate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSpecificCollaboratorBatchItemRequest$ {
  /** @deprecated use `UpdateSpecificCollaboratorBatchItemRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSpecificCollaboratorBatchItemRequest$inboundSchema;
  /** @deprecated use `UpdateSpecificCollaboratorBatchItemRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSpecificCollaboratorBatchItemRequest$outboundSchema;
  /** @deprecated use `UpdateSpecificCollaboratorBatchItemRequest$Outbound` instead. */
  export type Outbound = UpdateSpecificCollaboratorBatchItemRequest$Outbound;
}

/** @internal */
export const UpdateSpecificCollaboratorBatchItemResponse$inboundSchema:
  z.ZodType<
    UpdateSpecificCollaboratorBatchItemResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    BulkCollaboratorItem: shared.BulkCollaboratorItem$inboundSchema.optional(),
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "BulkCollaboratorItem": "bulkCollaboratorItem",
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type UpdateSpecificCollaboratorBatchItemResponse$Outbound = {
  BulkCollaboratorItem?: shared.BulkCollaboratorItem$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdateSpecificCollaboratorBatchItemResponse$outboundSchema:
  z.ZodType<
    UpdateSpecificCollaboratorBatchItemResponse$Outbound,
    z.ZodTypeDef,
    UpdateSpecificCollaboratorBatchItemResponse
  > = z.object({
    bulkCollaboratorItem: shared.BulkCollaboratorItem$outboundSchema.optional(),
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      bulkCollaboratorItem: "BulkCollaboratorItem",
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSpecificCollaboratorBatchItemResponse$ {
  /** @deprecated use `UpdateSpecificCollaboratorBatchItemResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSpecificCollaboratorBatchItemResponse$inboundSchema;
  /** @deprecated use `UpdateSpecificCollaboratorBatchItemResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSpecificCollaboratorBatchItemResponse$outboundSchema;
  /** @deprecated use `UpdateSpecificCollaboratorBatchItemResponse$Outbound` instead. */
  export type Outbound = UpdateSpecificCollaboratorBatchItemResponse$Outbound;
}

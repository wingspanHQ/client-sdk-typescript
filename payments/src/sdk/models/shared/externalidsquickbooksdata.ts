/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ExternalIdsQuickbooksData = {
    doCreate?: boolean | null | undefined;
    doDelete?: boolean | null | undefined;
    doUpdate?: boolean | null | undefined;
    id: string;
    syncToken: string;
    updatedAt?: string | null | undefined;
};

/** @internal */
export namespace ExternalIdsQuickbooksData$ {
    export type Inbound = {
        doCreate?: boolean | null | undefined;
        doDelete?: boolean | null | undefined;
        doUpdate?: boolean | null | undefined;
        id: string;
        syncToken: string;
        updatedAt?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ExternalIdsQuickbooksData, z.ZodTypeDef, Inbound> = z
        .object({
            doCreate: z.nullable(z.boolean()).optional(),
            doDelete: z.nullable(z.boolean()).optional(),
            doUpdate: z.nullable(z.boolean()).optional(),
            id: z.string(),
            syncToken: z.string(),
            updatedAt: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.doCreate === undefined ? null : { doCreate: v.doCreate }),
                ...(v.doDelete === undefined ? null : { doDelete: v.doDelete }),
                ...(v.doUpdate === undefined ? null : { doUpdate: v.doUpdate }),
                id: v.id,
                syncToken: v.syncToken,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        doCreate?: boolean | null | undefined;
        doDelete?: boolean | null | undefined;
        doUpdate?: boolean | null | undefined;
        id: string;
        syncToken: string;
        updatedAt?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExternalIdsQuickbooksData> = z
        .object({
            doCreate: z.nullable(z.boolean()).optional(),
            doDelete: z.nullable(z.boolean()).optional(),
            doUpdate: z.nullable(z.boolean()).optional(),
            id: z.string(),
            syncToken: z.string(),
            updatedAt: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.doCreate === undefined ? null : { doCreate: v.doCreate }),
                ...(v.doDelete === undefined ? null : { doDelete: v.doDelete }),
                ...(v.doUpdate === undefined ? null : { doUpdate: v.doUpdate }),
                id: v.id,
                syncToken: v.syncToken,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

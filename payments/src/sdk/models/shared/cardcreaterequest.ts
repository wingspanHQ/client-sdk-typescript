/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

export type CardCreateRequest = {
  requestPhysicalCard?: boolean | null | undefined;
  shippingAddress?: Address | null | undefined;
};

/** @internal */
export const CardCreateRequest$inboundSchema: z.ZodType<
  CardCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestPhysicalCard: z.nullable(z.boolean()).optional(),
  shippingAddress: z.nullable(Address$inboundSchema).optional(),
});

/** @internal */
export type CardCreateRequest$Outbound = {
  requestPhysicalCard?: boolean | null | undefined;
  shippingAddress?: Address$Outbound | null | undefined;
};

/** @internal */
export const CardCreateRequest$outboundSchema: z.ZodType<
  CardCreateRequest$Outbound,
  z.ZodTypeDef,
  CardCreateRequest
> = z.object({
  requestPhysicalCard: z.nullable(z.boolean()).optional(),
  shippingAddress: z.nullable(Address$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardCreateRequest$ {
  /** @deprecated use `CardCreateRequest$inboundSchema` instead. */
  export const inboundSchema = CardCreateRequest$inboundSchema;
  /** @deprecated use `CardCreateRequest$outboundSchema` instead. */
  export const outboundSchema = CardCreateRequest$outboundSchema;
  /** @deprecated use `CardCreateRequest$Outbound` instead. */
  export type Outbound = CardCreateRequest$Outbound;
}

export function cardCreateRequestToJSON(
  cardCreateRequest: CardCreateRequest,
): string {
  return JSON.stringify(
    CardCreateRequest$outboundSchema.parse(cardCreateRequest),
  );
}

export function cardCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CardCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardCreateRequest' from JSON`,
  );
}

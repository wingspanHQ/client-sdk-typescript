/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetClientBatchRequest = {
    /**
     * Unique identifier for a batch
     */
    batchId: string;
};

export type GetClientBatchResponse = {
    /**
     * A batch of items for importing as clients
     */
    bulkClientBatch?: shared.BulkClientBatch | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetClientBatchRequest$inboundSchema: z.ZodType<
    GetClientBatchRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    batchId: z.string(),
});

/** @internal */
export type GetClientBatchRequest$Outbound = {
    batchId: string;
};

/** @internal */
export const GetClientBatchRequest$outboundSchema: z.ZodType<
    GetClientBatchRequest$Outbound,
    z.ZodTypeDef,
    GetClientBatchRequest
> = z.object({
    batchId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientBatchRequest$ {
    /** @deprecated use `GetClientBatchRequest$inboundSchema` instead. */
    export const inboundSchema = GetClientBatchRequest$inboundSchema;
    /** @deprecated use `GetClientBatchRequest$outboundSchema` instead. */
    export const outboundSchema = GetClientBatchRequest$outboundSchema;
    /** @deprecated use `GetClientBatchRequest$Outbound` instead. */
    export type Outbound = GetClientBatchRequest$Outbound;
}

/** @internal */
export const GetClientBatchResponse$inboundSchema: z.ZodType<
    GetClientBatchResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        BulkClientBatch: shared.BulkClientBatch$inboundSchema.optional(),
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            BulkClientBatch: "bulkClientBatch",
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetClientBatchResponse$Outbound = {
    BulkClientBatch?: shared.BulkClientBatch$Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetClientBatchResponse$outboundSchema: z.ZodType<
    GetClientBatchResponse$Outbound,
    z.ZodTypeDef,
    GetClientBatchResponse
> = z
    .object({
        bulkClientBatch: shared.BulkClientBatch$outboundSchema.optional(),
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            bulkClientBatch: "BulkClientBatch",
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientBatchResponse$ {
    /** @deprecated use `GetClientBatchResponse$inboundSchema` instead. */
    export const inboundSchema = GetClientBatchResponse$inboundSchema;
    /** @deprecated use `GetClientBatchResponse$outboundSchema` instead. */
    export const outboundSchema = GetClientBatchResponse$outboundSchema;
    /** @deprecated use `GetClientBatchResponse$Outbound` instead. */
    export type Outbound = GetClientBatchResponse$Outbound;
}

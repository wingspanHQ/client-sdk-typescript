/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateCalculation1099BatchItemRequest = {
    bulkCalculation1099ItemUpdate?: shared.BulkCalculation1099ItemUpdate | undefined;
    /**
     * Unique identifier for a batch
     */
    batchId: string;
    /**
     * Unique identifier for an item in a batch
     */
    batchItemId: string;
};

export type UpdateCalculation1099BatchItemResponse = {
    /**
     * An item that will be converted into a payable
     */
    bulkPayableItem?: shared.BulkPayableItem | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateCalculation1099BatchItemRequest$ {
    export type Inbound = {
        BulkCalculation1099ItemUpdate?: shared.BulkCalculation1099ItemUpdate$.Inbound | undefined;
        batchId: string;
        batchItemId: string;
    };

    export const inboundSchema: z.ZodType<
        UpdateCalculation1099BatchItemRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            BulkCalculation1099ItemUpdate:
                shared.BulkCalculation1099ItemUpdate$.inboundSchema.optional(),
            batchId: z.string(),
            batchItemId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.BulkCalculation1099ItemUpdate === undefined
                    ? null
                    : { bulkCalculation1099ItemUpdate: v.BulkCalculation1099ItemUpdate }),
                batchId: v.batchId,
                batchItemId: v.batchItemId,
            };
        });

    export type Outbound = {
        BulkCalculation1099ItemUpdate?: shared.BulkCalculation1099ItemUpdate$.Outbound | undefined;
        batchId: string;
        batchItemId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateCalculation1099BatchItemRequest
    > = z
        .object({
            bulkCalculation1099ItemUpdate:
                shared.BulkCalculation1099ItemUpdate$.outboundSchema.optional(),
            batchId: z.string(),
            batchItemId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.bulkCalculation1099ItemUpdate === undefined
                    ? null
                    : { BulkCalculation1099ItemUpdate: v.bulkCalculation1099ItemUpdate }),
                batchId: v.batchId,
                batchItemId: v.batchItemId,
            };
        });
}

/** @internal */
export namespace UpdateCalculation1099BatchItemResponse$ {
    export type Inbound = {
        BulkPayableItem?: shared.BulkPayableItem$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        UpdateCalculation1099BatchItemResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            BulkPayableItem: shared.BulkPayableItem$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.BulkPayableItem === undefined
                    ? null
                    : { bulkPayableItem: v.BulkPayableItem }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        BulkPayableItem?: shared.BulkPayableItem$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateCalculation1099BatchItemResponse
    > = z
        .object({
            bulkPayableItem: shared.BulkPayableItem$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.bulkPayableItem === undefined
                    ? null
                    : { BulkPayableItem: v.bulkPayableItem }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type UserRoles = {
    ownerIds: Array<string>;
    viewerIds: Array<string>;
};

/** @internal */
export namespace UserRoles$ {
    export type Inbound = {
        ownerIds: Array<string>;
        viewerIds: Array<string>;
    };

    export const inboundSchema: z.ZodType<UserRoles, z.ZodTypeDef, Inbound> = z
        .object({
            ownerIds: z.array(z.string()),
            viewerIds: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ownerIds: v.ownerIds,
                viewerIds: v.viewerIds,
            };
        });

    export type Outbound = {
        ownerIds: Array<string>;
        viewerIds: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserRoles> = z
        .object({
            ownerIds: z.array(z.string()),
            viewerIds: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ownerIds: v.ownerIds,
                viewerIds: v.viewerIds,
            };
        });
}

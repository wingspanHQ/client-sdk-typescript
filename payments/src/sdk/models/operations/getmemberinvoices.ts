/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type GetMemberInvoicesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * A list of invoices
   */
  classes?: Array<shared.Invoice> | undefined;
};

/** @internal */
export const GetMemberInvoicesResponse$inboundSchema: z.ZodType<
  GetMemberInvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  classes: z.array(shared.Invoice$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetMemberInvoicesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  classes?: Array<shared.Invoice$Outbound> | undefined;
};

/** @internal */
export const GetMemberInvoicesResponse$outboundSchema: z.ZodType<
  GetMemberInvoicesResponse$Outbound,
  z.ZodTypeDef,
  GetMemberInvoicesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  classes: z.array(shared.Invoice$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberInvoicesResponse$ {
  /** @deprecated use `GetMemberInvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = GetMemberInvoicesResponse$inboundSchema;
  /** @deprecated use `GetMemberInvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = GetMemberInvoicesResponse$outboundSchema;
  /** @deprecated use `GetMemberInvoicesResponse$Outbound` instead. */
  export type Outbound = GetMemberInvoicesResponse$Outbound;
}

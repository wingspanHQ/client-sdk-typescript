/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaxFormUpdateRequestData = {};

export const TaxFormUpdateRequestStatus = {
  Pending: "Pending",
  ReadyToSubmitToIrs: "ReadyToSubmitToIrs",
  SubmittedToIrs: "SubmittedToIrs",
  AcceptedByIrs: "AcceptedByIrs",
  RejectedByIrs: "RejectedByIrs",
  PendingCorrection: "PendingCorrection",
  Excluded: "Excluded",
  Ineligible: "Ineligible",
} as const;
export type TaxFormUpdateRequestStatus = ClosedEnum<
  typeof TaxFormUpdateRequestStatus
>;

export type TaxFormUpdateRequest = {
  data: TaxFormUpdateRequestData;
  payerConfirmedW9Info?: boolean | null | undefined;
  status?: TaxFormUpdateRequestStatus | null | undefined;
};

/** @internal */
export const TaxFormUpdateRequestData$inboundSchema: z.ZodType<
  TaxFormUpdateRequestData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaxFormUpdateRequestData$Outbound = {};

/** @internal */
export const TaxFormUpdateRequestData$outboundSchema: z.ZodType<
  TaxFormUpdateRequestData$Outbound,
  z.ZodTypeDef,
  TaxFormUpdateRequestData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxFormUpdateRequestData$ {
  /** @deprecated use `TaxFormUpdateRequestData$inboundSchema` instead. */
  export const inboundSchema = TaxFormUpdateRequestData$inboundSchema;
  /** @deprecated use `TaxFormUpdateRequestData$outboundSchema` instead. */
  export const outboundSchema = TaxFormUpdateRequestData$outboundSchema;
  /** @deprecated use `TaxFormUpdateRequestData$Outbound` instead. */
  export type Outbound = TaxFormUpdateRequestData$Outbound;
}

export function taxFormUpdateRequestDataToJSON(
  taxFormUpdateRequestData: TaxFormUpdateRequestData,
): string {
  return JSON.stringify(
    TaxFormUpdateRequestData$outboundSchema.parse(taxFormUpdateRequestData),
  );
}

export function taxFormUpdateRequestDataFromJSON(
  jsonString: string,
): SafeParseResult<TaxFormUpdateRequestData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxFormUpdateRequestData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxFormUpdateRequestData' from JSON`,
  );
}

/** @internal */
export const TaxFormUpdateRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof TaxFormUpdateRequestStatus
> = z.nativeEnum(TaxFormUpdateRequestStatus);

/** @internal */
export const TaxFormUpdateRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof TaxFormUpdateRequestStatus
> = TaxFormUpdateRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxFormUpdateRequestStatus$ {
  /** @deprecated use `TaxFormUpdateRequestStatus$inboundSchema` instead. */
  export const inboundSchema = TaxFormUpdateRequestStatus$inboundSchema;
  /** @deprecated use `TaxFormUpdateRequestStatus$outboundSchema` instead. */
  export const outboundSchema = TaxFormUpdateRequestStatus$outboundSchema;
}

/** @internal */
export const TaxFormUpdateRequest$inboundSchema: z.ZodType<
  TaxFormUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => TaxFormUpdateRequestData$inboundSchema),
  payerConfirmedW9Info: z.nullable(z.boolean()).optional(),
  status: z.nullable(TaxFormUpdateRequestStatus$inboundSchema).optional(),
});

/** @internal */
export type TaxFormUpdateRequest$Outbound = {
  data: TaxFormUpdateRequestData$Outbound;
  payerConfirmedW9Info?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const TaxFormUpdateRequest$outboundSchema: z.ZodType<
  TaxFormUpdateRequest$Outbound,
  z.ZodTypeDef,
  TaxFormUpdateRequest
> = z.object({
  data: z.lazy(() => TaxFormUpdateRequestData$outboundSchema),
  payerConfirmedW9Info: z.nullable(z.boolean()).optional(),
  status: z.nullable(TaxFormUpdateRequestStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxFormUpdateRequest$ {
  /** @deprecated use `TaxFormUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = TaxFormUpdateRequest$inboundSchema;
  /** @deprecated use `TaxFormUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = TaxFormUpdateRequest$outboundSchema;
  /** @deprecated use `TaxFormUpdateRequest$Outbound` instead. */
  export type Outbound = TaxFormUpdateRequest$Outbound;
}

export function taxFormUpdateRequestToJSON(
  taxFormUpdateRequest: TaxFormUpdateRequest,
): string {
  return JSON.stringify(
    TaxFormUpdateRequest$outboundSchema.parse(taxFormUpdateRequest),
  );
}

export function taxFormUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TaxFormUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxFormUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxFormUpdateRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  CollaboratorGroupRequirement,
  CollaboratorGroupRequirement$inboundSchema,
  CollaboratorGroupRequirement$Outbound,
  CollaboratorGroupRequirement$outboundSchema,
} from "./collaboratorgrouprequirement.js";

export type CollaboratorGroupUpdateRequest = {
  collaboratorSettings?: { [k: string]: string } | null | undefined;
  description?: string | null | undefined;
  eligibilityRequirements?:
    | Array<CollaboratorGroupRequirement>
    | null
    | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CollaboratorGroupUpdateRequest$inboundSchema: z.ZodType<
  CollaboratorGroupUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collaboratorSettings: z.nullable(z.record(z.string())).optional(),
  description: z.nullable(z.string()).optional(),
  eligibilityRequirements: z.nullable(
    z.array(CollaboratorGroupRequirement$inboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CollaboratorGroupUpdateRequest$Outbound = {
  collaboratorSettings?: { [k: string]: string } | null | undefined;
  description?: string | null | undefined;
  eligibilityRequirements?:
    | Array<CollaboratorGroupRequirement$Outbound>
    | null
    | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CollaboratorGroupUpdateRequest$outboundSchema: z.ZodType<
  CollaboratorGroupUpdateRequest$Outbound,
  z.ZodTypeDef,
  CollaboratorGroupUpdateRequest
> = z.object({
  collaboratorSettings: z.nullable(z.record(z.string())).optional(),
  description: z.nullable(z.string()).optional(),
  eligibilityRequirements: z.nullable(
    z.array(CollaboratorGroupRequirement$outboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollaboratorGroupUpdateRequest$ {
  /** @deprecated use `CollaboratorGroupUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CollaboratorGroupUpdateRequest$inboundSchema;
  /** @deprecated use `CollaboratorGroupUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CollaboratorGroupUpdateRequest$outboundSchema;
  /** @deprecated use `CollaboratorGroupUpdateRequest$Outbound` instead. */
  export type Outbound = CollaboratorGroupUpdateRequest$Outbound;
}

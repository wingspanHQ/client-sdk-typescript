/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RedactedMember, RedactedMember$ } from "./redactedmember";
import { RedactedUser, RedactedUser$ } from "./redacteduser";
import * as z from "zod";

export type AuthorizedAccount = {
    accessibleMember: RedactedMember;
    accessibleUser: RedactedUser;
    allowedScopeGroupIds: Array<string>;
    userId: string;
};

/** @internal */
export namespace AuthorizedAccount$ {
    export type Inbound = {
        accessibleMember: RedactedMember$.Inbound;
        accessibleUser: RedactedUser$.Inbound;
        allowedScopeGroupIds: Array<string>;
        userId: string;
    };

    export const inboundSchema: z.ZodType<AuthorizedAccount, z.ZodTypeDef, Inbound> = z
        .object({
            accessibleMember: RedactedMember$.inboundSchema,
            accessibleUser: RedactedUser$.inboundSchema,
            allowedScopeGroupIds: z.array(z.string()),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                accessibleMember: v.accessibleMember,
                accessibleUser: v.accessibleUser,
                allowedScopeGroupIds: v.allowedScopeGroupIds,
                userId: v.userId,
            };
        });

    export type Outbound = {
        accessibleMember: RedactedMember$.Outbound;
        accessibleUser: RedactedUser$.Outbound;
        allowedScopeGroupIds: Array<string>;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorizedAccount> = z
        .object({
            accessibleMember: RedactedMember$.outboundSchema,
            accessibleUser: RedactedUser$.outboundSchema,
            allowedScopeGroupIds: z.array(z.string()),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                accessibleMember: v.accessibleMember,
                accessibleUser: v.accessibleUser,
                allowedScopeGroupIds: v.allowedScopeGroupIds,
                userId: v.userId,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DocumentEvents = {
    clientSignedAt?: string | null | undefined;
    memberSignedAt?: string | null | undefined;
};

/** @internal */
export namespace DocumentEvents$ {
    export type Inbound = {
        clientSignedAt?: string | null | undefined;
        memberSignedAt?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<DocumentEvents, z.ZodTypeDef, Inbound> = z
        .object({
            clientSignedAt: z.nullable(z.string()).optional(),
            memberSignedAt: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.clientSignedAt === undefined ? null : { clientSignedAt: v.clientSignedAt }),
                ...(v.memberSignedAt === undefined ? null : { memberSignedAt: v.memberSignedAt }),
            };
        });

    export type Outbound = {
        clientSignedAt?: string | null | undefined;
        memberSignedAt?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DocumentEvents> = z
        .object({
            clientSignedAt: z.nullable(z.string()).optional(),
            memberSignedAt: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.clientSignedAt === undefined ? null : { clientSignedAt: v.clientSignedAt }),
                ...(v.memberSignedAt === undefined ? null : { memberSignedAt: v.memberSignedAt }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetDebitCardRequest = {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Unique identifier of a member
   */
  memberId: string;
};

export type GetDebitCardResponse = {
  /**
   * A payout debit card
   */
  checkbookCard?: shared.CheckbookCard | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetDebitCardRequest$inboundSchema: z.ZodType<
  GetDebitCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  memberId: z.string(),
});

/** @internal */
export type GetDebitCardRequest$Outbound = {
  id: string;
  memberId: string;
};

/** @internal */
export const GetDebitCardRequest$outboundSchema: z.ZodType<
  GetDebitCardRequest$Outbound,
  z.ZodTypeDef,
  GetDebitCardRequest
> = z.object({
  id: z.string(),
  memberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDebitCardRequest$ {
  /** @deprecated use `GetDebitCardRequest$inboundSchema` instead. */
  export const inboundSchema = GetDebitCardRequest$inboundSchema;
  /** @deprecated use `GetDebitCardRequest$outboundSchema` instead. */
  export const outboundSchema = GetDebitCardRequest$outboundSchema;
  /** @deprecated use `GetDebitCardRequest$Outbound` instead. */
  export type Outbound = GetDebitCardRequest$Outbound;
}

export function getDebitCardRequestToJSON(
  getDebitCardRequest: GetDebitCardRequest,
): string {
  return JSON.stringify(
    GetDebitCardRequest$outboundSchema.parse(getDebitCardRequest),
  );
}

export function getDebitCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDebitCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDebitCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDebitCardRequest' from JSON`,
  );
}

/** @internal */
export const GetDebitCardResponse$inboundSchema: z.ZodType<
  GetDebitCardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CheckbookCard: shared.CheckbookCard$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CheckbookCard": "checkbookCard",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetDebitCardResponse$Outbound = {
  CheckbookCard?: shared.CheckbookCard$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetDebitCardResponse$outboundSchema: z.ZodType<
  GetDebitCardResponse$Outbound,
  z.ZodTypeDef,
  GetDebitCardResponse
> = z.object({
  checkbookCard: shared.CheckbookCard$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    checkbookCard: "CheckbookCard",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDebitCardResponse$ {
  /** @deprecated use `GetDebitCardResponse$inboundSchema` instead. */
  export const inboundSchema = GetDebitCardResponse$inboundSchema;
  /** @deprecated use `GetDebitCardResponse$outboundSchema` instead. */
  export const outboundSchema = GetDebitCardResponse$outboundSchema;
  /** @deprecated use `GetDebitCardResponse$Outbound` instead. */
  export type Outbound = GetDebitCardResponse$Outbound;
}

export function getDebitCardResponseToJSON(
  getDebitCardResponse: GetDebitCardResponse,
): string {
  return JSON.stringify(
    GetDebitCardResponse$outboundSchema.parse(getDebitCardResponse),
  );
}

export function getDebitCardResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDebitCardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDebitCardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDebitCardResponse' from JSON`,
  );
}

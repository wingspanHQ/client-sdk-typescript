/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum DeductionCreateRequestCurrency {
    Usd = "USD",
    Cad = "CAD",
}

export enum DeductionCreateRequestType {
    PrePayment = "PrePayment",
    PostPayment = "PostPayment",
}

export type DeductionCreateRequest = {
    amount: number;
    clientId: string;
    currency: DeductionCreateRequestCurrency;
    memberId: string;
    name: string;
    priority?: number | null | undefined;
    sourceInvoiceId?: string | null | undefined;
    startDate?: string | null | undefined;
    type: DeductionCreateRequestType;
};

/** @internal */
export const DeductionCreateRequestCurrency$ = z.nativeEnum(DeductionCreateRequestCurrency);

/** @internal */
export const DeductionCreateRequestType$ = z.nativeEnum(DeductionCreateRequestType);

/** @internal */
export namespace DeductionCreateRequest$ {
    export type Inbound = {
        amount: number;
        clientId: string;
        currency: DeductionCreateRequestCurrency;
        memberId: string;
        name: string;
        priority?: number | null | undefined;
        sourceInvoiceId?: string | null | undefined;
        startDate?: string | null | undefined;
        type: DeductionCreateRequestType;
    };

    export const inboundSchema: z.ZodType<DeductionCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            clientId: z.string(),
            currency: DeductionCreateRequestCurrency$,
            memberId: z.string(),
            name: z.string(),
            priority: z.nullable(z.number()).optional(),
            sourceInvoiceId: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.string()).optional(),
            type: DeductionCreateRequestType$,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                clientId: v.clientId,
                currency: v.currency,
                memberId: v.memberId,
                name: v.name,
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.sourceInvoiceId === undefined
                    ? null
                    : { sourceInvoiceId: v.sourceInvoiceId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                type: v.type,
            };
        });

    export type Outbound = {
        amount: number;
        clientId: string;
        currency: DeductionCreateRequestCurrency;
        memberId: string;
        name: string;
        priority?: number | null | undefined;
        sourceInvoiceId?: string | null | undefined;
        startDate?: string | null | undefined;
        type: DeductionCreateRequestType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeductionCreateRequest> = z
        .object({
            amount: z.number(),
            clientId: z.string(),
            currency: DeductionCreateRequestCurrency$,
            memberId: z.string(),
            name: z.string(),
            priority: z.nullable(z.number()).optional(),
            sourceInvoiceId: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.string()).optional(),
            type: DeductionCreateRequestType$,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                clientId: v.clientId,
                currency: v.currency,
                memberId: v.memberId,
                name: v.name,
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.sourceInvoiceId === undefined
                    ? null
                    : { sourceInvoiceId: v.sourceInvoiceId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                type: v.type,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum CustomFieldResourceType {
    Collaborator = "Collaborator",
    LineItem = "LineItem",
}

export enum CustomFieldType {
    Boolean = "Boolean",
    String = "String",
}

export type CustomField = {
    id: string;
    key: string;
    name: string;
    required: boolean;
    resourceType: CustomFieldResourceType;
    type: CustomFieldType;
};

/** @internal */
export const CustomFieldResourceType$ = z.nativeEnum(CustomFieldResourceType);

/** @internal */
export const CustomFieldType$ = z.nativeEnum(CustomFieldType);

/** @internal */
export namespace CustomField$ {
    export type Inbound = {
        id: string;
        key: string;
        name: string;
        required: boolean;
        resourceType: CustomFieldResourceType;
        type: CustomFieldType;
    };

    export const inboundSchema: z.ZodType<CustomField, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            key: z.string(),
            name: z.string(),
            required: z.boolean(),
            resourceType: CustomFieldResourceType$,
            type: CustomFieldType$,
        })
        .transform((v) => {
            return {
                id: v.id,
                key: v.key,
                name: v.name,
                required: v.required,
                resourceType: v.resourceType,
                type: v.type,
            };
        });

    export type Outbound = {
        id: string;
        key: string;
        name: string;
        required: boolean;
        resourceType: CustomFieldResourceType;
        type: CustomFieldType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomField> = z
        .object({
            id: z.string(),
            key: z.string(),
            name: z.string(),
            required: z.boolean(),
            resourceType: CustomFieldResourceType$,
            type: CustomFieldType$,
        })
        .transform((v) => {
            return {
                id: v.id,
                key: v.key,
                name: v.name,
                required: v.required,
                resourceType: v.resourceType,
                type: v.type,
            };
        });
}

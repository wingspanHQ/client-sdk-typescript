/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Action {
    Include = "Include",
    Exclude = "Exclude",
    Allow = "Allow",
    Deny = "Deny",
}

export enum Comparator {
    Equals = "Equals",
    Includes = "Includes",
}

export type ScopeModification = {
    action: Action;
    attribute: string;
    comparator: Comparator;
    value: string;
};

/** @internal */
export const Action$ = z.nativeEnum(Action);

/** @internal */
export const Comparator$ = z.nativeEnum(Comparator);

/** @internal */
export namespace ScopeModification$ {
    export type Inbound = {
        action: Action;
        attribute: string;
        comparator: Comparator;
        value: string;
    };

    export const inboundSchema: z.ZodType<ScopeModification, z.ZodTypeDef, Inbound> = z
        .object({
            action: Action$,
            attribute: z.string(),
            comparator: Comparator$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                action: v.action,
                attribute: v.attribute,
                comparator: v.comparator,
                value: v.value,
            };
        });

    export type Outbound = {
        action: Action;
        attribute: string;
        comparator: Comparator;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScopeModification> = z
        .object({
            action: Action$,
            attribute: z.string(),
            comparator: Comparator$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                action: v.action,
                attribute: v.attribute,
                comparator: v.comparator,
                value: v.value,
            };
        });
}

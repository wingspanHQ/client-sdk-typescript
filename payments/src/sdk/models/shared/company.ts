/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    CompanyLinks,
    CompanyLinks$inboundSchema,
    CompanyLinks$Outbound,
    CompanyLinks$outboundSchema,
} from "./companylinks.js";
import {
    CompanyPerson,
    CompanyPerson$inboundSchema,
    CompanyPerson$Outbound,
    CompanyPerson$outboundSchema,
} from "./companyperson.js";
import * as z from "zod";

export const Structure = {
    None: "None",
    SoleProprietorship: "SoleProprietorship",
    LlcSingleMember: "LlcSingleMember",
    LlcMultiMember: "LlcMultiMember",
    CorporationS: "CorporationS",
    LLCCorporationS: "LLCCorporationS",
    LLCCorporationC: "LLCCorporationC",
    LLCPartnership: "LLCPartnership",
    CorporationC: "CorporationC",
    Partnership: "Partnership",
} as const;
export type Structure = ClosedEnum<typeof Structure>;

export type Company = {
    banking?: boolean | null | undefined;
    companyOwners?: Array<CompanyPerson> | null | undefined;
    description?: string | null | undefined;
    disregardedEntityName?: string | null | undefined;
    legalBusinessName?: string | null | undefined;
    links?: CompanyLinks | null | undefined;
    name?: string | null | undefined;
    stateOfIncorporation?: string | null | undefined;
    structure?: Structure | null | undefined;
    supportEmail?: string | null | undefined;
    taxId?: string | null | undefined;
    website?: string | null | undefined;
    yearOfIncorporation?: string | null | undefined;
};

/** @internal */
export const Structure$inboundSchema: z.ZodNativeEnum<typeof Structure> = z.nativeEnum(Structure);

/** @internal */
export const Structure$outboundSchema: z.ZodNativeEnum<typeof Structure> = Structure$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Structure$ {
    /** @deprecated use `Structure$inboundSchema` instead. */
    export const inboundSchema = Structure$inboundSchema;
    /** @deprecated use `Structure$outboundSchema` instead. */
    export const outboundSchema = Structure$outboundSchema;
}

/** @internal */
export const Company$inboundSchema: z.ZodType<Company, z.ZodTypeDef, unknown> = z.object({
    banking: z.nullable(z.boolean()).optional(),
    companyOwners: z.nullable(z.array(CompanyPerson$inboundSchema)).optional(),
    description: z.nullable(z.string()).optional(),
    disregardedEntityName: z.nullable(z.string()).optional(),
    legalBusinessName: z.nullable(z.string()).optional(),
    links: z.nullable(CompanyLinks$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    stateOfIncorporation: z.nullable(z.string()).optional(),
    structure: z.nullable(Structure$inboundSchema).optional(),
    supportEmail: z.nullable(z.string()).optional(),
    taxId: z.nullable(z.string()).optional(),
    website: z.nullable(z.string()).optional(),
    yearOfIncorporation: z.nullable(z.string()).optional(),
});

/** @internal */
export type Company$Outbound = {
    banking?: boolean | null | undefined;
    companyOwners?: Array<CompanyPerson$Outbound> | null | undefined;
    description?: string | null | undefined;
    disregardedEntityName?: string | null | undefined;
    legalBusinessName?: string | null | undefined;
    links?: CompanyLinks$Outbound | null | undefined;
    name?: string | null | undefined;
    stateOfIncorporation?: string | null | undefined;
    structure?: string | null | undefined;
    supportEmail?: string | null | undefined;
    taxId?: string | null | undefined;
    website?: string | null | undefined;
    yearOfIncorporation?: string | null | undefined;
};

/** @internal */
export const Company$outboundSchema: z.ZodType<Company$Outbound, z.ZodTypeDef, Company> = z.object({
    banking: z.nullable(z.boolean()).optional(),
    companyOwners: z.nullable(z.array(CompanyPerson$outboundSchema)).optional(),
    description: z.nullable(z.string()).optional(),
    disregardedEntityName: z.nullable(z.string()).optional(),
    legalBusinessName: z.nullable(z.string()).optional(),
    links: z.nullable(CompanyLinks$outboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    stateOfIncorporation: z.nullable(z.string()).optional(),
    structure: z.nullable(Structure$outboundSchema).optional(),
    supportEmail: z.nullable(z.string()).optional(),
    taxId: z.nullable(z.string()).optional(),
    website: z.nullable(z.string()).optional(),
    yearOfIncorporation: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Company$ {
    /** @deprecated use `Company$inboundSchema` instead. */
    export const inboundSchema = Company$inboundSchema;
    /** @deprecated use `Company$outboundSchema` instead. */
    export const outboundSchema = Company$outboundSchema;
    /** @deprecated use `Company$Outbound` instead. */
    export type Outbound = Company$Outbound;
}

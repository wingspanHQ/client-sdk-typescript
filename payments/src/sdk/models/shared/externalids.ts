/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalIdsBulkImport,
  ExternalIdsBulkImport$inboundSchema,
  ExternalIdsBulkImport$Outbound,
  ExternalIdsBulkImport$outboundSchema,
} from "./externalidsbulkimport.js";
import {
  ExternalIdsQuickbooksData,
  ExternalIdsQuickbooksData$inboundSchema,
  ExternalIdsQuickbooksData$Outbound,
  ExternalIdsQuickbooksData$outboundSchema,
} from "./externalidsquickbooksdata.js";

export type ExternalIds = {
  bulk?: ExternalIdsBulkImport | null | undefined;
  quickbooks?: { [k: string]: ExternalIdsQuickbooksData } | null | undefined;
  stripe?: string | null | undefined;
};

/** @internal */
export const ExternalIds$inboundSchema: z.ZodType<
  ExternalIds,
  z.ZodTypeDef,
  unknown
> = z.object({
  bulk: z.nullable(ExternalIdsBulkImport$inboundSchema).optional(),
  quickbooks: z.nullable(z.record(ExternalIdsQuickbooksData$inboundSchema))
    .optional(),
  stripe: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExternalIds$Outbound = {
  bulk?: ExternalIdsBulkImport$Outbound | null | undefined;
  quickbooks?:
    | { [k: string]: ExternalIdsQuickbooksData$Outbound }
    | null
    | undefined;
  stripe?: string | null | undefined;
};

/** @internal */
export const ExternalIds$outboundSchema: z.ZodType<
  ExternalIds$Outbound,
  z.ZodTypeDef,
  ExternalIds
> = z.object({
  bulk: z.nullable(ExternalIdsBulkImport$outboundSchema).optional(),
  quickbooks: z.nullable(z.record(ExternalIdsQuickbooksData$outboundSchema))
    .optional(),
  stripe: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalIds$ {
  /** @deprecated use `ExternalIds$inboundSchema` instead. */
  export const inboundSchema = ExternalIds$inboundSchema;
  /** @deprecated use `ExternalIds$outboundSchema` instead. */
  export const outboundSchema = ExternalIds$outboundSchema;
  /** @deprecated use `ExternalIds$Outbound` instead. */
  export type Outbound = ExternalIds$Outbound;
}

export function externalIdsToJSON(externalIds: ExternalIds): string {
  return JSON.stringify(ExternalIds$outboundSchema.parse(externalIds));
}

export function externalIdsFromJSON(
  jsonString: string,
): SafeParseResult<ExternalIds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalIds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalIds' from JSON`,
  );
}

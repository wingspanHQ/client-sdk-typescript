/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ServiceState {
    Disabled = "Disabled",
    Enabled = "Enabled",
    Pending = "Pending",
}

export type ServiceEnablementResponse = {
    enabled: boolean;
    missingProperties?: Array<string> | null | undefined;
    serviceState: ServiceState;
    test?: string | null | undefined;
};

/** @internal */
export const ServiceState$ = z.nativeEnum(ServiceState);

/** @internal */
export namespace ServiceEnablementResponse$ {
    export type Inbound = {
        enabled: boolean;
        missingProperties?: Array<string> | null | undefined;
        serviceState: ServiceState;
        test?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ServiceEnablementResponse, z.ZodTypeDef, Inbound> = z
        .object({
            enabled: z.boolean(),
            missingProperties: z.nullable(z.array(z.string())).optional(),
            serviceState: ServiceState$,
            test: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
                ...(v.missingProperties === undefined
                    ? null
                    : { missingProperties: v.missingProperties }),
                serviceState: v.serviceState,
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });

    export type Outbound = {
        enabled: boolean;
        missingProperties?: Array<string> | null | undefined;
        serviceState: ServiceState;
        test?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServiceEnablementResponse> = z
        .object({
            enabled: z.boolean(),
            missingProperties: z.nullable(z.array(z.string())).optional(),
            serviceState: ServiceState$,
            test: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
                ...(v.missingProperties === undefined
                    ? null
                    : { missingProperties: v.missingProperties }),
                serviceState: v.serviceState,
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { BankingManagement } from "./bankingmanagement";
import { BulkOperations } from "./bulkoperations";
import { ClientManagement } from "./clientmanagement";
import { CollaboratorManagement } from "./collaboratormanagement";
import { CustomFieldManagement } from "./customfieldmanagement";
import { Deprecated } from "./deprecated";
import { DocumentSigningAndEligibility } from "./documentsigningandeligibility";
import { InvoiceManagement } from "./invoicemanagement";
import { MerchantCategoryCodes } from "./merchantcategorycodes";
import { OneThousandAndNinetyNineOperations } from "./onethousandandninetynineoperations";
import { PayablesManagement } from "./payablesmanagement";
import { PayrollSettings } from "./payrollsettings";
import { ReportingAndAnalytics } from "./reportingandanalytics";
import { ServiceSettings } from "./servicesettings";
import { WingspanWallet } from "./wingspanwallet";

export class Payments extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _serviceSettings?: ServiceSettings;
    get serviceSettings() {
        return (this._serviceSettings ??= new ServiceSettings(this.options$));
    }

    private _wingspanWallet?: WingspanWallet;
    get wingspanWallet() {
        return (this._wingspanWallet ??= new WingspanWallet(this.options$));
    }

    private _deprecated?: Deprecated;
    get deprecated() {
        return (this._deprecated ??= new Deprecated(this.options$));
    }

    private _bankingManagement?: BankingManagement;
    get bankingManagement() {
        return (this._bankingManagement ??= new BankingManagement(this.options$));
    }

    private _oneThousandAndNinetyNineOperations?: OneThousandAndNinetyNineOperations;
    get oneThousandAndNinetyNineOperations() {
        return (this._oneThousandAndNinetyNineOperations ??= new OneThousandAndNinetyNineOperations(
            this.options$
        ));
    }

    private _bulkOperations?: BulkOperations;
    get bulkOperations() {
        return (this._bulkOperations ??= new BulkOperations(this.options$));
    }

    private _clientManagement?: ClientManagement;
    get clientManagement() {
        return (this._clientManagement ??= new ClientManagement(this.options$));
    }

    private _invoiceManagement?: InvoiceManagement;
    get invoiceManagement() {
        return (this._invoiceManagement ??= new InvoiceManagement(this.options$));
    }

    private _collaboratorManagement?: CollaboratorManagement;
    get collaboratorManagement() {
        return (this._collaboratorManagement ??= new CollaboratorManagement(this.options$));
    }

    private _documentSigningAndEligibility?: DocumentSigningAndEligibility;
    get documentSigningAndEligibility() {
        return (this._documentSigningAndEligibility ??= new DocumentSigningAndEligibility(
            this.options$
        ));
    }

    private _customFieldManagement?: CustomFieldManagement;
    get customFieldManagement() {
        return (this._customFieldManagement ??= new CustomFieldManagement(this.options$));
    }

    private _merchantCategoryCodes?: MerchantCategoryCodes;
    get merchantCategoryCodes() {
        return (this._merchantCategoryCodes ??= new MerchantCategoryCodes(this.options$));
    }

    private _payablesManagement?: PayablesManagement;
    get payablesManagement() {
        return (this._payablesManagement ??= new PayablesManagement(this.options$));
    }

    private _payrollSettings?: PayrollSettings;
    get payrollSettings() {
        return (this._payrollSettings ??= new PayrollSettings(this.options$));
    }

    private _reportingAndAnalytics?: ReportingAndAnalytics;
    get reportingAndAnalytics() {
        return (this._reportingAndAnalytics ??= new ReportingAndAnalytics(this.options$));
    }
}

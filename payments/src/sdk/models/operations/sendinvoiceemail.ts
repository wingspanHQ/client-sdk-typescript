/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type SendInvoiceEmailRequest = {
  /**
   * Unique identifier of an invoice
   */
  invoiceId: string;
};

export type SendInvoiceEmailResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An invoice
   */
  invoice?: shared.Invoice | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const SendInvoiceEmailRequest$inboundSchema: z.ZodType<
  SendInvoiceEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type SendInvoiceEmailRequest$Outbound = {
  invoice_id: string;
};

/** @internal */
export const SendInvoiceEmailRequest$outboundSchema: z.ZodType<
  SendInvoiceEmailRequest$Outbound,
  z.ZodTypeDef,
  SendInvoiceEmailRequest
> = z.object({
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendInvoiceEmailRequest$ {
  /** @deprecated use `SendInvoiceEmailRequest$inboundSchema` instead. */
  export const inboundSchema = SendInvoiceEmailRequest$inboundSchema;
  /** @deprecated use `SendInvoiceEmailRequest$outboundSchema` instead. */
  export const outboundSchema = SendInvoiceEmailRequest$outboundSchema;
  /** @deprecated use `SendInvoiceEmailRequest$Outbound` instead. */
  export type Outbound = SendInvoiceEmailRequest$Outbound;
}

export function sendInvoiceEmailRequestToJSON(
  sendInvoiceEmailRequest: SendInvoiceEmailRequest,
): string {
  return JSON.stringify(
    SendInvoiceEmailRequest$outboundSchema.parse(sendInvoiceEmailRequest),
  );
}

export function sendInvoiceEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<SendInvoiceEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendInvoiceEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendInvoiceEmailRequest' from JSON`,
  );
}

/** @internal */
export const SendInvoiceEmailResponse$inboundSchema: z.ZodType<
  SendInvoiceEmailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Invoice: shared.Invoice$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Invoice": "invoice",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type SendInvoiceEmailResponse$Outbound = {
  ContentType: string;
  Invoice?: shared.Invoice$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const SendInvoiceEmailResponse$outboundSchema: z.ZodType<
  SendInvoiceEmailResponse$Outbound,
  z.ZodTypeDef,
  SendInvoiceEmailResponse
> = z.object({
  contentType: z.string(),
  invoice: shared.Invoice$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    invoice: "Invoice",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendInvoiceEmailResponse$ {
  /** @deprecated use `SendInvoiceEmailResponse$inboundSchema` instead. */
  export const inboundSchema = SendInvoiceEmailResponse$inboundSchema;
  /** @deprecated use `SendInvoiceEmailResponse$outboundSchema` instead. */
  export const outboundSchema = SendInvoiceEmailResponse$outboundSchema;
  /** @deprecated use `SendInvoiceEmailResponse$Outbound` instead. */
  export type Outbound = SendInvoiceEmailResponse$Outbound;
}

export function sendInvoiceEmailResponseToJSON(
  sendInvoiceEmailResponse: SendInvoiceEmailResponse,
): string {
  return JSON.stringify(
    SendInvoiceEmailResponse$outboundSchema.parse(sendInvoiceEmailResponse),
  );
}

export function sendInvoiceEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<SendInvoiceEmailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendInvoiceEmailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendInvoiceEmailResponse' from JSON`,
  );
}

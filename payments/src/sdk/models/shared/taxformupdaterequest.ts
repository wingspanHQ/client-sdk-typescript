/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TaxFormUpdateRequestData = {};

export enum TaxFormUpdateRequestStatus {
    Pending = "Pending",
    ReadyToSubmitToIrs = "ReadyToSubmitToIrs",
    SubmittedToIrs = "SubmittedToIrs",
    AcceptedByIrs = "AcceptedByIrs",
    RejectedByIrs = "RejectedByIrs",
    PendingCorrection = "PendingCorrection",
    Excluded = "Excluded",
    Ineligible = "Ineligible",
    LessThanNilGreaterThan = "<nil>",
}

export type TaxFormUpdateRequest = {
    data: TaxFormUpdateRequestData;
    payerConfirmedW9Info?: boolean | null | undefined;
    status?: TaxFormUpdateRequestStatus | null | undefined;
};

/** @internal */
export namespace TaxFormUpdateRequestData$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<TaxFormUpdateRequestData, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxFormUpdateRequestData> =
        z.object({});
}

/** @internal */
export const TaxFormUpdateRequestStatus$ = z.nativeEnum(TaxFormUpdateRequestStatus);

/** @internal */
export namespace TaxFormUpdateRequest$ {
    export type Inbound = {
        data: TaxFormUpdateRequestData$.Inbound;
        payerConfirmedW9Info?: boolean | null | undefined;
        status?: TaxFormUpdateRequestStatus | null | undefined;
    };

    export const inboundSchema: z.ZodType<TaxFormUpdateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => TaxFormUpdateRequestData$.inboundSchema),
            payerConfirmedW9Info: z.boolean().nullable().optional(),
            status: TaxFormUpdateRequestStatus$.nullable().optional(),
        })
        .transform((v) => {
            return {
                data: v.data,
                ...(v.payerConfirmedW9Info === undefined
                    ? null
                    : { payerConfirmedW9Info: v.payerConfirmedW9Info }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        data: TaxFormUpdateRequestData$.Outbound;
        payerConfirmedW9Info?: boolean | null | undefined;
        status?: TaxFormUpdateRequestStatus | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxFormUpdateRequest> = z
        .object({
            data: z.lazy(() => TaxFormUpdateRequestData$.outboundSchema),
            payerConfirmedW9Info: z.boolean().nullable().optional(),
            status: TaxFormUpdateRequestStatus$.nullable().optional(),
        })
        .transform((v) => {
            return {
                data: v.data,
                ...(v.payerConfirmedW9Info === undefined
                    ? null
                    : { payerConfirmedW9Info: v.payerConfirmedW9Info }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaymentEligibility = {
  field: string;
  value: string;
};

/** @internal */
export const PaymentEligibility$inboundSchema: z.ZodType<
  PaymentEligibility,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  value: z.string(),
});

/** @internal */
export type PaymentEligibility$Outbound = {
  field: string;
  value: string;
};

/** @internal */
export const PaymentEligibility$outboundSchema: z.ZodType<
  PaymentEligibility$Outbound,
  z.ZodTypeDef,
  PaymentEligibility
> = z.object({
  field: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentEligibility$ {
  /** @deprecated use `PaymentEligibility$inboundSchema` instead. */
  export const inboundSchema = PaymentEligibility$inboundSchema;
  /** @deprecated use `PaymentEligibility$outboundSchema` instead. */
  export const outboundSchema = PaymentEligibility$outboundSchema;
  /** @deprecated use `PaymentEligibility$Outbound` instead. */
  export type Outbound = PaymentEligibility$Outbound;
}

export function paymentEligibilityToJSON(
  paymentEligibility: PaymentEligibility,
): string {
  return JSON.stringify(
    PaymentEligibility$outboundSchema.parse(paymentEligibility),
  );
}

export function paymentEligibilityFromJSON(
  jsonString: string,
): SafeParseResult<PaymentEligibility, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentEligibility$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentEligibility' from JSON`,
  );
}

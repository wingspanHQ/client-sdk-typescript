/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BankingApplicationForm = {
  applicationLink: string;
  memberId: string;
};

/** @internal */
export const BankingApplicationForm$inboundSchema: z.ZodType<
  BankingApplicationForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationLink: z.string(),
  memberId: z.string(),
});

/** @internal */
export type BankingApplicationForm$Outbound = {
  applicationLink: string;
  memberId: string;
};

/** @internal */
export const BankingApplicationForm$outboundSchema: z.ZodType<
  BankingApplicationForm$Outbound,
  z.ZodTypeDef,
  BankingApplicationForm
> = z.object({
  applicationLink: z.string(),
  memberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankingApplicationForm$ {
  /** @deprecated use `BankingApplicationForm$inboundSchema` instead. */
  export const inboundSchema = BankingApplicationForm$inboundSchema;
  /** @deprecated use `BankingApplicationForm$outboundSchema` instead. */
  export const outboundSchema = BankingApplicationForm$outboundSchema;
  /** @deprecated use `BankingApplicationForm$Outbound` instead. */
  export type Outbound = BankingApplicationForm$Outbound;
}

export function bankingApplicationFormToJSON(
  bankingApplicationForm: BankingApplicationForm,
): string {
  return JSON.stringify(
    BankingApplicationForm$outboundSchema.parse(bankingApplicationForm),
  );
}

export function bankingApplicationFormFromJSON(
  jsonString: string,
): SafeParseResult<BankingApplicationForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankingApplicationForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankingApplicationForm' from JSON`,
  );
}

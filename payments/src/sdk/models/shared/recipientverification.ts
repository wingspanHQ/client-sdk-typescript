/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum TinType {
    Individual = "Individual",
    Business = "Business",
}

export type RecipientVerification = {
    failureCount: number;
    tinType: TinType;
    verified: boolean;
};

/** @internal */
export const TinType$ = z.nativeEnum(TinType);

/** @internal */
export namespace RecipientVerification$ {
    export type Inbound = {
        failureCount: number;
        tinType: TinType;
        verified: boolean;
    };

    export const inboundSchema: z.ZodType<RecipientVerification, z.ZodTypeDef, Inbound> = z
        .object({
            failureCount: z.number(),
            tinType: TinType$,
            verified: z.boolean(),
        })
        .transform((v) => {
            return {
                failureCount: v.failureCount,
                tinType: v.tinType,
                verified: v.verified,
            };
        });

    export type Outbound = {
        failureCount: number;
        tinType: TinType;
        verified: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RecipientVerification> = z
        .object({
            failureCount: z.number(),
            tinType: TinType$,
            verified: z.boolean(),
        })
        .transform((v) => {
            return {
                failureCount: v.failureCount,
                tinType: v.tinType,
                verified: v.verified,
            };
        });
}

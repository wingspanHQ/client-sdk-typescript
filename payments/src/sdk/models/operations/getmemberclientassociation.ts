/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetMemberClientAssociationRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetMemberClientAssociationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Describes details of member and client
   */
  memberClientSchema?: shared.MemberClientSchema | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetMemberClientAssociationRequest$inboundSchema: z.ZodType<
  GetMemberClientAssociationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetMemberClientAssociationRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetMemberClientAssociationRequest$outboundSchema: z.ZodType<
  GetMemberClientAssociationRequest$Outbound,
  z.ZodTypeDef,
  GetMemberClientAssociationRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberClientAssociationRequest$ {
  /** @deprecated use `GetMemberClientAssociationRequest$inboundSchema` instead. */
  export const inboundSchema = GetMemberClientAssociationRequest$inboundSchema;
  /** @deprecated use `GetMemberClientAssociationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetMemberClientAssociationRequest$outboundSchema;
  /** @deprecated use `GetMemberClientAssociationRequest$Outbound` instead. */
  export type Outbound = GetMemberClientAssociationRequest$Outbound;
}

export function getMemberClientAssociationRequestToJSON(
  getMemberClientAssociationRequest: GetMemberClientAssociationRequest,
): string {
  return JSON.stringify(
    GetMemberClientAssociationRequest$outboundSchema.parse(
      getMemberClientAssociationRequest,
    ),
  );
}

export function getMemberClientAssociationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMemberClientAssociationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMemberClientAssociationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMemberClientAssociationRequest' from JSON`,
  );
}

/** @internal */
export const GetMemberClientAssociationResponse$inboundSchema: z.ZodType<
  GetMemberClientAssociationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  MemberClientSchema: shared.MemberClientSchema$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "MemberClientSchema": "memberClientSchema",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetMemberClientAssociationResponse$Outbound = {
  ContentType: string;
  MemberClientSchema?: shared.MemberClientSchema$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetMemberClientAssociationResponse$outboundSchema: z.ZodType<
  GetMemberClientAssociationResponse$Outbound,
  z.ZodTypeDef,
  GetMemberClientAssociationResponse
> = z.object({
  contentType: z.string(),
  memberClientSchema: shared.MemberClientSchema$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    memberClientSchema: "MemberClientSchema",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberClientAssociationResponse$ {
  /** @deprecated use `GetMemberClientAssociationResponse$inboundSchema` instead. */
  export const inboundSchema = GetMemberClientAssociationResponse$inboundSchema;
  /** @deprecated use `GetMemberClientAssociationResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetMemberClientAssociationResponse$outboundSchema;
  /** @deprecated use `GetMemberClientAssociationResponse$Outbound` instead. */
  export type Outbound = GetMemberClientAssociationResponse$Outbound;
}

export function getMemberClientAssociationResponseToJSON(
  getMemberClientAssociationResponse: GetMemberClientAssociationResponse,
): string {
  return JSON.stringify(
    GetMemberClientAssociationResponse$outboundSchema.parse(
      getMemberClientAssociationResponse,
    ),
  );
}

export function getMemberClientAssociationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMemberClientAssociationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetMemberClientAssociationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMemberClientAssociationResponse' from JSON`,
  );
}

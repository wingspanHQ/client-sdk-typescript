/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum SessionType {
    User = "User",
    Api = "API",
    Guest = "Guest",
}

export type ApiSessionResponse = {
    expiration: string;
    isUnlimitedExpiration: boolean;
    labels?: Record<string, string> | null | undefined;
    sessionId: string;
    sessionType: SessionType;
    token?: string | null | undefined;
    userId?: string | null | undefined;
};

/** @internal */
export const SessionType$ = z.nativeEnum(SessionType);

/** @internal */
export namespace ApiSessionResponse$ {
    export type Inbound = {
        expiration: string;
        isUnlimitedExpiration: boolean;
        labels?: Record<string, string> | null | undefined;
        sessionId: string;
        sessionType: SessionType;
        token?: string | null | undefined;
        userId?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ApiSessionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            expiration: z.string(),
            isUnlimitedExpiration: z.boolean(),
            labels: z.nullable(z.record(z.string())).optional(),
            sessionId: z.string(),
            sessionType: SessionType$,
            token: z.nullable(z.string()).optional(),
            userId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                expiration: v.expiration,
                isUnlimitedExpiration: v.isUnlimitedExpiration,
                ...(v.labels === undefined ? null : { labels: v.labels }),
                sessionId: v.sessionId,
                sessionType: v.sessionType,
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        expiration: string;
        isUnlimitedExpiration: boolean;
        labels?: Record<string, string> | null | undefined;
        sessionId: string;
        sessionType: SessionType;
        token?: string | null | undefined;
        userId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApiSessionResponse> = z
        .object({
            expiration: z.string(),
            isUnlimitedExpiration: z.boolean(),
            labels: z.nullable(z.record(z.string())).optional(),
            sessionId: z.string(),
            sessionType: SessionType$,
            token: z.nullable(z.string()).optional(),
            userId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                expiration: v.expiration,
                isUnlimitedExpiration: v.isUnlimitedExpiration,
                ...(v.labels === undefined ? null : { labels: v.labels }),
                sessionId: v.sessionId,
                sessionType: v.sessionType,
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}

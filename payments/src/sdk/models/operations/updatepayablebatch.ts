/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdatePayableBatchRequest = {
    bulkPayableBatchUpdate?: shared.BulkPayableBatchUpdate | undefined;
    /**
     * Unique identifier for a batch
     */
    batchId: string;
};

export type UpdatePayableBatchResponse = {
    /**
     * A batch of items for importing as payables
     */
    bulkPayableBatch?: shared.BulkPayableBatch | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdatePayableBatchRequest$ {
    export type Inbound = {
        BulkPayableBatchUpdate?: shared.BulkPayableBatchUpdate$.Inbound | undefined;
        batchId: string;
    };

    export const inboundSchema: z.ZodType<UpdatePayableBatchRequest, z.ZodTypeDef, Inbound> = z
        .object({
            BulkPayableBatchUpdate: shared.BulkPayableBatchUpdate$.inboundSchema.optional(),
            batchId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.BulkPayableBatchUpdate === undefined
                    ? null
                    : { bulkPayableBatchUpdate: v.BulkPayableBatchUpdate }),
                batchId: v.batchId,
            };
        });

    export type Outbound = {
        BulkPayableBatchUpdate?: shared.BulkPayableBatchUpdate$.Outbound | undefined;
        batchId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePayableBatchRequest> = z
        .object({
            bulkPayableBatchUpdate: shared.BulkPayableBatchUpdate$.outboundSchema.optional(),
            batchId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.bulkPayableBatchUpdate === undefined
                    ? null
                    : { BulkPayableBatchUpdate: v.bulkPayableBatchUpdate }),
                batchId: v.batchId,
            };
        });
}

/** @internal */
export namespace UpdatePayableBatchResponse$ {
    export type Inbound = {
        BulkPayableBatch?: shared.BulkPayableBatch$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<UpdatePayableBatchResponse, z.ZodTypeDef, Inbound> = z
        .object({
            BulkPayableBatch: shared.BulkPayableBatch$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.BulkPayableBatch === undefined
                    ? null
                    : { bulkPayableBatch: v.BulkPayableBatch }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        BulkPayableBatch?: shared.BulkPayableBatch$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePayableBatchResponse> = z
        .object({
            bulkPayableBatch: shared.BulkPayableBatch$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.bulkPayableBatch === undefined
                    ? null
                    : { BulkPayableBatch: v.bulkPayableBatch }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

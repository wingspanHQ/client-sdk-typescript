/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Address = {
    addressLine1: string;
    addressLine2?: string | null | undefined;
    city: string;
    postalCode: string;
    state: string;
};

/** @internal */
export namespace Address$ {
    export type Inbound = {
        addressLine1: string;
        addressLine2?: string | null | undefined;
        city: string;
        postalCode: string;
        state: string;
    };

    export const inboundSchema: z.ZodType<Address, z.ZodTypeDef, Inbound> = z
        .object({
            addressLine1: z.string(),
            addressLine2: z.nullable(z.string()).optional(),
            city: z.string(),
            postalCode: z.string(),
            state: z.string(),
        })
        .transform((v) => {
            return {
                addressLine1: v.addressLine1,
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                city: v.city,
                postalCode: v.postalCode,
                state: v.state,
            };
        });

    export type Outbound = {
        addressLine1: string;
        addressLine2?: string | null | undefined;
        city: string;
        postalCode: string;
        state: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Address> = z
        .object({
            addressLine1: z.string(),
            addressLine2: z.nullable(z.string()).optional(),
            city: z.string(),
            postalCode: z.string(),
            state: z.string(),
        })
        .transform((v) => {
            return {
                addressLine1: v.addressLine1,
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                city: v.city,
                postalCode: v.postalCode,
                state: v.state,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type DeductionApplication = {
    amountDeducted: number;
    disbursementId?: string | null | undefined;
    payableId: string;
};

/** @internal */
export namespace DeductionApplication$ {
    export type Inbound = {
        amountDeducted: number;
        disbursementId?: string | null | undefined;
        payableId: string;
    };

    export const inboundSchema: z.ZodType<DeductionApplication, z.ZodTypeDef, Inbound> = z
        .object({
            amountDeducted: z.number(),
            disbursementId: z.nullable(z.string()).optional(),
            payableId: z.string(),
        })
        .transform((v) => {
            return {
                amountDeducted: v.amountDeducted,
                ...(v.disbursementId === undefined ? null : { disbursementId: v.disbursementId }),
                payableId: v.payableId,
            };
        });

    export type Outbound = {
        amountDeducted: number;
        disbursementId?: string | null | undefined;
        payableId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeductionApplication> = z
        .object({
            amountDeducted: z.number(),
            disbursementId: z.nullable(z.string()).optional(),
            payableId: z.string(),
        })
        .transform((v) => {
            return {
                amountDeducted: v.amountDeducted,
                ...(v.disbursementId === undefined ? null : { disbursementId: v.disbursementId }),
                payableId: v.payableId,
            };
        });
}

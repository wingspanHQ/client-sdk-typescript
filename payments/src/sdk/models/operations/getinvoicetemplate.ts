/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetInvoiceTemplateRequest = {
  /**
   * Unique identifier
   */
  id: string;
};

export type GetInvoiceTemplateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A recurring invoice
   */
  invoiceTemplate?: shared.InvoiceTemplate | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetInvoiceTemplateRequest$inboundSchema: z.ZodType<
  GetInvoiceTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetInvoiceTemplateRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetInvoiceTemplateRequest$outboundSchema: z.ZodType<
  GetInvoiceTemplateRequest$Outbound,
  z.ZodTypeDef,
  GetInvoiceTemplateRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceTemplateRequest$ {
  /** @deprecated use `GetInvoiceTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceTemplateRequest$inboundSchema;
  /** @deprecated use `GetInvoiceTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceTemplateRequest$outboundSchema;
  /** @deprecated use `GetInvoiceTemplateRequest$Outbound` instead. */
  export type Outbound = GetInvoiceTemplateRequest$Outbound;
}

export function getInvoiceTemplateRequestToJSON(
  getInvoiceTemplateRequest: GetInvoiceTemplateRequest,
): string {
  return JSON.stringify(
    GetInvoiceTemplateRequest$outboundSchema.parse(getInvoiceTemplateRequest),
  );
}

export function getInvoiceTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceTemplateRequest' from JSON`,
  );
}

/** @internal */
export const GetInvoiceTemplateResponse$inboundSchema: z.ZodType<
  GetInvoiceTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  InvoiceTemplate: shared.InvoiceTemplate$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "InvoiceTemplate": "invoiceTemplate",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetInvoiceTemplateResponse$Outbound = {
  ContentType: string;
  InvoiceTemplate?: shared.InvoiceTemplate$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetInvoiceTemplateResponse$outboundSchema: z.ZodType<
  GetInvoiceTemplateResponse$Outbound,
  z.ZodTypeDef,
  GetInvoiceTemplateResponse
> = z.object({
  contentType: z.string(),
  invoiceTemplate: shared.InvoiceTemplate$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    invoiceTemplate: "InvoiceTemplate",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceTemplateResponse$ {
  /** @deprecated use `GetInvoiceTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceTemplateResponse$inboundSchema;
  /** @deprecated use `GetInvoiceTemplateResponse$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceTemplateResponse$outboundSchema;
  /** @deprecated use `GetInvoiceTemplateResponse$Outbound` instead. */
  export type Outbound = GetInvoiceTemplateResponse$Outbound;
}

export function getInvoiceTemplateResponseToJSON(
  getInvoiceTemplateResponse: GetInvoiceTemplateResponse,
): string {
  return JSON.stringify(
    GetInvoiceTemplateResponse$outboundSchema.parse(getInvoiceTemplateResponse),
  );
}

export function getInvoiceTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceTemplateResponse' from JSON`,
  );
}
